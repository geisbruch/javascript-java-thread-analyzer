{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","elements.js","java-thread-analyzer.js","lib/dump_analyzer.js","lib/stack_analyzer.js","lib/thread_analyzer.js","node_modules/XRegExp/xregexp-all.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","DumpAnalyzer","ThreadAnalyzer","StackAnalyzer","./lib/dump_analyzer.js","./lib/stack_analyzer.js","./lib/thread_analyzer.js",2,"dump","options","this","replace","_threadAnalyzers","parseThreads","threadAnalyzers","stackAnalyzer","toJson","total_threads","thread_states","countByKey","thread_status","deadLocks","parseDeadLocks","arr","key","obj","forEach","prototype","filter","filtersStr","filters","push","RegExp","filteredThreads","rid","regex","stackRaw","match","threads","stack","actualStack","splitted","split","trim","parsed_ok","./stack_analyzer","./thread_analyzer",3,"stack_order","stack_include_waits_and_locks","tree","TreeNode","loadStacks","name","fullpath","total","states","parent","children","self","thread","Array","from","actualNode","line","shift","startsWith","node","getOrCreateChildren","addThread","id","incrementStatus","state","json","toMove","root","moving","pop","_incrementStatus","parents","nameStr","newNode",4,"opstions","has_locked_objects","locked_objects","waiting","waiting_obj","stack_plain","undefined","native_id","parse","safeRegexGet","str","element","res","XRegExp","exec","THREAD_HEADER_PARSER_NAME","THREAD_HEADER_PARSER_DAEMON","THREAD_HEADER_PARSER_PRIO","THREAD_HEADER_PARSER_OS_PRIO","THREAD_HEADER_PARSER_TID","THREAD_HEADER_PARSER_NID","THREAD_HEADER_PARSER_STATUS","THREAD_STATE_PARSER","THREAD_WAIT_PARSER","THREAD_LOCKED_PARSER","header","parseHeader","addToStack","locked","elem","is_deamon","priority","os_priority","status","status_condition","condition","status_no_condition",5,"definition","define","augment","captureNames","xSource","xFlags","isInternalOnly","p","REGEX_DATA","__proto__","source","flags","sort","join","clipDuplicates","nativ","copyRegex","isRegExp","TypeError","xData","getNativeFlags","flagsToAdd","flagsToRemove","xregexpSource","xregexpFlags","removeG","removeY","addG","addY","hasNamedCapture","slice","dec","hex","parseInt","hasFlagsProp","toString","indexOf","array","value","len","isType","type","isQuantifierNext","pattern","pos","test","pad4","prepareFlags","SyntaxError","$0","$1","registeredFlags","charAt","prepareOptions","registerFlag","flag","runTokens","scope","context","tokens","leadChar","result","matchLength","output","handler","reparse","setAstral","on","features","astral","setNatives","fixed","String","natives","toObject","add","regexCache","patternCache","defaultScope","classScope","nativeTokens","default","class","replacementToken","correctExecNpcg","hasNativeU","isSupported","exception","hasNativeY","g","m","y","token","generated","appliedPattern","appliedFlags","isInstalled","captures","version","addToken","optionalFlags","cache","flush","cacheName","escape","sticky","r2","cacheKey","lastIndex","index","global","callback","globalize","install","feature","matchChain","chain","recurseChain","values","level","item","matches","addMatch","backref","hasOwnProperty","ReferenceError","search","replacement","isRegex","s2","replaceEach","replacements","separator","limit","uninstall","union","patterns","numPriorCaptures","parts","numCaptures","rewrite","paren","origLastIndex","apply","arguments","args","$2","isNaN","lastLength","lastLastIndex","input","endIndex","deanchor","leadingAnchor","trailingAnchor","asXRegExp","subParts","build","subs","numPriorCaps","outerCapNames","sub","inlineFlags","data","numCaps","numOuterCaps","outerCapsMap","names","$3","$4","capName","intro","subName","row","start","end","matchRecursive","left","right","outerStart","innerStart","leftMatch","rightMatch","esc","basicFlags","escapeChar","vN","valueNames","openTokens","delimStart","delimEnd","lastOuterEnd","normalize","toLowerCase","charCode","chr","charCodeAt","invertBmp","range","lastEnd","cacheInvertedBmp","slug","prop","unicode","bmp","buildAstral","isNegated","combined","isBmpLast","cacheAstral","ERR_DOUBLE_NEG","ERR_UNKNOWN_NAME","ERR_UNKNOWN_REF","ERR_ASTRAL_ONLY","ERR_ASTRAL_IN_CLASS","isAstralMode","inverseOf","addUnicodeData","ERR_NO_NAME","ERR_NO_DATA","alias","unicodeData"],"mappings":"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","file":"java-thread-analyzer.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","DumpAnalyzer = require('./lib/dump_analyzer.js');\nThreadAnalyzer = require('./lib/thread_analyzer.js');\nStackAnalyzer = require('./lib/stack_analyzer.js');\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nDumpAnalyzer = require('./lib/dump_analyzer.js');\nThreadAnalyzer = require('./lib/thread_analyzer.js');\nStackAnalyzer = require('./lib/stack_analyzer.js');\n\n\n},{\"./lib/dump_analyzer.js\":2,\"./lib/stack_analyzer.js\":3,\"./lib/thread_analyzer.js\":4}],2:[function(require,module,exports){\n'use strict';\nvar ThreadAnalyzer = require(\"./thread_analyzer\"),\n\tStackAnalyzer = require(\"./stack_analyzer\");\n\nfunction DumpAnalyzer(dump, options) {\n\tvar self = this;\n\tthis.options = options;\n\tthis.dump = dump.replace(/(\\xed|\\xab|\\xee|\\xdb|\\x03|\\x00)/g, '');\n\tthis._threadAnalyzers = this.parseThreads(dump);\n\tthis.threadAnalyzers = this._threadAnalyzers;\n\tthis.stackAnalyzer = new StackAnalyzer(this.threadAnalyzers,options).toJson();\n\tthis.total_threads = this.threadAnalyzers.length;\n\tthis.thread_states = countByKey(this.threadAnalyzers,'state');\n\tthis.thread_status = countByKey(this.threadAnalyzers,'status');\n\tthis.deadLocks = this.parseDeadLocks(dump,this.threadAnalyzers);\n}\n\nfunction countByKey(arr, key) {\n\tvar obj = {}\n\tarr.forEach(function(t) {\n\t\tif(obj[t[key]]) {\n\t\t\tobj[t[key]]++;\n\t\t} else {\n\t\t\tobj[t[key]] = 1;\n\t\t}\n\t});\n\treturn obj;\n}\n\nDumpAnalyzer.prototype.filter = function(filtersStr) {\n\tif(!filtersStr || filtersStr.length == 0) {\n\t\t\tthis.threadAnalyzers = this._threadAnalyzers\n\t} else {\n\t\tvar filters = [];\n\t\tfiltersStr.forEach(function(f) {\n\t\t\tfilters.push(new RegExp(f,'ig'));\n\t\t});\n\t\tvar self = this;\n\t\tvar filteredThreads = [];\n\t\tthis._threadAnalyzers.forEach(function(t) {\n\t\t\tfor(var rid = 0; rid < filters.length; rid++) {\n\t\t\t\tvar regex = filters[rid]\n\t\t\t\tif(t.stackRaw.match(regex)) {\n\t\t\t\t\tfilteredThreads.push(t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.threadAnalyzers = filteredThreads;\n\t}\n\tthis.stackAnalyzer = new StackAnalyzer(this.threadAnalyzers,this.options).toJson();\n}\n\nDumpAnalyzer.prototype.parseDeadLocks = function(dump, threads) {\n}\n\n\nDumpAnalyzer.prototype.parseThreads = function(dump) {\n\tvar stack = [];\n\tvar actualStack = \"\";\n\tvar threadAnalyzers = [];\n\tvar splitted = dump.split(\"\\n\")\n\tfor(var i = 0; i < splitted.length; i++) {\n\t\tif(splitted[i].trim() == \"\") {\n\t\t\tstack.push(actualStack);\n\t\t\tactualStack = \"\";\n\t\t} else {\n\t\t\tactualStack+=splitted[i]+\"\\n\"\n\t\t}\n\t}\n\tstack.push(actualStack);\n\t//First split is \"Full thread dump Java HotSpot\"\n\tfor(var i = 1; i< stack.length; i++) {\n\t\tif(stack[i].trim() != \"\") {\n\t\t\tthreadAnalyzers.push(new ThreadAnalyzer(stack[i]))\n\t\t}\n\t}\n\treturn threadAnalyzers.filter(function(e) {\n\t\treturn e.parsed_ok\n\t});\n}\n\nmodule.exports = DumpAnalyzer;\n\n\n\n\n},{\"./stack_analyzer\":3,\"./thread_analyzer\":4}],3:[function(require,module,exports){\n/**\n * Options\n * \tOrder: inverted/Standar, default standar\n *  include_waits_and_locks, default false;\n */\nfunction StackAnalyzer(threads, options) {\n\tthis.threads = threads;\n\tthis.options = options || {stack_order:\"inverted\", stack_include_waits_and_locks: false};\n\tthis.tree = new TreeNode(\"root\",\"\");\n\tthis.loadStacks(this.threads);\n}\n\nStackAnalyzer.prototype.toJson = function() {\n\treturn this.tree.toJson();\n}\nStackAnalyzer.prototype.loadStacks = function(threads) {\n\tvar self = this;\n\tfor(var i = 0; i<threads.length;i++) {\n\t\tvar thread = threads[i];\n\t\tvar stack = Array.from(thread.stack);\n\t\tvar position = 0;\n\t\tvar actualNode = self.tree;\n\t\twhile(stack.length > 0) {\n\t\t\tvar line = stack.shift();\n\t\t\t/*if(self.options.stack_order == \"inverted\" ) {\n\t\t\t\tline = stack.shift();\n\t\t\t} else {\n\t\t\t\tline = stack.pop();\n\t\t\t}*/\n\t\t\tif(line.trim().startsWith(\"-\") && !self.options.stack_include_waits_and_locks) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/*\n\t\t\t * To get stack in standar way\n\t\t\t */\n\t\t\t//var line = stack.shift()\n\t\t\tvar node = actualNode.getOrCreateChildren(line);\n\t\t\tnode.addThread({name:thread.name,id:thread.id});\n\t\t\t//Increment at the end\n\t\t\tif(stack.length == 0)\n\t\t\t\tnode.incrementStatus(thread.state);\n\t\t\tactualNode = node;\n\t\t}\n\t}\n}\n\nfunction TreeNode(name) {\n\tthis.name = name;\n\tthis.fullpath = \"\";\n\tthis.total = 0;\n\tthis.states = {};\n\tthis.parent = null;\n\tthis.threads = [];\n\tthis.children = [];\n}\nTreeNode.prototype.addThread = function(t) {\n\tthis.threads.push(t);\n}\n\n/**\n * Treenode is an invalid json structure because contains circular structures, \n * because of that we have the toJson function to remove that reference\n */\nTreeNode.prototype.toJson = function() {\n\tvar json = {};\n\tvar toMove = [{node: this,root:json}];\n\twhile(toMove.length > 0) {\n\t\tvar moving = toMove.pop();\n\t\tmoving.root.children = [];\n\t\tmoving.root.name = moving.node.name;\n\t\tmoving.root.states = moving.node.states;\n\t\tmoving.root.total = moving.node.total;\n\t\tmoving.root.threads = moving.node.threads;\n\t\tmoving.node.children.forEach(function(e) {\n\t\t\tvar r = {};\n\t\t\tmoving.root.children.push(r);\n\t\t\ttoMove.push({node:e, root:r});\n\t\t})\n\t}\n\treturn json;\n}\n\nTreeNode.prototype.incrementStatus = function(state) {\n\tthis._incrementStatus(state);\n\tvar parents = [this.parent];\n\twhile(parents.length>0) {\n\t\tvar parent = parents.pop();\n\t\tif(parent != null) {\n\t\t\tif(parent.parent != null) {\n\t\t\t\tparents.push(parent.parent);\n\t\t\t}\n\t\t\tparent._incrementStatus(state);\n\t\t}\n\t}\n}\nTreeNode.prototype._incrementStatus = function(state) {\n\tif(!this.states[state]) {\n\t\tthis.states[state] = 1;\n\t} else {\n\t\tthis.states[state]++;\n\t}\n\tthis.total++;\n}\n\nTreeNode.prototype.getOrCreateChildren = function(nameStr) {\n\tvar name = nameStr.trim();\n\tfor(var i = 0 ; i < this.children.length; i++) {\n\t\tif(this.children[i].name == name) {\n\t\t\treturn this.children[i];\n\t\t}\n\t}\n\tvar newNode = new TreeNode(name);\n\tnewNode.fullpath = this.fullpath +\" -> \"+name;\n\tnewNode.parent = this;\n\tthis.children.push(newNode);\n\treturn newNode;\n}\n\nmodule.exports = StackAnalyzer;\n},{}],4:[function(require,module,exports){\nvar XRegExp = require(\"XRegExp\");\n\n/**\n * The next regexes are used to parse thread header\n * thread_name: the name of the thread\n * daemon: if the thread is type daemon it group will exist\n * prio: thread priority\n * tid: thread id\n * nid: native thread id\n * - If the thead is waiting condition this will be present\n * \t- status_condition: the condtion status\n *  - contion: object of condition\n * - else:\n *\t- status_no_condtion will be present with the status name\n */\nvar THREAD_HEADER_PARSER_NAME=XRegExp('^(\\\\t)? *\\\"(?<thread_name>.*)\\\" ','i');\nvar THREAD_HEADER_PARSER_DAEMON=XRegExp(' daemon ','i');\nvar THREAD_HEADER_PARSER_PRIO=XRegExp('prio=(?<prio>\\\\d+)','i');\nvar THREAD_HEADER_PARSER_OS_PRIO=XRegExp('prio=(?<os_prio>\\\\d+)','i');\nvar THREAD_HEADER_PARSER_TID=XRegExp('tid=(?<tid>0x[0-9a-fA-F]+)','i');\nvar THREAD_HEADER_PARSER_NID=XRegExp('nid=(?<nid>0x[0-9a-fA-F]+)','i')\nvar THREAD_HEADER_PARSER_STATUS=XRegExp('nid=0x[0-9a-fA-F]+ ((?<status_condition>.*) \\\\[(?<condition>.*)\\\\]|(?<status_no_condition>.*)) *$','i')\n\nvar THREAD_STATE_PARSER=XRegExp('(?<state>NEW|RUNNABLE|BLOCKED|WAITING|TIMED_WAITING|TERMINATED)')\nvar THREAD_WAIT_PARSER=XRegExp('.*- waiting (on|to lock) <(?<waiting_obj>0x[0-9a-fA-F]+)>','i');\nvar THREAD_LOCKED_PARSER=XRegExp('.*- locked <(?<locked_obj>0x[0-9a-fA-F]+)>','i');\n/*var THREAD_HEADER_PARSER=XRegExp('^ *\\\"(?<thread_name>.*)\\\" ?(?<daemon>daemon)? prio=(?<prio>\\\\d+) '+\n *\t\t\t\t\t\t\t\t 'tid=(?<tid>0x[0-9a-fA-F]+) nid=(?<nid>0x[0-9a-fA-F]+) '+\n *\t\t\t\t\t\t\t\t '((?<status_condition>.*) \\\\[(?<condition>.*)\\\\]|(?<status_no_condition>.*))',\"i\");\n */\nfunction ThreadAnalyzer(stack,options) {\n\tthis.opstions = options || {}; \n\tthis.stackRaw = stack;\n\tthis.has_locked_objects = false;\n\tthis.locked_objects = [];\n\tthis.waiting = false;\n\tthis.waiting_obj = \"\";\n\tthis.stack = [];\n\tthis.state = \"undefined\";\n\tthis.stack_plain = \"\";\n\tthis.parsed_ok = false;\n\tthis.name = \"\";\n\tthis.id = undefined;\n\tthis.native_id = undefined;\n\tthis.parse();\n}\n\nThreadAnalyzer.prototype.parse = function() {\n\tvar splitted = this.stackRaw.split(\"\\n\");\n\tthis.header = splitted[0]\n\t//First line contains thead header\n\tthis.parseHeader(this.header);\n\t//Thread can't be parsed\n\tif(!this.name)\n\t\treturn;\n\t//SecondLine line contains thread state\n\tif(splitted.length > 1) {\n\t\tthis.state = safeRegexGet(splitted[1],THREAD_STATE_PARSER,'state')\n\t}\n\tfor(var i = 2; i < splitted.length; i++) {\n\t\tthis.addToStack(splitted[i].trim())\n\t\tvar locked = safeRegexGet(splitted[i],THREAD_LOCKED_PARSER,'locked_obj');\n\t\tif(locked) {\n\t\t\tthis.has_locked_objects = true;\n\t\t\tthis.locked_objects.push(locked)\n\t\t}\n\t\tvar waiting = safeRegexGet(splitted[i],THREAD_WAIT_PARSER, 'waiting_obj')\n\t\tif(waiting) {\n\t\t\tthis.waiting = true;\n\t\t\tthis.waiting_obj = waiting;\n\t\t}\n\n\t}\n\tthis.parsed_ok = true;\n}\n\nThreadAnalyzer.prototype.addToStack = function(elem) {\n\telem = elem.trim();\n\tif(elem != \"\") {\n\t\tthis.stack.push(elem);\n\t\tthis.stack_plain+=\" -> \"+elem;\n\t\tthis.stack_plain = this.stack_plain.trim();\n\t}\n}\n\nThreadAnalyzer.prototype.parseHeader = function(header) {\n\tthis.name = safeRegexGet(header, THREAD_HEADER_PARSER_NAME,'thread_name')\n\tthis.is_deamon = safeRegexGet(header, THREAD_HEADER_PARSER_DAEMON,'deamon') ? true : false;\n\tthis.priority = safeRegexGet(header, THREAD_HEADER_PARSER_PRIO, 'prio');\n\tthis.os_priority = safeRegexGet(header, THREAD_HEADER_PARSER_OS_PRIO, 'os_prio');\n\tthis.id = safeRegexGet(header, THREAD_HEADER_PARSER_TID, 'tid');\n\tthis.native_id = safeRegexGet(header, THREAD_HEADER_PARSER_NID, 'nid');\n\tvar status = XRegExp.exec(header, THREAD_HEADER_PARSER_STATUS);\n\tif(status) {\n\t\tif(status.status_condition) {\n\t\t\tthis.status = status.status_condition;\n\t\t\tthis.status_condition = status.condition;\n\t\t} else {\n\t\t\tthis.status = status.status_no_condition;\n\t\t\tthis.status_condition = null;\n\t\t}\n\t}\n}\n\n function safeRegexGet(str, regex, element) {\n\tvar res = XRegExp.exec(str, regex);\n\tif(!res)\n\t\treturn null;\n\telse \n\t\treturn res[element]\n}\n\nmodule.exports = ThreadAnalyzer;\n\n\n},{\"XRegExp\":5}],5:[function(require,module,exports){\n/*!\n * XRegExp-All 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n */\n\n// Module systems magic dance. Don't use strict mode for this function, so it can assign to global.\n;(function(root, definition) {\n    var self;\n\n    // RequireJS\n    if (typeof define === 'function') {\n        define(definition);\n    // CommonJS\n    } else if (typeof exports === 'object') {\n        self = definition();\n        // Use Node.js's `module.exports`. This supports both `require('xregexp')` and\n        // `require('xregexp').XRegExp`\n        (typeof module === 'object' ? (module.exports = self) : exports).XRegExp = self;\n    // <script>\n    } else {\n        // Create global\n        root.XRegExp = definition();\n    }\n}(this, function() {\n\n/*!\n * XRegExp 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2007-2015 MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\nvar XRegExp = (function(undefined) {\n    'use strict';\n\n/* ==============================\n * Private variables\n * ============================== */\n\n    var // Internal reference to the `XRegExp` object\n        self,\n        // Property name used for extended regex instance data\n        REGEX_DATA = 'xregexp',\n        // Optional features that can be installed and uninstalled\n        features = {\n            astral: false,\n            natives: false\n        },\n        // Native methods to use and restore ('native' is an ES3 reserved keyword)\n        nativ = {\n            exec: RegExp.prototype.exec,\n            test: RegExp.prototype.test,\n            match: String.prototype.match,\n            replace: String.prototype.replace,\n            split: String.prototype.split\n        },\n        // Storage for fixed/extended native methods\n        fixed = {},\n        // Storage for regexes cached by `XRegExp.cache`\n        regexCache = {},\n        // Storage for pattern details cached by the `XRegExp` constructor\n        patternCache = {},\n        // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n        tokens = [],\n        // Token scopes\n        defaultScope = 'default',\n        classScope = 'class',\n        // Regexes that match native regex syntax, including octals\n        nativeTokens = {\n            // Any native multicharacter token in default scope, or any single character\n            'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n            // Any native multicharacter token in character class scope, or any single character\n            'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n        },\n        // Any backreference or dollar-prefixed character in replacement strings\n        replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g,\n        // Check for correct `exec` handling of nonparticipating capturing groups\n        correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined,\n        // Check for ES6 `u` flag support\n        hasNativeU = (function() {\n            var isSupported = true;\n            try {\n                new RegExp('', 'u');\n            } catch (exception) {\n                isSupported = false;\n            }\n            return isSupported;\n        }()),\n        // Check for ES6 `y` flag support\n        hasNativeY = (function() {\n            var isSupported = true;\n            try {\n                new RegExp('', 'y');\n            } catch (exception) {\n                isSupported = false;\n            }\n            return isSupported;\n        }()),\n        // Check for ES6 `flags` prop support\n        hasFlagsProp = /a/.flags !== undefined,\n        // Tracker for known flags, including addon flags\n        registeredFlags = {\n            g: true,\n            i: true,\n            m: true,\n            u: hasNativeU,\n            y: hasNativeY\n        },\n        // Shortcut to `Object.prototype.toString`\n        toString = {}.toString,\n        // Shortcut to `XRegExp.addToken`\n        add;\n\n/* ==============================\n * Private functions\n * ============================== */\n\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Augmented regex.\n */\n    function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n        var p;\n\n        regex[REGEX_DATA] = {\n            captureNames: captureNames\n        };\n\n        if (isInternalOnly) {\n            return regex;\n        }\n\n        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n        if (regex.__proto__) {\n            regex.__proto__ = self.prototype;\n        } else {\n            for (p in self.prototype) {\n                // A `self.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n                // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n                // extensions exist on `regex.prototype` anyway\n                regex[p] = self.prototype[p];\n            }\n        }\n\n        regex[REGEX_DATA].source = xSource;\n        // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n        regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\n\n        return regex;\n    }\n\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {String} String with any duplicate characters removed.\n */\n    function clipDuplicates(str) {\n        return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n    }\n\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   <li>`addG` {Boolean} Add flag g while copying the regex.\n *   <li>`addY` {Boolean} Add flag y while copying the regex.\n *   <li>`removeG` {Boolean} Remove flag g while copying the regex.\n *   <li>`removeY` {Boolean} Remove flag y while copying the regex.\n *   <li>`isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n    function copyRegex(regex, options) {\n        if (!self.isRegExp(regex)) {\n            throw new TypeError('Type RegExp expected');\n        }\n\n        var xData = regex[REGEX_DATA] || {},\n            flags = getNativeFlags(regex),\n            flagsToAdd = '',\n            flagsToRemove = '',\n            xregexpSource = null,\n            xregexpFlags = null;\n\n        options = options || {};\n\n        if (options.removeG) {flagsToRemove += 'g';}\n        if (options.removeY) {flagsToRemove += 'y';}\n        if (flagsToRemove) {\n            flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');\n        }\n\n        if (options.addG) {flagsToAdd += 'g';}\n        if (options.addY) {flagsToAdd += 'y';}\n        if (flagsToAdd) {\n            flags = clipDuplicates(flags + flagsToAdd);\n        }\n\n        if (!options.isInternalOnly) {\n            if (xData.source !== undefined) {\n                xregexpSource = xData.source;\n            }\n            // null or undefined; don't want to add to `flags` if the previous value was null, since\n            // that indicates we're not tracking original precompilation flags\n            if (xData.flags != null) {\n                // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are\n                // never removed for non-internal regexes, so don't need to handle it\n                xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\n            }\n        }\n\n        // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to\n        // avoid searching for special tokens. That would be wrong for regexes constructed by\n        // `RegExp`, and unnecessary for regexes constructed by `XRegExp` because the regex has\n        // already undergone the translation to native regex syntax\n        regex = augment(\n            new RegExp(regex.source, flags),\n            hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,\n            xregexpSource,\n            xregexpFlags,\n            options.isInternalOnly\n        );\n\n        return regex;\n    }\n\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {Number}\n */\n    function dec(hex) {\n        return parseInt(hex, 16);\n    }\n\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {String} Native flags in use.\n */\n    function getNativeFlags(regex) {\n        return hasFlagsProp ?\n            regex.flags :\n            // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or\n            // concatenation with an empty string) allows this to continue working predictably when\n            // `XRegExp.proptotype.toString` is overriden\n            nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\n    }\n\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {Boolean} Whether the regex uses named capture.\n */\n    function hasNamedCapture(regex) {\n        return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n    }\n\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {String}\n */\n    function hex(dec) {\n        return parseInt(dec, 10).toString(16);\n    }\n\n/**\n * Returns the first index at which a given value can be found in an array.\n *\n * @private\n * @param {Array} array Array to search.\n * @param {*} value Value to locate in the array.\n * @returns {Number} Zero-based index at which the item is found, or -1.\n */\n    function indexOf(array, value) {\n        var len = array.length, i;\n\n        for (i = 0; i < len; ++i) {\n            if (array[i] === value) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {Boolean} Whether the object matches the type.\n */\n    function isType(value, type) {\n        return toString.call(value) === '[object ' + type + ']';\n    }\n\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next token is a quantifier.\n */\n    function isQuantifierNext(pattern, pos, flags) {\n        return nativ.test.call(\n            flags.indexOf('x') > -1 ?\n                // Ignore any leading whitespace, line comments, and inline comments\n                /^(?:\\s+|#.*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ :\n                // Ignore any leading inline comments\n                /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/,\n            pattern.slice(pos)\n        );\n    }\n\n/**\n * Pads the provided string with as many leading zeros as needed to get to length 4. Used to produce\n * fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {String}\n */\n    function pad4(str) {\n        while (str.length < 4) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {Object} Object with properties `pattern` and `flags`.\n */\n    function prepareFlags(pattern, flags) {\n        var i;\n\n        // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n        if (clipDuplicates(flags) !== flags) {\n            throw new SyntaxError('Invalid duplicate regex flag ' + flags);\n        }\n\n        // Strip and apply a leading mode modifier with any combination of flags except g or y\n        pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function($0, $1) {\n            if (nativ.test.call(/[gy]/, $1)) {\n                throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);\n            }\n            // Allow duplicate flags within the mode modifier\n            flags = clipDuplicates(flags + $1);\n            return '';\n        });\n\n        // Throw on unknown native or nonnative flags\n        for (i = 0; i < flags.length; ++i) {\n            if (!registeredFlags[flags.charAt(i)]) {\n                throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));\n            }\n        }\n\n        return {\n            pattern: pattern,\n            flags: flags\n        };\n    }\n\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n    function prepareOptions(value) {\n        var options = {};\n\n        if (isType(value, 'String')) {\n            self.forEach(value, /[^\\s,]+/, function(match) {\n                options[match] = true;\n            });\n\n            return options;\n        }\n\n        return value;\n    }\n\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n    function registerFlag(flag) {\n        if (!/^[\\w$]$/.test(flag)) {\n            throw new Error('Flag must be a single character A-Za-z0-9_$');\n        }\n\n        registeredFlags[flag] = true;\n    }\n\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n    function runTokens(pattern, flags, pos, scope, context) {\n        var i = tokens.length,\n            leadChar = pattern.charAt(pos),\n            result = null,\n            match,\n            t;\n\n        // Run in reverse insertion order\n        while (i--) {\n            t = tokens[i];\n            if (\n                (t.leadChar && t.leadChar !== leadChar) ||\n                (t.scope !== scope && t.scope !== 'all') ||\n                (t.flag && flags.indexOf(t.flag) === -1)\n            ) {\n                continue;\n            }\n\n            match = self.exec(pattern, t.regex, pos, 'sticky');\n            if (match) {\n                result = {\n                    matchLength: match[0].length,\n                    output: t.handler.call(context, match, scope, flags),\n                    reparse: t.reparse\n                };\n                // Finished with token tests\n                break;\n            }\n        }\n\n        return result;\n    }\n\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n    function setAstral(on) {\n        features.astral = on;\n    }\n\n/**\n * Enables or disables native method overrides.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n    function setNatives(on) {\n        RegExp.prototype.exec = (on ? fixed : nativ).exec;\n        RegExp.prototype.test = (on ? fixed : nativ).test;\n        String.prototype.match = (on ? fixed : nativ).match;\n        String.prototype.replace = (on ? fixed : nativ).replace;\n        String.prototype.split = (on ? fixed : nativ).split;\n\n        features.natives = on;\n    }\n\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n    function toObject(value) {\n        // null or undefined\n        if (value == null) {\n            throw new TypeError('Cannot convert null or undefined to object');\n        }\n\n        return value;\n    }\n\n/* ==============================\n * Constructor\n * ============================== */\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     <li>`g` - global\n *     <li>`i` - ignore case\n *     <li>`m` - multiline anchors\n *     <li>`u` - unicode (ES6)\n *     <li>`y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     <li>`n` - explicit capture\n *     <li>`s` - dot matches all (aka singleline)\n *     <li>`x` - free-spacing and line comments (aka extended)\n *     <li>`A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\\n *          (?<month> [0-9]{2} ) -?  # month \\n\\\n *          (?<day>   [0-9]{2} )     # day   ', 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n    self = function(pattern, flags) {\n        var context = {\n                hasNamedCapture: false,\n                captureNames: []\n            },\n            scope = defaultScope,\n            output = '',\n            pos = 0,\n            result,\n            token,\n            generated,\n            appliedPattern,\n            appliedFlags;\n\n        if (self.isRegExp(pattern)) {\n            if (flags !== undefined) {\n                throw new TypeError('Cannot supply flags when copying a RegExp');\n            }\n            return copyRegex(pattern);\n        }\n\n        // Copy the argument behavior of `RegExp`\n        pattern = pattern === undefined ? '' : String(pattern);\n        flags = flags === undefined ? '' : String(flags);\n\n        if (self.isInstalled('astral') && flags.indexOf('A') === -1) {\n            // This causes an error to be thrown if the Unicode Base addon is not available\n            flags += 'A';\n        }\n\n        if (!patternCache[pattern]) {\n            patternCache[pattern] = {};\n        }\n\n        if (!patternCache[pattern][flags]) {\n            // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n            result = prepareFlags(pattern, flags);\n            appliedPattern = result.pattern;\n            appliedFlags = result.flags;\n\n            // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n            // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n            while (pos < appliedPattern.length) {\n                do {\n                    // Check for custom tokens at the current position\n                    result = runTokens(appliedPattern, appliedFlags, pos, scope, context);\n                    // If the matched token used the `reparse` option, splice its output into the\n                    // pattern before running tokens again at the same position\n                    if (result && result.reparse) {\n                        appliedPattern = appliedPattern.slice(0, pos) +\n                            result.output +\n                            appliedPattern.slice(pos + result.matchLength);\n                    }\n                } while (result && result.reparse);\n\n                if (result) {\n                    output += result.output;\n                    pos += (result.matchLength || 1);\n                } else {\n                    // Get the native token at the current position\n                    token = self.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];\n                    output += token;\n                    pos += token.length;\n                    if (token === '[' && scope === defaultScope) {\n                        scope = classScope;\n                    } else if (token === ']' && scope === classScope) {\n                        scope = defaultScope;\n                    }\n                }\n            }\n\n            patternCache[pattern][flags] = {\n                // Cleanup token cruft: repeated `(?:)(?:)` and leading/trailing `(?:)`\n                pattern: nativ.replace.call(output, /\\(\\?:\\)(?=\\(\\?:\\))|^\\(\\?:\\)|\\(\\?:\\)$/g, ''),\n                // Strip all but native flags\n                flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\n                // `context.captureNames` has an item for each capturing group, even if unnamed\n                captures: context.hasNamedCapture ? context.captureNames : null\n            };\n        }\n\n        generated = patternCache[pattern][flags];\n        return augment(\n            new RegExp(generated.pattern, generated.flags),\n            generated.captures,\n            pattern,\n            flags\n        );\n    };\n\n// Add `RegExp.prototype` to the prototype chain\n    self.prototype = new RegExp();\n\n/* ==============================\n * Public properties\n * ============================== */\n\n/**\n * The XRegExp version number.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n    self.version = '3.0.0';\n\n/* ==============================\n * Public methods\n * ============================== */\n\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   <li>The match array, with named backreference properties.\n *   <li>The regex scope where the match was found: 'default' or 'class'.\n *   <li>The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   <li>`scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   <li>`flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   <li>`optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   <li>`reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   <li>`leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   function() {return '\\\\x07';},\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   function(match) {return match[1] + (match[2] ? '' : '?');},\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n    self.addToken = function(regex, handler, options) {\n        options = options || {};\n        var optionalFlags = options.optionalFlags, i;\n\n        if (options.flag) {\n            registerFlag(options.flag);\n        }\n\n        if (optionalFlags) {\n            optionalFlags = nativ.split.call(optionalFlags, '');\n            for (i = 0; i < optionalFlags.length; ++i) {\n                registerFlag(optionalFlags[i]);\n            }\n        }\n\n        // Add to the private list of syntax tokens\n        tokens.push({\n            regex: copyRegex(regex, {\n                addG: true,\n                addY: hasNativeY,\n                isInternalOnly: true\n            }),\n            handler: handler,\n            scope: options.scope || defaultScope,\n            flag: options.flag,\n            reparse: options.reparse,\n            leadChar: options.leadChar\n        });\n\n        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n        // flags might now produce different results\n        self.cache.flush('patterns');\n    };\n\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\n *   // The regex is compiled once only\n * }\n */\n    self.cache = function(pattern, flags) {\n        if (!regexCache[pattern]) {\n            regexCache[pattern] = {};\n        }\n        return regexCache[pattern][flags] || (\n            regexCache[pattern][flags] = self(pattern, flags)\n        );\n    };\n\n// Intentionally undocumented\n    self.cache.flush = function(cacheName) {\n        if (cacheName === 'patterns') {\n            // Flush the pattern cache used by the `XRegExp` constructor\n            patternCache = {};\n        } else {\n            // Flush the regex cache populated by `XRegExp.cache`\n            regexCache = {};\n        }\n    };\n\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any point within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {String} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\ <\\.>'\n */\n    self.escape = function(str) {\n        return nativ.replace.call(toObject(str), /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    };\n\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named backreference properties are included on the match array.\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named backreference properties, or `null`.\n * @example\n *\n * // Basic use, with named backreference\n * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * var pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n    self.exec = function(str, regex, pos, sticky) {\n        var cacheKey = 'g',\n            addY = false,\n            match,\n            r2;\n\n        addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));\n        if (addY) {\n            cacheKey += 'y';\n        }\n\n        regex[REGEX_DATA] = regex[REGEX_DATA] || {};\n\n        // Shares cached copies with `XRegExp.match`/`replace`\n        r2 = regex[REGEX_DATA][cacheKey] || (\n            regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n                addG: true,\n                addY: addY,\n                removeY: sticky === false,\n                isInternalOnly: true\n            })\n        );\n\n        r2.lastIndex = pos = pos || 0;\n\n        // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n        match = fixed.exec.call(r2, str);\n\n        if (sticky && match && match.index !== pos) {\n            match = null;\n        }\n\n        if (regex.global) {\n            regex.lastIndex = match ? r2.lastIndex : 0;\n        }\n\n        return match;\n    };\n\n/**\n * Executes a provided function once per regex match.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   <li>The match array, with named backreference properties.\n *   <li>The zero-based match index.\n *   <li>The string being traversed.\n *   <li>The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * XRegExp.forEach('1a2345', /\\d/, function(match, i) {\n *   if (i % 2) this.push(+match[0]);\n * }, []);\n * // -> [2, 4]\n */\n    self.forEach = function(str, regex, callback) {\n        var pos = 0,\n            i = -1,\n            match;\n\n        while ((match = self.exec(str, regex, pos))) {\n            // Because `regex` is provided to `callback`, the function could use the deprecated/\n            // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since\n            // `XRegExp.exec` doesn't use `lastIndex` to set the search position, this can't lead\n            // to an infinite loop, at least. Actually, because of the way `XRegExp.exec` caches\n            // globalized versions of regexes, mutating the regex will not have any effect on the\n            // iteration or matched strings, which is a nice side effect that brings extra safety\n            callback(match, ++i, str, regex);\n\n            pos = match.index + (match[0].length || 1);\n        }\n    };\n\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * var globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n    self.globalize = function(regex) {\n        return copyRegex(regex, {addG: true});\n    };\n\n/**\n * Installs optional features according to the specified options. Can be undone using\n * {@link #XRegExp.uninstall}.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Overrides native regex methods with fixed/extended versions that support named\n *   // backreferences and fix numerous cross-browser bugs\n *   natives: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral natives');\n */\n    self.install = function(options) {\n        options = prepareOptions(options);\n\n        if (!features.astral && options.astral) {\n            setAstral(true);\n        }\n\n        if (!features.natives && options.natives) {\n            setNatives(true);\n        }\n    };\n\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   <li>`natives`\n *   <li>`astral`\n * @returns {Boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('natives');\n */\n    self.isInstalled = function(feature) {\n        return !!(features[feature]);\n    };\n\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {Boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n    self.isRegExp = function(value) {\n        return toString.call(value) === '[object RegExp]';\n        //return isType(value, 'RegExp');\n    };\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n    self.match = function(str, regex, scope) {\n        var global = (regex.global && scope !== 'one') || scope === 'all',\n            cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY',\n            result,\n            r2;\n\n        regex[REGEX_DATA] = regex[REGEX_DATA] || {};\n\n        // Shares cached copies with `XRegExp.exec`/`replace`\n        r2 = regex[REGEX_DATA][cacheKey] || (\n            regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n                addG: !!global,\n                addY: !!regex.sticky,\n                removeG: scope === 'one',\n                isInternalOnly: true\n            })\n        );\n\n        result = nativ.match.call(toObject(str), r2);\n\n        if (regex.global) {\n            regex.lastIndex = (\n                (scope === 'one' && result) ?\n                    // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n                    (result.index + result[0].length) : 0\n            );\n        }\n\n        return global ? (result || []) : (result && result[0]);\n    };\n\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and objects with `regex`\n * and `backref` properties. When a backreference is specified, the named or numbered backreference\n * is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\n *         <a href=\"http://www.google.com/\">Google</a>';\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n    self.matchChain = function(str, chain) {\n        return (function recurseChain(values, level) {\n            var item = chain[level].regex ? chain[level] : {regex: chain[level]},\n                matches = [],\n                addMatch = function(match) {\n                    if (item.backref) {\n                        /* Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold\n                         * the `undefined`s for backreferences to nonparticipating capturing\n                         * groups. In such cases, a `hasOwnProperty` or `in` check on its own would\n                         * inappropriately throw the exception, so also check if the backreference\n                         * is a number that is within the bounds of the array.\n                         */\n                        if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {\n                            throw new ReferenceError('Backreference to undefined group: ' + item.backref);\n                        }\n\n                        matches.push(match[item.backref] || '');\n                    } else {\n                        matches.push(match[0]);\n                    }\n                },\n                i;\n\n            for (i = 0; i < values.length; ++i) {\n                self.forEach(values[i], item.regex, addMatch);\n            }\n\n            return ((level === chain.length - 1) || !matches.length) ?\n                matches :\n                recurseChain(matches, level + 1);\n        }([str], 0));\n    };\n\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement\n * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared\n * to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     <li>$$ - Inserts a literal $ character.\n *     <li>$&, $0 - Inserts the matched substring.\n *     <li>$` - Inserts the string that precedes the matched substring (left context).\n *     <li>$' - Inserts the string that follows the matched substring (right context).\n *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\n *       backreference n/nn.\n *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as\n *       properties of this first argument.\n *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\n *     <li>The zero-based index of the match within the total search string.\n *     <li>The total string being searched.\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '${last}, ${first}');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, function(match) {\n *   return match.last + ', ' + match.first;\n * });\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n    self.replace = function(str, search, replacement, scope) {\n        var isRegex = self.isRegExp(search),\n            global = (search.global && scope !== 'one') || scope === 'all',\n            cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY',\n            s2 = search,\n            result;\n\n        if (isRegex) {\n            search[REGEX_DATA] = search[REGEX_DATA] || {};\n\n            // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n            // `lastIndex` isn't updated *during* replacement iterations\n            s2 = search[REGEX_DATA][cacheKey] || (\n                search[REGEX_DATA][cacheKey] = copyRegex(search, {\n                    addG: !!global,\n                    addY: !!search.sticky,\n                    removeG: scope === 'one',\n                    isInternalOnly: true\n                })\n            );\n        } else if (global) {\n            s2 = new RegExp(self.escape(String(search)), 'g');\n        }\n\n        // Fixed `replace` required for named backreferences, etc.\n        result = fixed.replace.call(toObject(str), s2, replacement);\n\n        if (isRegex && search.global) {\n            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n            search.lastIndex = 0;\n        }\n\n        return result;\n    };\n\n/**\n * Performs batch processing of string replacements. Used like {@link #XRegExp.replace}, but\n * accepts an array of replacement details. Later replacements operate on the output of earlier\n * replacements. Replacement details are accepted as an array with a regex or string to search for,\n * the replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `${name}`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z${name}'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, function($0) {\n *     return $0.toUpperCase();\n *   }]\n * ]);\n */\n    self.replaceEach = function(str, replacements) {\n        var i, r;\n\n        for (i = 0; i < replacements.length; ++i) {\n            r = replacements[i];\n            str = self.replace(str, r[0], r[1], r[2]);\n        }\n\n        return str;\n    };\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n    self.split = function(str, separator, limit) {\n        return fixed.split.call(toObject(str), separator, limit);\n    };\n\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n */\n    self.test = function(str, regex, pos, sticky) {\n        // Do this the easy way :-)\n        return !!self.exec(str, regex, pos, sticky);\n    };\n\n/**\n * Uninstalls optional features according to the specified options. All optional features start out\n * uninstalled, so this is used to undo the actions of {@link #XRegExp.install}.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons\n *   astral: true,\n *\n *   // Restores native regex methods\n *   natives: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral natives');\n */\n    self.uninstall = function(options) {\n        options = prepareOptions(options);\n\n        if (features.astral && options.astral) {\n            setAstral(false);\n        }\n\n        if (features.natives && options.natives) {\n            setNatives(false);\n        }\n    };\n\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n */\n    self.union = function(patterns, flags) {\n        var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n            output = [],\n            numCaptures = 0,\n            numPriorCaptures,\n            captureNames,\n            pattern,\n            rewrite = function(match, paren, backref) {\n                var name = captureNames[numCaptures - numPriorCaptures];\n\n                // Capturing group\n                if (paren) {\n                    ++numCaptures;\n                    // If the current capture has a name, preserve the name\n                    if (name) {\n                        return '(?<' + name + '>';\n                    }\n                // Backreference\n                } else if (backref) {\n                    // Rewrite the backreference\n                    return '\\\\' + (+backref + numPriorCaptures);\n                }\n\n                return match;\n            },\n            i;\n\n        if (!(isType(patterns, 'Array') && patterns.length)) {\n            throw new TypeError('Must provide a nonempty array of patterns to merge');\n        }\n\n        for (i = 0; i < patterns.length; ++i) {\n            pattern = patterns[i];\n\n            if (self.isRegExp(pattern)) {\n                numPriorCaptures = numCaptures;\n                captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];\n\n                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns\n                // are independently valid; helps keep this simple. Named captures are put back\n                output.push(nativ.replace.call(self(pattern.source).source, parts, rewrite));\n            } else {\n                output.push(self.escape(pattern));\n            }\n        }\n\n        return self(output.join('|'), flags);\n    };\n\n/* ==============================\n * Fixed/extended native methods\n * ============================== */\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\n * override the native method. Use via `XRegExp.exec` without overriding natives.\n *\n * @private\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n    fixed.exec = function(str) {\n        var origLastIndex = this.lastIndex,\n            match = nativ.exec.apply(this, arguments),\n            name,\n            r2,\n            i;\n\n        if (match) {\n            // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating\n            // capturing groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of\n            // older IEs. IE 9 in standards mode follows the spec\n            if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {\n                r2 = copyRegex(this, {\n                    removeG: true,\n                    isInternalOnly: true\n                });\n                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n                // matching due to characters outside the match\n                nativ.replace.call(String(str).slice(match.index), r2, function() {\n                    var len = arguments.length, i;\n                    // Skip index 0 and the last 2\n                    for (i = 1; i < len - 2; ++i) {\n                        if (arguments[i] === undefined) {\n                            match[i] = undefined;\n                        }\n                    }\n                });\n            }\n\n            // Attach named capture properties\n            if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n                // Skip index 0\n                for (i = 1; i < match.length; ++i) {\n                    name = this[REGEX_DATA].captureNames[i - 1];\n                    if (name) {\n                        match[name] = match[i];\n                    }\n                }\n            }\n\n            // Fix browsers that increment `lastIndex` after zero-length matches\n            if (this.global && !match[0].length && (this.lastIndex > match.index)) {\n                this.lastIndex = match.index;\n            }\n        }\n\n        if (!this.global) {\n            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n            this.lastIndex = origLastIndex;\n        }\n\n        return match;\n    };\n\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\n * uses this to override the native method.\n *\n * @private\n * @param {String} str String to search.\n * @returns {Boolean} Whether the regex matched the provided value.\n */\n    fixed.test = function(str) {\n        // Do this the easy way :-)\n        return !!fixed.exec.call(this, str);\n    };\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\n * override the native method.\n *\n * @private\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n    fixed.match = function(regex) {\n        var result;\n\n        if (!self.isRegExp(regex)) {\n            // Use the native `RegExp` rather than `XRegExp`\n            regex = new RegExp(regex);\n        } else if (regex.global) {\n            result = nativ.match.apply(this, arguments);\n            // Fixes IE bug\n            regex.lastIndex = 0;\n\n            return result;\n        }\n\n        return fixed.exec.call(regex, toObject(this));\n    };\n\n/**\n * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\n * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser\n * bugs in replacement text syntax when performing a replacement using a nonregex search value, and\n * the value of a replacement regex's `lastIndex` property during replacement iterations and upon\n * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note\n * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via\n * `XRegExp.replace` without overriding natives.\n *\n * @private\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {String} New string with one or all matches replaced.\n */\n    fixed.replace = function(search, replacement) {\n        var isRegex = self.isRegExp(search),\n            origLastIndex,\n            captureNames,\n            result;\n\n        if (isRegex) {\n            if (search[REGEX_DATA]) {\n                captureNames = search[REGEX_DATA].captureNames;\n            }\n            // Only needed if `search` is nonglobal\n            origLastIndex = search.lastIndex;\n        } else {\n            search += ''; // Type-convert\n        }\n\n        // Don't use `typeof`; some older browsers return 'function' for regex objects\n        if (isType(replacement, 'Function')) {\n            // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n            // functions isn't type-converted to a string\n            result = nativ.replace.call(String(this), search, function() {\n                var args = arguments, i;\n                if (captureNames) {\n                    // Change the `arguments[0]` string primitive to a `String` object that can\n                    // store properties. This really does need to use `String` as a constructor\n                    args[0] = new String(args[0]);\n                    // Store named backreferences on the first argument\n                    for (i = 0; i < captureNames.length; ++i) {\n                        if (captureNames[i]) {\n                            args[0][captureNames[i]] = args[i + 1];\n                        }\n                    }\n                }\n                // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox,\n                // Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\n                if (isRegex && search.global) {\n                    search.lastIndex = args[args.length - 2] + args[0].length;\n                }\n                // ES6 specs the context for replacement functions as `undefined`\n                return replacement.apply(undefined, args);\n            });\n        } else {\n            // Ensure that the last value of `args` will be a string when given nonstring `this`,\n            // while still throwing on null or undefined context\n            result = nativ.replace.call(this == null ? this : String(this), search, function() {\n                // Keep this function's `arguments` available through closure\n                var args = arguments;\n                return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {\n                    var n;\n                    // Named or numbered backreference with curly braces\n                    if ($1) {\n                        // XRegExp behavior for `${n}`:\n                        // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for\n                        //    for the entire match. Any number of leading zeros may be used.\n                        // 2. Backreference to named capture `n`, if it exists and is not an\n                        //    integer overridden by numbered capture. In practice, this does not\n                        //    overlap with numbered capture since XRegExp does not allow named\n                        //    capture to use a bare integer as the name.\n                        // 3. If the name or number does not refer to an existing capturing group,\n                        //    it's an error.\n                        n = +$1; // Type-convert; drop leading zeros\n                        if (n <= args.length - 3) {\n                            return args[n] || '';\n                        }\n                        // Groups with the same name is an error, else would need `lastIndexOf`\n                        n = captureNames ? indexOf(captureNames, $1) : -1;\n                        if (n < 0) {\n                            throw new SyntaxError('Backreference to undefined group ' + $0);\n                        }\n                        return args[n + 1] || '';\n                    }\n                    // Else, special variable or numbered backreference without curly braces\n                    if ($2 === '$') { // $$\n                        return '$';\n                    }\n                    if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00\n                        return args[0];\n                    }\n                    if ($2 === '`') { // $` (left context)\n                        return args[args.length - 1].slice(0, args[args.length - 2]);\n                    }\n                    if ($2 === \"'\") { // $' (right context)\n                        return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\n                    }\n                    // Else, numbered backreference without curly braces\n                    $2 = +$2; // Type-convert; drop leading zero\n                    // XRegExp behavior for `$n` and `$nn`:\n                    // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.\n                    // - `$1` is an error if no capturing groups.\n                    // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.\n                    // - `$01` is `$1` if at least one capturing group, else it's an error.\n                    // - `$0` (not followed by 1-9) and `$00` are the entire match.\n                    // Native behavior, for comparison:\n                    // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n                    // - `$1` is a literal `$1` if no capturing groups.\n                    // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n                    // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n                    // - `$0` is a literal `$0`.\n                    if (!isNaN($2)) {\n                        if ($2 > args.length - 3) {\n                            throw new SyntaxError('Backreference to undefined group ' + $0);\n                        }\n                        return args[$2] || '';\n                    }\n                    // `$` followed by an unsupported char is an error, unlike native JS\n                    throw new SyntaxError('Invalid token ' + $0);\n                });\n            });\n        }\n\n        if (isRegex) {\n            if (search.global) {\n                // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n                search.lastIndex = 0;\n            } else {\n                // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n                search.lastIndex = origLastIndex;\n            }\n        }\n\n        return result;\n    };\n\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\n * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\n *\n * @private\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n */\n    fixed.split = function(separator, limit) {\n        if (!self.isRegExp(separator)) {\n            // Browsers handle nonregex split correctly, so use the faster native method\n            return nativ.split.apply(this, arguments);\n        }\n\n        var str = String(this),\n            output = [],\n            origLastIndex = separator.lastIndex,\n            lastLastIndex = 0,\n            lastLength;\n\n        // Values for `limit`, per the spec:\n        // If undefined: pow(2,32) - 1\n        // If 0, Infinity, or NaN: 0\n        // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n        // If negative number: pow(2,32) - floor(abs(limit))\n        // If other: Type-convert, then use the above rules\n        // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63,\n        // unless Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n        limit = (limit === undefined ? -1 : limit) >>> 0;\n\n        self.forEach(str, separator, function(match) {\n            // This condition is not the same as `if (match[0].length)`\n            if ((match.index + match[0].length) > lastLastIndex) {\n                output.push(str.slice(lastLastIndex, match.index));\n                if (match.length > 1 && match.index < str.length) {\n                    Array.prototype.push.apply(output, match.slice(1));\n                }\n                lastLength = match[0].length;\n                lastLastIndex = match.index + lastLength;\n            }\n        });\n\n        if (lastLastIndex === str.length) {\n            if (!nativ.test.call(separator, '') || lastLength) {\n                output.push('');\n            }\n        } else {\n            output.push(str.slice(lastLastIndex));\n        }\n\n        separator.lastIndex = origLastIndex;\n        return output.length > limit ? output.slice(0, limit) : output;\n    };\n\n/* ==============================\n * Built-in syntax/flag tokens\n * ============================== */\n\n    add = self.addToken;\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n    add(\n        /\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,\n        function(match, scope) {\n            // \\B is allowed in default scope only\n            if (match[1] === 'B' && scope === defaultScope) {\n                return match[0];\n            }\n            throw new SyntaxError('Invalid escape ' + match[0]);\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n    add(\n        /\\\\u{([\\dA-Fa-f]+)}/,\n        function(match, scope, flags) {\n            var code = dec(match[1]);\n            if (code > 0x10FFFF) {\n                throw new SyntaxError('Invalid Unicode code point ' + match[0]);\n            }\n            if (code <= 0xFFFF) {\n                // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n                // separate from preceding tokens\n                return '\\\\u' + pad4(hex(code));\n            }\n            // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n            if (hasNativeU && flags.indexOf('u') > -1) {\n                return match[0];\n            }\n            throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\n * character class endings can't be determined.\n */\n    add(\n        /\\[(\\^?)]/,\n        function(match) {\n            // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n            // (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\n            return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\n        },\n        {leadChar: '['}\n    );\n\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n    add(\n        /\\(\\?#[^)]*\\)/,\n        function(match, scope, flags) {\n            // Keep tokens separated unless the following token is a quantifier\n            return isQuantifierNext(match.input, match.index + match[0].length, flags) ?\n                '' : '(?:)';\n        },\n        {leadChar: '('}\n    );\n\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n    add(\n        /\\s+|#.*/,\n        function(match, scope, flags) {\n            // Keep tokens separated unless the following token is a quantifier\n            return isQuantifierNext(match.input, match.index + match[0].length, flags) ?\n                '' : '(?:)';\n        },\n        {flag: 'x'}\n    );\n\n/*\n * Dot, in dotall mode (aka singleline mode, flag s) only.\n */\n    add(\n        /\\./,\n        function() {\n            return '[\\\\s\\\\S]';\n        },\n        {\n            flag: 's',\n            leadChar: '.'\n        }\n    );\n\n/*\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\n */\n    add(\n        /\\\\k<([\\w$]+)>/,\n        function(match) {\n            // Groups with the same name is an error, else would need `lastIndexOf`\n            var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1],\n                endIndex = match.index + match[0].length;\n            if (!index || index > this.captureNames.length) {\n                throw new SyntaxError('Backreference to undefined group ' + match[0]);\n            }\n            // Keep backreferences separate from subsequent literal numbers\n            return '\\\\' + index + (\n                endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?\n                    '' : '(?:)'\n            );\n        },\n        {leadChar: '\\\\'}\n    );\n\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n    add(\n        /\\\\(\\d+)/,\n        function(match, scope) {\n            if (\n                !(\n                    scope === defaultScope &&\n                    /^[1-9]/.test(match[1]) &&\n                    +match[1] <= this.captureNames.length\n                ) &&\n                match[1] !== '0'\n            ) {\n                throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +\n                    match[0]);\n            }\n            return match[0];\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n    add(\n        /\\(\\?P?<([\\w$]+)>/,\n        function(match) {\n            // Disallow bare integers as names because named backreferences are added to match\n            // arrays and therefore numeric properties may lead to incorrect lookups\n            if (!isNaN(match[1])) {\n                throw new SyntaxError('Cannot use integer as capture name ' + match[0]);\n            }\n            if (match[1] === 'length' || match[1] === '__proto__') {\n                throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);\n            }\n            if (indexOf(this.captureNames, match[1]) > -1) {\n                throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);\n            }\n            this.captureNames.push(match[1]);\n            this.hasNamedCapture = true;\n            return '(';\n        },\n        {leadChar: '('}\n    );\n\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n    add(\n        /\\((?!\\?)/,\n        function(match, scope, flags) {\n            if (flags.indexOf('n') > -1) {\n                return '(?:';\n            }\n            this.captureNames.push(null);\n            return '(';\n        },\n        {\n            optionalFlags: 'n',\n            leadChar: '('\n        }\n    );\n\n/* ==============================\n * Expose XRegExp\n * ============================== */\n\n    return self;\n\n}());\n\n/*!\n * XRegExp.build 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n * Inspired by Lea Verou's RegExp.create <http://lea.verou.me/>\n */\n\n(function(XRegExp) {\n    'use strict';\n\n    var REGEX_DATA = 'xregexp',\n        subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n        parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g');\n\n/**\n * Strips a leading `^` and trailing unescaped `$`, if both are present.\n *\n * @private\n * @param {String} pattern Pattern to process.\n * @returns {String} Pattern with edge anchors removed.\n */\n    function deanchor(pattern) {\n        var leadingAnchor = /^\\^/,\n            trailingAnchor = /\\$$/;\n\n        // Ensure that the trailing `$` isn't escaped\n        if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))) {\n            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\n        }\n\n        return pattern;\n    }\n\n/**\n * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\n *\n * @private\n * @param {String|RegExp} value Value to convert.\n * @returns {RegExp} XRegExp object with XRegExp syntax applied.\n */\n    function asXRegExp(value) {\n        return XRegExp.isRegExp(value) ?\n            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?\n                // Don't recompile, to preserve capture names\n                value :\n                // Recompile as XRegExp\n                XRegExp(value.source)\n            ) :\n            // Compile string as XRegExp\n            XRegExp(value);\n    }\n\n/**\n * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in the\n * outer pattern and provided subpatterns are automatically renumbered to work correctly. Native\n * flags used by provided subpatterns are ignored in favor of the `flags` argument.\n *\n * @memberOf XRegExp\n * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\n *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\n *   character classes.\n * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\n *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Regex with interpolated subpatterns.\n * @example\n *\n * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\n *     h12: /1[0-2]|0?[1-9]/,\n *     h24: /2[0-3]|[01][0-9]/\n *   }, 'x'),\n *   minutes: /^[0-5][0-9]$/\n * });\n * time.test('10:59'); // -> true\n * XRegExp.exec('10:59', time).minutes; // -> '59'\n */\n    XRegExp.build = function(pattern, subs, flags) {\n        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern),\n            data = {},\n            numCaps = 0, // 'Caps' is short for captures\n            numPriorCaps,\n            numOuterCaps = 0,\n            outerCapsMap = [0],\n            outerCapNames,\n            sub,\n            p;\n\n        // Add flags within a leading mode modifier to the overall pattern's flags\n        if (inlineFlags) {\n            flags = flags || '';\n            inlineFlags[1].replace(/./g, function(flag) {\n                // Don't add duplicates\n                flags += (flags.indexOf(flag) > -1 ? '' : flag);\n            });\n        }\n\n        for (p in subs) {\n            if (subs.hasOwnProperty(p)) {\n                // Passing to XRegExp enables extended syntax and ensures independent validity,\n                // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For\n                // subpatterns provided as native regexes, it dies on octals and adds the property\n                // used to hold extended regex instance data, for simplicity\n                sub = asXRegExp(subs[p]);\n                data[p] = {\n                    // Deanchoring allows embedding independently useful anchored regexes. If you\n                    // really need to keep your anchors, double them (i.e., `^^...$$`)\n                    pattern: deanchor(sub.source),\n                    names: sub[REGEX_DATA].captureNames || []\n                };\n            }\n        }\n\n        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\n        // helps keep this simple. Named captures will be put back\n        pattern = asXRegExp(pattern);\n        outerCapNames = pattern[REGEX_DATA].captureNames || [];\n        pattern = pattern.source.replace(parts, function($0, $1, $2, $3, $4) {\n            var subName = $1 || $2, capName, intro;\n            // Named subpattern\n            if (subName) {\n                if (!data.hasOwnProperty(subName)) {\n                    throw new ReferenceError('Undefined property ' + $0);\n                }\n                // Named subpattern was wrapped in a capturing group\n                if ($1) {\n                    capName = outerCapNames[numOuterCaps];\n                    outerCapsMap[++numOuterCaps] = ++numCaps;\n                    // If it's a named group, preserve the name. Otherwise, use the subpattern name\n                    // as the capture name\n                    intro = '(?<' + (capName || subName) + '>';\n                } else {\n                    intro = '(?:';\n                }\n                numPriorCaps = numCaps;\n                return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {\n                    // Capturing group\n                    if (paren) {\n                        capName = data[subName].names[numCaps - numPriorCaps];\n                        ++numCaps;\n                        // If the current capture has a name, preserve the name\n                        if (capName) {\n                            return '(?<' + capName + '>';\n                        }\n                    // Backreference\n                    } else if (backref) {\n                        // Rewrite the backreference\n                        return '\\\\' + (+backref + numPriorCaps);\n                    }\n                    return match;\n                }) + ')';\n            }\n            // Capturing group\n            if ($3) {\n                capName = outerCapNames[numOuterCaps];\n                outerCapsMap[++numOuterCaps] = ++numCaps;\n                // If the current capture has a name, preserve the name\n                if (capName) {\n                    return '(?<' + capName + '>';\n                }\n            // Backreference\n            } else if ($4) {\n                // Rewrite the backreference\n                return '\\\\' + outerCapsMap[+$4];\n            }\n            return $0;\n        });\n\n        return XRegExp(pattern, flags);\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp.matchRecursive 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2009-2015 MIT License\n */\n\n(function(XRegExp) {\n    'use strict';\n\n/**\n * Returns a match detail object composed of the provided values.\n *\n * @private\n */\n    function row(name, value, start, end) {\n        return {\n            name: name,\n            value: value,\n            start: start,\n            end: end\n        };\n    }\n\n/**\n * Returns an array of match strings between outermost left and right delimiters, or an array of\n * objects with detailed match parts and position data. An error is thrown if delimiters are\n * unbalanced within the data.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {String} left Left delimiter as an XRegExp pattern.\n * @param {String} right Right delimiter as an XRegExp pattern.\n * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\n * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\n * @returns {Array} Array of matches, or an empty array.\n * @example\n *\n * // Basic usage\n * var str = '(t((e))s)t()(ing)';\n * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n * // -> ['t((e))s', '', 'ing']\n *\n * // Extended information mode with valueNames\n * str = 'Here is <div> <div>an</div></div> example';\n * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n *   valueNames: ['between', 'left', 'match', 'right']\n * });\n * // -> [\n * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\n * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\n * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n * // {name: 'right',   value: '</div>',         start: 27, end: 33},\n * // {name: 'between', value: ' example',       start: 33, end: 41}\n * // ]\n *\n * // Omitting unneeded parts with null valueNames, and using escapeChar\n * str = '...{1}\\\\{{function(x,y){return y+x;}}';\n * XRegExp.matchRecursive(str, '{', '}', 'g', {\n *   valueNames: ['literal', null, 'value', null],\n *   escapeChar: '\\\\'\n * });\n * // -> [\n * // {name: 'literal', value: '...', start: 0, end: 3},\n * // {name: 'value',   value: '1',   start: 4, end: 5},\n * // {name: 'literal', value: '\\\\{', start: 6, end: 8},\n * // {name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\n * // ]\n *\n * // Sticky mode via flag y\n * str = '<1><<<2>>><3>4<5>';\n * XRegExp.matchRecursive(str, '<', '>', 'gy');\n * // -> ['1', '<<2>>', '3']\n */\n    XRegExp.matchRecursive = function(str, left, right, flags, options) {\n        flags = flags || '';\n        options = options || {};\n        var global = flags.indexOf('g') > -1,\n            sticky = flags.indexOf('y') > -1,\n            // Flag `y` is controlled internally\n            basicFlags = flags.replace(/y/g, ''),\n            escapeChar = options.escapeChar,\n            vN = options.valueNames,\n            output = [],\n            openTokens = 0,\n            delimStart = 0,\n            delimEnd = 0,\n            lastOuterEnd = 0,\n            outerStart,\n            innerStart,\n            leftMatch,\n            rightMatch,\n            esc;\n        left = XRegExp(left, basicFlags);\n        right = XRegExp(right, basicFlags);\n\n        if (escapeChar) {\n            if (escapeChar.length > 1) {\n                throw new Error('Cannot use more than one escape character');\n            }\n            escapeChar = XRegExp.escape(escapeChar);\n            // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`\n            esc = new RegExp(\n                '(?:' + escapeChar + '[\\\\S\\\\s]|(?:(?!' +\n                    XRegExp.union([left, right]).source +\n                    ')[^' + escapeChar + '])+)+',\n                // Flags `gy` not needed here\n                flags.replace(/[^imu]+/g, '')\n            );\n        }\n\n        while (true) {\n            // If using an escape character, advance to the delimiter's next starting position,\n            // skipping any escaped characters in between\n            if (escapeChar) {\n                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\n            }\n            leftMatch = XRegExp.exec(str, left, delimEnd);\n            rightMatch = XRegExp.exec(str, right, delimEnd);\n            // Keep the leftmost match only\n            if (leftMatch && rightMatch) {\n                if (leftMatch.index <= rightMatch.index) {\n                    rightMatch = null;\n                } else {\n                    leftMatch = null;\n                }\n            }\n            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\n            // LM | RM | OT | Result\n            // 1  | 0  | 1  | loop\n            // 1  | 0  | 0  | loop\n            // 0  | 1  | 1  | loop\n            // 0  | 1  | 0  | throw\n            // 0  | 0  | 1  | throw\n            // 0  | 0  | 0  | break\n            // The paths above don't include the sticky mode special case. The loop ends after the\n            // first completed match if not `global`.\n            if (leftMatch || rightMatch) {\n                delimStart = (leftMatch || rightMatch).index;\n                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\n            } else if (!openTokens) {\n                break;\n            }\n            if (sticky && !openTokens && delimStart > lastOuterEnd) {\n                break;\n            }\n            if (leftMatch) {\n                if (!openTokens) {\n                    outerStart = delimStart;\n                    innerStart = delimEnd;\n                }\n                ++openTokens;\n            } else if (rightMatch && openTokens) {\n                if (!--openTokens) {\n                    if (vN) {\n                        if (vN[0] && outerStart > lastOuterEnd) {\n                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\n                        }\n                        if (vN[1]) {\n                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\n                        }\n                        if (vN[2]) {\n                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\n                        }\n                        if (vN[3]) {\n                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\n                        }\n                    } else {\n                        output.push(str.slice(innerStart, delimStart));\n                    }\n                    lastOuterEnd = delimEnd;\n                    if (!global) {\n                        break;\n                    }\n                }\n            } else {\n                throw new Error('Unbalanced delimiter found in string');\n            }\n            // If the delimiter matched an empty string, avoid an infinite loop\n            if (delimStart === delimEnd) {\n                ++delimEnd;\n            }\n        }\n\n        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\n            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\n        }\n\n        return output;\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Base 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2008-2015 MIT License\n */\n\n/**\n * Adds base support for Unicode matching:\n * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the brackets\n *   for token names that are a single letter (e.g. `\\pL` or `PL`).\n * - Adds flag A (astral), which enables 21-bit Unicode support.\n * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n *\n * Unicode Base relies on externally provided Unicode character data. Official addons are available\n * to provide data for Unicode categories, scripts, blocks, and properties.\n *\n * @requires XRegExp\n */\n(function(XRegExp) {\n    'use strict';\n\n// Storage for Unicode data\n    var unicode = {};\n\n/* ==============================\n * Private functions\n * ============================== */\n\n// Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n    function normalize(name) {\n        return name.replace(/[- _]+/g, '').toLowerCase();\n    }\n\n// Adds leading zeros if shorter than four characters\n    function pad4(str) {\n        while (str.length < 4) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n// Converts a hexadecimal number to decimal\n    function dec(hex) {\n        return parseInt(hex, 16);\n    }\n\n// Converts a decimal number to hexadecimal\n    function hex(dec) {\n        return parseInt(dec, 10).toString(16);\n    }\n\n// Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n    function charCode(chr) {\n        var esc = /^\\\\[xu](.+)/.exec(chr);\n        return esc ?\n            dec(esc[1]) :\n            chr.charCodeAt(chr.charAt(0) === '\\\\' ? 1 : 0);\n    }\n\n// Inverts a list of ordered BMP characters and ranges\n    function invertBmp(range) {\n        var output = '',\n            lastEnd = -1,\n            start;\n        XRegExp.forEach(range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function(m) {\n            start = charCode(m[1]);\n            if (start > (lastEnd + 1)) {\n                output += '\\\\u' + pad4(hex(lastEnd + 1));\n                if (start > (lastEnd + 2)) {\n                    output += '-\\\\u' + pad4(hex(start - 1));\n                }\n            }\n            lastEnd = charCode(m[2] || m[1]);\n        });\n        if (lastEnd < 0xFFFF) {\n            output += '\\\\u' + pad4(hex(lastEnd + 1));\n            if (lastEnd < 0xFFFE) {\n                output += '-\\\\uFFFF';\n            }\n        }\n        return output;\n    }\n\n// Generates an inverted BMP range on first use\n    function cacheInvertedBmp(slug) {\n        var prop = 'b!';\n        return unicode[slug][prop] || (\n            unicode[slug][prop] = invertBmp(unicode[slug].bmp)\n        );\n    }\n\n// Combines and optionally negates BMP and astral data\n    function buildAstral(slug, isNegated) {\n        var item = unicode[slug],\n            combined = '';\n        if (item.bmp && !item.isBmpLast) {\n            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');\n        }\n        if (item.astral) {\n            combined += item.astral;\n        }\n        if (item.isBmpLast && item.bmp) {\n            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';\n        }\n        // Astral Unicode tokens always match a code point, never a code unit\n        return isNegated ?\n            '(?:(?!' + combined + ')(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))' :\n            '(?:' + combined + ')';\n    }\n\n// Builds a complete astral pattern on first use\n    function cacheAstral(slug, isNegated) {\n        var prop = isNegated ? 'a!' : 'a=';\n        return unicode[slug][prop] || (\n            unicode[slug][prop] = buildAstral(slug, isNegated)\n        );\n    }\n\n/* ==============================\n * Core functionality\n * ============================== */\n\n/*\n * Add Unicode token syntax: \\p{..}, \\P{..}, \\p{^..}. Also add astral mode (flag A).\n */\n    XRegExp.addToken(\n        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n        /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,\n        function(match, scope, flags) {\n            var ERR_DOUBLE_NEG = 'Invalid double negation ',\n                ERR_UNKNOWN_NAME = 'Unknown Unicode token ',\n                ERR_UNKNOWN_REF = 'Unicode token missing data ',\n                ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ',\n                ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes',\n                // Negated via \\P{..} or \\p{^..}\n                isNegated = match[1] === 'P' || !!match[2],\n                // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n                isAstralMode = flags.indexOf('A') > -1,\n                // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n                slug = normalize(match[4] || match[3]),\n                // Token data object\n                item = unicode[slug];\n\n            if (match[1] === 'P' && match[2]) {\n                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n            }\n            if (!unicode.hasOwnProperty(slug)) {\n                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n            }\n\n            // Switch to the negated form of the referenced Unicode token\n            if (item.inverseOf) {\n                slug = normalize(item.inverseOf);\n                if (!unicode.hasOwnProperty(slug)) {\n                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);\n                }\n                item = unicode[slug];\n                isNegated = !isNegated;\n            }\n\n            if (!(item.bmp || isAstralMode)) {\n                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n            }\n            if (isAstralMode) {\n                if (scope === 'class') {\n                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n                }\n\n                return cacheAstral(slug, isNegated);\n            }\n\n            return scope === 'class' ?\n                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :\n                (isNegated ? '[^' : '[') + item.bmp + ']';\n        },\n        {\n            scope: 'all',\n            optionalFlags: 'A',\n            leadChar: '\\\\'\n        }\n    );\n\n/**\n * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n *\n * @memberOf XRegExp\n * @param {Array} data Objects with named character ranges. Each object may have properties `name`,\n *   `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are optional, although\n *   one of `bmp` or `astral` is required (unless `inverseOf` is set). If `astral` is absent, the\n *   `bmp` data is used for BMP and astral modes. If `bmp` is absent, the name errors in BMP mode\n *   but works in astral mode. If both `bmp` and `astral` are provided, the `bmp` data only is used\n *   in BMP mode, and the combination of `bmp` and `astral` data is used in astral mode.\n *   `isBmpLast` is needed when a token matches orphan high surrogates *and* uses surrogate pairs\n *   to match astral code points. The `bmp` and `astral` data should be a combination of literal\n *   characters and `\\xHH` or `\\uHHHH` escape sequences, with hyphens to create ranges. Any regex\n *   metacharacters in the data should be escaped, apart from range-creating hyphens. The `astral`\n *   data can additionally use character classes and alternation, and should use surrogate pairs to\n *   represent astral code points. `inverseOf` can be used to avoid duplicating character data if a\n *   Unicode token is defined as the exact inverse of another token.\n * @example\n *\n * // Basic use\n * XRegExp.addUnicodeData([{\n *   name: 'XDigit',\n *   alias: 'Hexadecimal',\n *   bmp: '0-9A-Fa-f'\n * }]);\n * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n */\n    XRegExp.addUnicodeData = function(data) {\n        var ERR_NO_NAME = 'Unicode token requires name',\n            ERR_NO_DATA = 'Unicode token has no character data ',\n            item,\n            i;\n\n        for (i = 0; i < data.length; ++i) {\n            item = data[i];\n            if (!item.name) {\n                throw new Error(ERR_NO_NAME);\n            }\n            if (!(item.inverseOf || item.bmp || item.astral)) {\n                throw new Error(ERR_NO_DATA + item.name);\n            }\n            unicode[normalize(item.name)] = item;\n            if (item.alias) {\n                unicode[normalize(item.alias)] = item;\n            }\n        }\n\n        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n        // flags might now produce different results\n        XRegExp.cache.flush('patterns');\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Blocks 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g., `\\p{InBasicLatin}`.\n * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'InAegean_Numbers',\n            astral: '\\uD800[\\uDD00-\\uDD3F]'\n        },\n        {\n            name: 'InAhom',\n            astral: '\\uD805[\\uDF00-\\uDF3F]'\n        },\n        {\n            name: 'InAlchemical_Symbols',\n            astral: '\\uD83D[\\uDF00-\\uDF7F]'\n        },\n        {\n            name: 'InAlphabetic_Presentation_Forms',\n            bmp: '\\uFB00-\\uFB4F'\n        },\n        {\n            name: 'InAnatolian_Hieroglyphs',\n            astral: '\\uD811[\\uDC00-\\uDE7F]'\n        },\n        {\n            name: 'InAncient_Greek_Musical_Notation',\n            astral: '\\uD834[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InAncient_Greek_Numbers',\n            astral: '\\uD800[\\uDD40-\\uDD8F]'\n        },\n        {\n            name: 'InAncient_Symbols',\n            astral: '\\uD800[\\uDD90-\\uDDCF]'\n        },\n        {\n            name: 'InArabic',\n            bmp: '\\u0600-\\u06FF'\n        },\n        {\n            name: 'InArabic_Extended_A',\n            bmp: '\\u08A0-\\u08FF'\n        },\n        {\n            name: 'InArabic_Mathematical_Alphabetic_Symbols',\n            astral: '\\uD83B[\\uDE00-\\uDEFF]'\n        },\n        {\n            name: 'InArabic_Presentation_Forms_A',\n            bmp: '\\uFB50-\\uFDFF'\n        },\n        {\n            name: 'InArabic_Presentation_Forms_B',\n            bmp: '\\uFE70-\\uFEFF'\n        },\n        {\n            name: 'InArabic_Supplement',\n            bmp: '\\u0750-\\u077F'\n        },\n        {\n            name: 'InArmenian',\n            bmp: '\\u0530-\\u058F'\n        },\n        {\n            name: 'InArrows',\n            bmp: '\\u2190-\\u21FF'\n        },\n        {\n            name: 'InAvestan',\n            astral: '\\uD802[\\uDF00-\\uDF3F]'\n        },\n        {\n            name: 'InBalinese',\n            bmp: '\\u1B00-\\u1B7F'\n        },\n        {\n            name: 'InBamum',\n            bmp: '\\uA6A0-\\uA6FF'\n        },\n        {\n            name: 'InBamum_Supplement',\n            astral: '\\uD81A[\\uDC00-\\uDE3F]'\n        },\n        {\n            name: 'InBasic_Latin',\n            bmp: '\\0-\\x7F'\n        },\n        {\n            name: 'InBassa_Vah',\n            astral: '\\uD81A[\\uDED0-\\uDEFF]'\n        },\n        {\n            name: 'InBatak',\n            bmp: '\\u1BC0-\\u1BFF'\n        },\n        {\n            name: 'InBengali',\n            bmp: '\\u0980-\\u09FF'\n        },\n        {\n            name: 'InBlock_Elements',\n            bmp: '\\u2580-\\u259F'\n        },\n        {\n            name: 'InBopomofo',\n            bmp: '\\u3100-\\u312F'\n        },\n        {\n            name: 'InBopomofo_Extended',\n            bmp: '\\u31A0-\\u31BF'\n        },\n        {\n            name: 'InBox_Drawing',\n            bmp: '\\u2500-\\u257F'\n        },\n        {\n            name: 'InBrahmi',\n            astral: '\\uD804[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InBraille_Patterns',\n            bmp: '\\u2800-\\u28FF'\n        },\n        {\n            name: 'InBuginese',\n            bmp: '\\u1A00-\\u1A1F'\n        },\n        {\n            name: 'InBuhid',\n            bmp: '\\u1740-\\u175F'\n        },\n        {\n            name: 'InByzantine_Musical_Symbols',\n            astral: '\\uD834[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InCJK_Compatibility',\n            bmp: '\\u3300-\\u33FF'\n        },\n        {\n            name: 'InCJK_Compatibility_Forms',\n            bmp: '\\uFE30-\\uFE4F'\n        },\n        {\n            name: 'InCJK_Compatibility_Ideographs',\n            bmp: '\\uF900-\\uFAFF'\n        },\n        {\n            name: 'InCJK_Compatibility_Ideographs_Supplement',\n            astral: '\\uD87E[\\uDC00-\\uDE1F]'\n        },\n        {\n            name: 'InCJK_Radicals_Supplement',\n            bmp: '\\u2E80-\\u2EFF'\n        },\n        {\n            name: 'InCJK_Strokes',\n            bmp: '\\u31C0-\\u31EF'\n        },\n        {\n            name: 'InCJK_Symbols_and_Punctuation',\n            bmp: '\\u3000-\\u303F'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs',\n            bmp: '\\u4E00-\\u9FFF'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_A',\n            bmp: '\\u3400-\\u4DBF'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_B',\n            astral: '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_C',\n            astral: '\\uD86D[\\uDC00-\\uDF3F]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD869[\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_D',\n            astral: '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_E',\n            astral: '[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]|\\uD86E[\\uDC20-\\uDFFF]'\n        },\n        {\n            name: 'InCarian',\n            astral: '\\uD800[\\uDEA0-\\uDEDF]'\n        },\n        {\n            name: 'InCaucasian_Albanian',\n            astral: '\\uD801[\\uDD30-\\uDD6F]'\n        },\n        {\n            name: 'InChakma',\n            astral: '\\uD804[\\uDD00-\\uDD4F]'\n        },\n        {\n            name: 'InCham',\n            bmp: '\\uAA00-\\uAA5F'\n        },\n        {\n            name: 'InCherokee',\n            bmp: '\\u13A0-\\u13FF'\n        },\n        {\n            name: 'InCherokee_Supplement',\n            bmp: '\\uAB70-\\uABBF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks',\n            bmp: '\\u0300-\\u036F'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_Extended',\n            bmp: '\\u1AB0-\\u1AFF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_Supplement',\n            bmp: '\\u1DC0-\\u1DFF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_for_Symbols',\n            bmp: '\\u20D0-\\u20FF'\n        },\n        {\n            name: 'InCombining_Half_Marks',\n            bmp: '\\uFE20-\\uFE2F'\n        },\n        {\n            name: 'InCommon_Indic_Number_Forms',\n            bmp: '\\uA830-\\uA83F'\n        },\n        {\n            name: 'InControl_Pictures',\n            bmp: '\\u2400-\\u243F'\n        },\n        {\n            name: 'InCoptic',\n            bmp: '\\u2C80-\\u2CFF'\n        },\n        {\n            name: 'InCoptic_Epact_Numbers',\n            astral: '\\uD800[\\uDEE0-\\uDEFF]'\n        },\n        {\n            name: 'InCounting_Rod_Numerals',\n            astral: '\\uD834[\\uDF60-\\uDF7F]'\n        },\n        {\n            name: 'InCuneiform',\n            astral: '\\uD808[\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InCuneiform_Numbers_and_Punctuation',\n            astral: '\\uD809[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InCurrency_Symbols',\n            bmp: '\\u20A0-\\u20CF'\n        },\n        {\n            name: 'InCypriot_Syllabary',\n            astral: '\\uD802[\\uDC00-\\uDC3F]'\n        },\n        {\n            name: 'InCyrillic',\n            bmp: '\\u0400-\\u04FF'\n        },\n        {\n            name: 'InCyrillic_Extended_A',\n            bmp: '\\u2DE0-\\u2DFF'\n        },\n        {\n            name: 'InCyrillic_Extended_B',\n            bmp: '\\uA640-\\uA69F'\n        },\n        {\n            name: 'InCyrillic_Supplement',\n            bmp: '\\u0500-\\u052F'\n        },\n        {\n            name: 'InDeseret',\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'InDevanagari',\n            bmp: '\\u0900-\\u097F'\n        },\n        {\n            name: 'InDevanagari_Extended',\n            bmp: '\\uA8E0-\\uA8FF'\n        },\n        {\n            name: 'InDingbats',\n            bmp: '\\u2700-\\u27BF'\n        },\n        {\n            name: 'InDomino_Tiles',\n            astral: '\\uD83C[\\uDC30-\\uDC9F]'\n        },\n        {\n            name: 'InDuployan',\n            astral: '\\uD82F[\\uDC00-\\uDC9F]'\n        },\n        {\n            name: 'InEarly_Dynastic_Cuneiform',\n            astral: '\\uD809[\\uDC80-\\uDD4F]'\n        },\n        {\n            name: 'InEgyptian_Hieroglyphs',\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'\n        },\n        {\n            name: 'InElbasan',\n            astral: '\\uD801[\\uDD00-\\uDD2F]'\n        },\n        {\n            name: 'InEmoticons',\n            astral: '\\uD83D[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InEnclosed_Alphanumeric_Supplement',\n            astral: '\\uD83C[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InEnclosed_Alphanumerics',\n            bmp: '\\u2460-\\u24FF'\n        },\n        {\n            name: 'InEnclosed_CJK_Letters_and_Months',\n            bmp: '\\u3200-\\u32FF'\n        },\n        {\n            name: 'InEnclosed_Ideographic_Supplement',\n            astral: '\\uD83C[\\uDE00-\\uDEFF]'\n        },\n        {\n            name: 'InEthiopic',\n            bmp: '\\u1200-\\u137F'\n        },\n        {\n            name: 'InEthiopic_Extended',\n            bmp: '\\u2D80-\\u2DDF'\n        },\n        {\n            name: 'InEthiopic_Extended_A',\n            bmp: '\\uAB00-\\uAB2F'\n        },\n        {\n            name: 'InEthiopic_Supplement',\n            bmp: '\\u1380-\\u139F'\n        },\n        {\n            name: 'InGeneral_Punctuation',\n            bmp: '\\u2000-\\u206F'\n        },\n        {\n            name: 'InGeometric_Shapes',\n            bmp: '\\u25A0-\\u25FF'\n        },\n        {\n            name: 'InGeometric_Shapes_Extended',\n            astral: '\\uD83D[\\uDF80-\\uDFFF]'\n        },\n        {\n            name: 'InGeorgian',\n            bmp: '\\u10A0-\\u10FF'\n        },\n        {\n            name: 'InGeorgian_Supplement',\n            bmp: '\\u2D00-\\u2D2F'\n        },\n        {\n            name: 'InGlagolitic',\n            bmp: '\\u2C00-\\u2C5F'\n        },\n        {\n            name: 'InGothic',\n            astral: '\\uD800[\\uDF30-\\uDF4F]'\n        },\n        {\n            name: 'InGrantha',\n            astral: '\\uD804[\\uDF00-\\uDF7F]'\n        },\n        {\n            name: 'InGreek_Extended',\n            bmp: '\\u1F00-\\u1FFF'\n        },\n        {\n            name: 'InGreek_and_Coptic',\n            bmp: '\\u0370-\\u03FF'\n        },\n        {\n            name: 'InGujarati',\n            bmp: '\\u0A80-\\u0AFF'\n        },\n        {\n            name: 'InGurmukhi',\n            bmp: '\\u0A00-\\u0A7F'\n        },\n        {\n            name: 'InHalfwidth_and_Fullwidth_Forms',\n            bmp: '\\uFF00-\\uFFEF'\n        },\n        {\n            name: 'InHangul_Compatibility_Jamo',\n            bmp: '\\u3130-\\u318F'\n        },\n        {\n            name: 'InHangul_Jamo',\n            bmp: '\\u1100-\\u11FF'\n        },\n        {\n            name: 'InHangul_Jamo_Extended_A',\n            bmp: '\\uA960-\\uA97F'\n        },\n        {\n            name: 'InHangul_Jamo_Extended_B',\n            bmp: '\\uD7B0-\\uD7FF'\n        },\n        {\n            name: 'InHangul_Syllables',\n            bmp: '\\uAC00-\\uD7AF'\n        },\n        {\n            name: 'InHanunoo',\n            bmp: '\\u1720-\\u173F'\n        },\n        {\n            name: 'InHatran',\n            astral: '\\uD802[\\uDCE0-\\uDCFF]'\n        },\n        {\n            name: 'InHebrew',\n            bmp: '\\u0590-\\u05FF'\n        },\n        {\n            name: 'InHigh_Private_Use_Surrogates',\n            bmp: '\\uDB80-\\uDBFF'\n        },\n        {\n            name: 'InHigh_Surrogates',\n            bmp: '\\uD800-\\uDB7F'\n        },\n        {\n            name: 'InHiragana',\n            bmp: '\\u3040-\\u309F'\n        },\n        {\n            name: 'InIPA_Extensions',\n            bmp: '\\u0250-\\u02AF'\n        },\n        {\n            name: 'InIdeographic_Description_Characters',\n            bmp: '\\u2FF0-\\u2FFF'\n        },\n        {\n            name: 'InImperial_Aramaic',\n            astral: '\\uD802[\\uDC40-\\uDC5F]'\n        },\n        {\n            name: 'InInscriptional_Pahlavi',\n            astral: '\\uD802[\\uDF60-\\uDF7F]'\n        },\n        {\n            name: 'InInscriptional_Parthian',\n            astral: '\\uD802[\\uDF40-\\uDF5F]'\n        },\n        {\n            name: 'InJavanese',\n            bmp: '\\uA980-\\uA9DF'\n        },\n        {\n            name: 'InKaithi',\n            astral: '\\uD804[\\uDC80-\\uDCCF]'\n        },\n        {\n            name: 'InKana_Supplement',\n            astral: '\\uD82C[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InKanbun',\n            bmp: '\\u3190-\\u319F'\n        },\n        {\n            name: 'InKangxi_Radicals',\n            bmp: '\\u2F00-\\u2FDF'\n        },\n        {\n            name: 'InKannada',\n            bmp: '\\u0C80-\\u0CFF'\n        },\n        {\n            name: 'InKatakana',\n            bmp: '\\u30A0-\\u30FF'\n        },\n        {\n            name: 'InKatakana_Phonetic_Extensions',\n            bmp: '\\u31F0-\\u31FF'\n        },\n        {\n            name: 'InKayah_Li',\n            bmp: '\\uA900-\\uA92F'\n        },\n        {\n            name: 'InKharoshthi',\n            astral: '\\uD802[\\uDE00-\\uDE5F]'\n        },\n        {\n            name: 'InKhmer',\n            bmp: '\\u1780-\\u17FF'\n        },\n        {\n            name: 'InKhmer_Symbols',\n            bmp: '\\u19E0-\\u19FF'\n        },\n        {\n            name: 'InKhojki',\n            astral: '\\uD804[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InKhudawadi',\n            astral: '\\uD804[\\uDEB0-\\uDEFF]'\n        },\n        {\n            name: 'InLao',\n            bmp: '\\u0E80-\\u0EFF'\n        },\n        {\n            name: 'InLatin_Extended_Additional',\n            bmp: '\\u1E00-\\u1EFF'\n        },\n        {\n            name: 'InLatin_Extended_A',\n            bmp: '\\u0100-\\u017F'\n        },\n        {\n            name: 'InLatin_Extended_B',\n            bmp: '\\u0180-\\u024F'\n        },\n        {\n            name: 'InLatin_Extended_C',\n            bmp: '\\u2C60-\\u2C7F'\n        },\n        {\n            name: 'InLatin_Extended_D',\n            bmp: '\\uA720-\\uA7FF'\n        },\n        {\n            name: 'InLatin_Extended_E',\n            bmp: '\\uAB30-\\uAB6F'\n        },\n        {\n            name: 'InLatin_1_Supplement',\n            bmp: '\\x80-\\xFF'\n        },\n        {\n            name: 'InLepcha',\n            bmp: '\\u1C00-\\u1C4F'\n        },\n        {\n            name: 'InLetterlike_Symbols',\n            bmp: '\\u2100-\\u214F'\n        },\n        {\n            name: 'InLimbu',\n            bmp: '\\u1900-\\u194F'\n        },\n        {\n            name: 'InLinear_A',\n            astral: '\\uD801[\\uDE00-\\uDF7F]'\n        },\n        {\n            name: 'InLinear_B_Ideograms',\n            astral: '\\uD800[\\uDC80-\\uDCFF]'\n        },\n        {\n            name: 'InLinear_B_Syllabary',\n            astral: '\\uD800[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InLisu',\n            bmp: '\\uA4D0-\\uA4FF'\n        },\n        {\n            name: 'InLow_Surrogates',\n            bmp: '\\uDC00-\\uDFFF'\n        },\n        {\n            name: 'InLycian',\n            astral: '\\uD800[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'InLydian',\n            astral: '\\uD802[\\uDD20-\\uDD3F]'\n        },\n        {\n            name: 'InMahajani',\n            astral: '\\uD804[\\uDD50-\\uDD7F]'\n        },\n        {\n            name: 'InMahjong_Tiles',\n            astral: '\\uD83C[\\uDC00-\\uDC2F]'\n        },\n        {\n            name: 'InMalayalam',\n            bmp: '\\u0D00-\\u0D7F'\n        },\n        {\n            name: 'InMandaic',\n            bmp: '\\u0840-\\u085F'\n        },\n        {\n            name: 'InManichaean',\n            astral: '\\uD802[\\uDEC0-\\uDEFF]'\n        },\n        {\n            name: 'InMathematical_Alphanumeric_Symbols',\n            astral: '\\uD835[\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InMathematical_Operators',\n            bmp: '\\u2200-\\u22FF'\n        },\n        {\n            name: 'InMeetei_Mayek',\n            bmp: '\\uABC0-\\uABFF'\n        },\n        {\n            name: 'InMeetei_Mayek_Extensions',\n            bmp: '\\uAAE0-\\uAAFF'\n        },\n        {\n            name: 'InMende_Kikakui',\n            astral: '\\uD83A[\\uDC00-\\uDCDF]'\n        },\n        {\n            name: 'InMeroitic_Cursive',\n            astral: '\\uD802[\\uDDA0-\\uDDFF]'\n        },\n        {\n            name: 'InMeroitic_Hieroglyphs',\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\n        },\n        {\n            name: 'InMiao',\n            astral: '\\uD81B[\\uDF00-\\uDF9F]'\n        },\n        {\n            name: 'InMiscellaneous_Mathematical_Symbols_A',\n            bmp: '\\u27C0-\\u27EF'\n        },\n        {\n            name: 'InMiscellaneous_Mathematical_Symbols_B',\n            bmp: '\\u2980-\\u29FF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols',\n            bmp: '\\u2600-\\u26FF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols_and_Arrows',\n            bmp: '\\u2B00-\\u2BFF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols_and_Pictographs',\n            astral: '\\uD83D[\\uDC00-\\uDDFF]|\\uD83C[\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'InMiscellaneous_Technical',\n            bmp: '\\u2300-\\u23FF'\n        },\n        {\n            name: 'InModi',\n            astral: '\\uD805[\\uDE00-\\uDE5F]'\n        },\n        {\n            name: 'InModifier_Tone_Letters',\n            bmp: '\\uA700-\\uA71F'\n        },\n        {\n            name: 'InMongolian',\n            bmp: '\\u1800-\\u18AF'\n        },\n        {\n            name: 'InMro',\n            astral: '\\uD81A[\\uDE40-\\uDE6F]'\n        },\n        {\n            name: 'InMultani',\n            astral: '\\uD804[\\uDE80-\\uDEAF]'\n        },\n        {\n            name: 'InMusical_Symbols',\n            astral: '\\uD834[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InMyanmar',\n            bmp: '\\u1000-\\u109F'\n        },\n        {\n            name: 'InMyanmar_Extended_A',\n            bmp: '\\uAA60-\\uAA7F'\n        },\n        {\n            name: 'InMyanmar_Extended_B',\n            bmp: '\\uA9E0-\\uA9FF'\n        },\n        {\n            name: 'InNKo',\n            bmp: '\\u07C0-\\u07FF'\n        },\n        {\n            name: 'InNabataean',\n            astral: '\\uD802[\\uDC80-\\uDCAF]'\n        },\n        {\n            name: 'InNew_Tai_Lue',\n            bmp: '\\u1980-\\u19DF'\n        },\n        {\n            name: 'InNumber_Forms',\n            bmp: '\\u2150-\\u218F'\n        },\n        {\n            name: 'InOgham',\n            bmp: '\\u1680-\\u169F'\n        },\n        {\n            name: 'InOl_Chiki',\n            bmp: '\\u1C50-\\u1C7F'\n        },\n        {\n            name: 'InOld_Hungarian',\n            astral: '\\uD803[\\uDC80-\\uDCFF]'\n        },\n        {\n            name: 'InOld_Italic',\n            astral: '\\uD800[\\uDF00-\\uDF2F]'\n        },\n        {\n            name: 'InOld_North_Arabian',\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'InOld_Permic',\n            astral: '\\uD800[\\uDF50-\\uDF7F]'\n        },\n        {\n            name: 'InOld_Persian',\n            astral: '\\uD800[\\uDFA0-\\uDFDF]'\n        },\n        {\n            name: 'InOld_South_Arabian',\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'InOld_Turkic',\n            astral: '\\uD803[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'InOptical_Character_Recognition',\n            bmp: '\\u2440-\\u245F'\n        },\n        {\n            name: 'InOriya',\n            bmp: '\\u0B00-\\u0B7F'\n        },\n        {\n            name: 'InOrnamental_Dingbats',\n            astral: '\\uD83D[\\uDE50-\\uDE7F]'\n        },\n        {\n            name: 'InOsmanya',\n            astral: '\\uD801[\\uDC80-\\uDCAF]'\n        },\n        {\n            name: 'InPahawh_Hmong',\n            astral: '\\uD81A[\\uDF00-\\uDF8F]'\n        },\n        {\n            name: 'InPalmyrene',\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\n        },\n        {\n            name: 'InPau_Cin_Hau',\n            astral: '\\uD806[\\uDEC0-\\uDEFF]'\n        },\n        {\n            name: 'InPhags_pa',\n            bmp: '\\uA840-\\uA87F'\n        },\n        {\n            name: 'InPhaistos_Disc',\n            astral: '\\uD800[\\uDDD0-\\uDDFF]'\n        },\n        {\n            name: 'InPhoenician',\n            astral: '\\uD802[\\uDD00-\\uDD1F]'\n        },\n        {\n            name: 'InPhonetic_Extensions',\n            bmp: '\\u1D00-\\u1D7F'\n        },\n        {\n            name: 'InPhonetic_Extensions_Supplement',\n            bmp: '\\u1D80-\\u1DBF'\n        },\n        {\n            name: 'InPlaying_Cards',\n            astral: '\\uD83C[\\uDCA0-\\uDCFF]'\n        },\n        {\n            name: 'InPrivate_Use_Area',\n            bmp: '\\uE000-\\uF8FF'\n        },\n        {\n            name: 'InPsalter_Pahlavi',\n            astral: '\\uD802[\\uDF80-\\uDFAF]'\n        },\n        {\n            name: 'InRejang',\n            bmp: '\\uA930-\\uA95F'\n        },\n        {\n            name: 'InRumi_Numeral_Symbols',\n            astral: '\\uD803[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'InRunic',\n            bmp: '\\u16A0-\\u16FF'\n        },\n        {\n            name: 'InSamaritan',\n            bmp: '\\u0800-\\u083F'\n        },\n        {\n            name: 'InSaurashtra',\n            bmp: '\\uA880-\\uA8DF'\n        },\n        {\n            name: 'InSharada',\n            astral: '\\uD804[\\uDD80-\\uDDDF]'\n        },\n        {\n            name: 'InShavian',\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\n        },\n        {\n            name: 'InShorthand_Format_Controls',\n            astral: '\\uD82F[\\uDCA0-\\uDCAF]'\n        },\n        {\n            name: 'InSiddham',\n            astral: '\\uD805[\\uDD80-\\uDDFF]'\n        },\n        {\n            name: 'InSinhala',\n            bmp: '\\u0D80-\\u0DFF'\n        },\n        {\n            name: 'InSinhala_Archaic_Numbers',\n            astral: '\\uD804[\\uDDE0-\\uDDFF]'\n        },\n        {\n            name: 'InSmall_Form_Variants',\n            bmp: '\\uFE50-\\uFE6F'\n        },\n        {\n            name: 'InSora_Sompeng',\n            astral: '\\uD804[\\uDCD0-\\uDCFF]'\n        },\n        {\n            name: 'InSpacing_Modifier_Letters',\n            bmp: '\\u02B0-\\u02FF'\n        },\n        {\n            name: 'InSpecials',\n            bmp: '\\uFFF0-\\uFFFF'\n        },\n        {\n            name: 'InSundanese',\n            bmp: '\\u1B80-\\u1BBF'\n        },\n        {\n            name: 'InSundanese_Supplement',\n            bmp: '\\u1CC0-\\u1CCF'\n        },\n        {\n            name: 'InSuperscripts_and_Subscripts',\n            bmp: '\\u2070-\\u209F'\n        },\n        {\n            name: 'InSupplemental_Arrows_A',\n            bmp: '\\u27F0-\\u27FF'\n        },\n        {\n            name: 'InSupplemental_Arrows_B',\n            bmp: '\\u2900-\\u297F'\n        },\n        {\n            name: 'InSupplemental_Arrows_C',\n            astral: '\\uD83E[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InSupplemental_Mathematical_Operators',\n            bmp: '\\u2A00-\\u2AFF'\n        },\n        {\n            name: 'InSupplemental_Punctuation',\n            bmp: '\\u2E00-\\u2E7F'\n        },\n        {\n            name: 'InSupplemental_Symbols_and_Pictographs',\n            astral: '\\uD83E[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InSupplementary_Private_Use_Area_A',\n            astral: '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InSupplementary_Private_Use_Area_B',\n            astral: '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InSutton_SignWriting',\n            astral: '\\uD836[\\uDC00-\\uDEAF]'\n        },\n        {\n            name: 'InSyloti_Nagri',\n            bmp: '\\uA800-\\uA82F'\n        },\n        {\n            name: 'InSyriac',\n            bmp: '\\u0700-\\u074F'\n        },\n        {\n            name: 'InTagalog',\n            bmp: '\\u1700-\\u171F'\n        },\n        {\n            name: 'InTagbanwa',\n            bmp: '\\u1760-\\u177F'\n        },\n        {\n            name: 'InTags',\n            astral: '\\uDB40[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InTai_Le',\n            bmp: '\\u1950-\\u197F'\n        },\n        {\n            name: 'InTai_Tham',\n            bmp: '\\u1A20-\\u1AAF'\n        },\n        {\n            name: 'InTai_Viet',\n            bmp: '\\uAA80-\\uAADF'\n        },\n        {\n            name: 'InTai_Xuan_Jing_Symbols',\n            astral: '\\uD834[\\uDF00-\\uDF5F]'\n        },\n        {\n            name: 'InTakri',\n            astral: '\\uD805[\\uDE80-\\uDECF]'\n        },\n        {\n            name: 'InTamil',\n            bmp: '\\u0B80-\\u0BFF'\n        },\n        {\n            name: 'InTelugu',\n            bmp: '\\u0C00-\\u0C7F'\n        },\n        {\n            name: 'InThaana',\n            bmp: '\\u0780-\\u07BF'\n        },\n        {\n            name: 'InThai',\n            bmp: '\\u0E00-\\u0E7F'\n        },\n        {\n            name: 'InTibetan',\n            bmp: '\\u0F00-\\u0FFF'\n        },\n        {\n            name: 'InTifinagh',\n            bmp: '\\u2D30-\\u2D7F'\n        },\n        {\n            name: 'InTirhuta',\n            astral: '\\uD805[\\uDC80-\\uDCDF]'\n        },\n        {\n            name: 'InTransport_and_Map_Symbols',\n            astral: '\\uD83D[\\uDE80-\\uDEFF]'\n        },\n        {\n            name: 'InUgaritic',\n            astral: '\\uD800[\\uDF80-\\uDF9F]'\n        },\n        {\n            name: 'InUnified_Canadian_Aboriginal_Syllabics',\n            bmp: '\\u1400-\\u167F'\n        },\n        {\n            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',\n            bmp: '\\u18B0-\\u18FF'\n        },\n        {\n            name: 'InVai',\n            bmp: '\\uA500-\\uA63F'\n        },\n        {\n            name: 'InVariation_Selectors',\n            bmp: '\\uFE00-\\uFE0F'\n        },\n        {\n            name: 'InVariation_Selectors_Supplement',\n            astral: '\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'InVedic_Extensions',\n            bmp: '\\u1CD0-\\u1CFF'\n        },\n        {\n            name: 'InVertical_Forms',\n            bmp: '\\uFE10-\\uFE1F'\n        },\n        {\n            name: 'InWarang_Citi',\n            astral: '\\uD806[\\uDCA0-\\uDCFF]'\n        },\n        {\n            name: 'InYi_Radicals',\n            bmp: '\\uA490-\\uA4CF'\n        },\n        {\n            name: 'InYi_Syllables',\n            bmp: '\\uA000-\\uA48F'\n        },\n        {\n            name: 'InYijing_Hexagram_Symbols',\n            bmp: '\\u4DC0-\\u4DFF'\n        }\n    ]);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Categories 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See\n * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token names\n * are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'C',\n            alias: 'Other',\n            isBmpLast: true,\n            bmp: '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5-\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E43-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AE\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',\n            astral: '\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFFF]|\\uD86E[\\uDC1E\\uDC1F]|\\uD83D[\\uDD7A\\uDDA4\\uDED1-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3E-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD86D[\\uDF35-\\uDF3F]|[\\uD807\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD81C-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837-\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD805[\\uDC00-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD19-\\uDD7F\\uDD85-\\uDDBF\\uDDC1-\\uDFFF]|\\uD873[\\uDEA2-\\uDFFF]'\n        },\n        {\n            name: 'Cc',\n            alias: 'Control',\n            bmp: '\\0-\\x1F\\x7F-\\x9F'\n        },\n        {\n            name: 'Cf',\n            alias: 'Format',\n            bmp: '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',\n            astral: '\\uDB40[\\uDC01\\uDC20-\\uDC7F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uD804\\uDCBD'\n        },\n        {\n            name: 'Cn',\n            alias: 'Unassigned',\n            bmp: '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5-\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E43-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AE\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',\n            astral: '\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFFF]|\\uD86E[\\uDC1E\\uDC1F]|\\uD83D[\\uDD7A\\uDDA4\\uDED1-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD86D[\\uDF35-\\uDF3F]|[\\uD807\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD81C-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837-\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD805[\\uDC00-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3E-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD19-\\uDD7F\\uDD85-\\uDDBF\\uDDC1-\\uDFFF]|\\uD873[\\uDEA2-\\uDFFF]'\n        },\n        {\n            name: 'Co',\n            alias: 'Private_Use',\n            bmp: '\\uE000-\\uF8FF',\n            astral: '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'\n        },\n        {\n            name: 'Cs',\n            alias: 'Surrogate',\n            bmp: '\\uD800-\\uDFFF'\n        },\n        {\n            name: 'L',\n            alias: 'Letter',\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD83A[\\uDC00-\\uDCC4]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD809[\\uDC80-\\uDD43]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD811[\\uDC00-\\uDE46]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD82C[\\uDC00\\uDC01]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Ll',\n            alias: 'Lowercase_Letter',\n            bmp: 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n            astral: '\\uD803[\\uDCC0-\\uDCF2]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD801[\\uDC28-\\uDC4F]|\\uD806[\\uDCC0-\\uDCDF]'\n        },\n        {\n            name: 'Lm',\n            alias: 'Modifier_Letter',\n            bmp: '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',\n            astral: '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F]'\n        },\n        {\n            name: 'Lo',\n            alias: 'Other_Letter',\n            bmp: '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4]|\\uD803[\\uDC00-\\uDC48]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCFF\\uDEC0-\\uDEF8]|\\uD809[\\uDC80-\\uDD43]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD811[\\uDC00-\\uDE46]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD82C[\\uDC00\\uDC01]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Lt',\n            alias: 'Titlecase_Letter',\n            bmp: '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'\n        },\n        {\n            name: 'Lu',\n            alias: 'Uppercase_Letter',\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\n            astral: '\\uD806[\\uDCA0-\\uDCBF]|\\uD803[\\uDC80-\\uDCB2]|\\uD801[\\uDC00-\\uDC27]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]'\n        },\n        {\n            name: 'M',\n            alias: 'Mark',\n            bmp: '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n            astral: '\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDCA-\\uDDCC\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD82F[\\uDC9D\\uDC9E]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'Mc',\n            alias: 'Spacing_Mark',\n            bmp: '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',\n            astral: '\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD81B[\\uDF51-\\uDF7E]'\n        },\n        {\n            name: 'Me',\n            alias: 'Enclosing_Mark',\n            bmp: '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'\n        },\n        {\n            name: 'Mn',\n            alias: 'Nonspacing_Mark',\n            bmp: '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n            astral: '\\uD805[\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDCA-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'N',\n            alias: 'Number',\n            bmp: '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n            astral: '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD806[\\uDCE0-\\uDCF2]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD834[\\uDF60-\\uDF71]|\\uD83C[\\uDD00-\\uDD0C]|\\uD809[\\uDC00-\\uDC6E]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]'\n        },\n        {\n            name: 'Nd',\n            alias: 'Decimal_Number',\n            bmp: '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n            astral: '\\uD801[\\uDCA0-\\uDCA9]|\\uD835[\\uDFCE-\\uDFFF]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]'\n        },\n        {\n            name: 'Nl',\n            alias: 'Letter_Number',\n            bmp: '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',\n            astral: '\\uD809[\\uDC00-\\uDC6E]|\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]'\n        },\n        {\n            name: 'No',\n            alias: 'Other_Number',\n            bmp: '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D70-\\u0D75\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',\n            astral: '\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD83C[\\uDD00-\\uDD0C]|\\uD806[\\uDCEA-\\uDCF2]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD805[\\uDF3A\\uDF3B]|\\uD81A[\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]'\n        },\n        {\n            name: 'P',\n            alias: 'Punctuation',\n            bmp: '\\x21-\\x23\\x25-\\\\x2A\\x2C-\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5B-\\\\x5D\\x5F\\\\x7B\\x7D\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',\n            astral: '\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD809[\\uDC70-\\uDC74]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD836[\\uDE87-\\uDE8B]|\\uD801\\uDD6F|\\uD82F\\uDC9F|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]'\n        },\n        {\n            name: 'Pc',\n            alias: 'Connector_Punctuation',\n            bmp: '\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'\n        },\n        {\n            name: 'Pd',\n            alias: 'Dash_Punctuation',\n            bmp: '\\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'\n        },\n        {\n            name: 'Pe',\n            alias: 'Close_Punctuation',\n            bmp: '\\\\x29\\\\x5D\\x7D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'\n        },\n        {\n            name: 'Pf',\n            alias: 'Final_Punctuation',\n            bmp: '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'\n        },\n        {\n            name: 'Pi',\n            alias: 'Initial_Punctuation',\n            bmp: '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'\n        },\n        {\n            name: 'Po',\n            alias: 'Other_Punctuation',\n            bmp: '\\x21-\\x23\\x25-\\x27\\\\x2A\\x2C\\\\x2E\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5C\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',\n            astral: '\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD809[\\uDC70-\\uDC74]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD836[\\uDE87-\\uDE8B]|\\uD801\\uDD6F|\\uD82F\\uDC9F|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]'\n        },\n        {\n            name: 'Ps',\n            alias: 'Open_Punctuation',\n            bmp: '\\\\x28\\\\x5B\\\\x7B\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'\n        },\n        {\n            name: 'S',\n            alias: 'Symbol',\n            bmp: '\\\\x24\\\\x2B\\x3C-\\x3E\\\\x5E\\x60\\\\x7C\\x7E\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BE\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD82F\\uDC9C|\\uD805\\uDF3F|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD83B[\\uDEF0\\uDEF1]'\n        },\n        {\n            name: 'Sc',\n            alias: 'Currency_Symbol',\n            bmp: '\\\\x24\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BE\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\n        },\n        {\n            name: 'Sk',\n            alias: 'Modifier_Symbol',\n            bmp: '\\\\x5E\\x60\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',\n            astral: '\\uD83C[\\uDFFB-\\uDFFF]'\n        },\n        {\n            name: 'Sm',\n            alias: 'Math_Symbol',\n            bmp: '\\\\x2B\\x3C-\\x3E\\\\x7C\\x7E\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',\n            astral: '\\uD83B[\\uDEF0\\uDEF1]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]'\n        },\n        {\n            name: 'So',\n            alias: 'Other_Symbol',\n            bmp: '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFA]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD82F\\uDC9C|\\uD805\\uDF3F|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]'\n        },\n        {\n            name: 'Z',\n            alias: 'Separator',\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n        },\n        {\n            name: 'Zl',\n            alias: 'Line_Separator',\n            bmp: '\\u2028'\n        },\n        {\n            name: 'Zp',\n            alias: 'Paragraph_Separator',\n            bmp: '\\u2029'\n        },\n        {\n            name: 'Zs',\n            alias: 'Space_Separator',\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'\n        }\n    ]);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Properties 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See\n * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from UAX\n * #44 <http://unicode.org/reports/tr44/>:\n *\n * - Alphabetic\n *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm + Lo +\n *   Nl + Other_Alphabetic.\n *\n * - Default_Ignorable_Code_Point\n *   For programmatic determination of default ignorable code points. New characters that should be\n *   ignored in rendering (unless explicitly supported) will be assigned in these ranges, permitting\n *   programs to correctly handle the default rendering of such characters when not otherwise\n *   supported.\n *\n * - Lowercase\n *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.\n *\n * - Noncharacter_Code_Point\n *   Code points permanently reserved for internal use.\n *\n * - Uppercase\n *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.\n *\n * - White_Space\n *   Spaces, separator characters and other control characters which should be treated by\n *   programming languages as \"white space\" for the purpose of parsing elements.\n *\n * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS #18\n * RL1.2 additionally requires support for Unicode scripts and general categories. These are\n * included in XRegExp's Unicode Categories and Unicode Scripts addons.\n *\n * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');\n    }\n\n    var unicodeData = [\n        {\n            name: 'ASCII',\n            bmp: '\\0-\\x7F'\n        },\n        {\n            name: 'Alphabetic',\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD83A[\\uDC00-\\uDCC4]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD805[\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF19\\uDF1D-\\uDF2A]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD811[\\uDC00-\\uDE46]|\\uD82C[\\uDC00\\uDC01]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Any',\n            isBmpLast: true,\n            bmp: '\\0-\\uFFFF',\n            astral: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'Default_Ignorable_Code_Point',\n            bmp: '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',\n            astral: '[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]|\\uD834[\\uDD73-\\uDD7A]|\\uD82F[\\uDCA0-\\uDCA3]'\n        },\n        {\n            name: 'Lowercase',\n            bmp: 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n            astral: '\\uD803[\\uDCC0-\\uDCF2]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD801[\\uDC28-\\uDC4F]|\\uD806[\\uDCC0-\\uDCDF]'\n        },\n        {\n            name: 'Noncharacter_Code_Point',\n            bmp: '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',\n            astral: '[\\uDB3F\\uDB7F\\uDBBF\\uDBFF\\uD83F\\uD87F\\uD8BF\\uDAFF\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uD8FF\\uDABF\\uDA7F\\uD93F][\\uDFFE\\uDFFF]'\n        },\n        {\n            name: 'Uppercase',\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\n            astral: '\\uD806[\\uDCA0-\\uDCBF]|\\uD803[\\uDC80-\\uDCB2]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD801[\\uDC00-\\uDC27]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'\n        },\n        {\n            name: 'White_Space',\n            bmp: '\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n        }\n    ];\n\n    // Add non-generated data\n    unicodeData.push({\n        name: 'Assigned',\n        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode\n        // Categories addon is required to use this property\n        inverseOf: 'Cn'\n    });\n\n    XRegExp.addUnicodeData(unicodeData);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Scripts 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive, and\n * any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'Ahom',\n            astral: '\\uD805[\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'\n        },\n        {\n            name: 'Anatolian_Hieroglyphs',\n            astral: '\\uD811[\\uDC00-\\uDE46]'\n        },\n        {\n            name: 'Arabic',\n            bmp: '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',\n            astral: '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'\n        },\n        {\n            name: 'Armenian',\n            bmp: '\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'\n        },\n        {\n            name: 'Avestan',\n            astral: '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'\n        },\n        {\n            name: 'Balinese',\n            bmp: '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'\n        },\n        {\n            name: 'Bamum',\n            bmp: '\\uA6A0-\\uA6F7',\n            astral: '\\uD81A[\\uDC00-\\uDE38]'\n        },\n        {\n            name: 'Bassa_Vah',\n            astral: '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'\n        },\n        {\n            name: 'Batak',\n            bmp: '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'\n        },\n        {\n            name: 'Bengali',\n            bmp: '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB'\n        },\n        {\n            name: 'Bopomofo',\n            bmp: '\\u02EA\\u02EB\\u3105-\\u312D\\u31A0-\\u31BA'\n        },\n        {\n            name: 'Brahmi',\n            astral: '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'\n        },\n        {\n            name: 'Braille',\n            bmp: '\\u2800-\\u28FF'\n        },\n        {\n            name: 'Buginese',\n            bmp: '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'\n        },\n        {\n            name: 'Buhid',\n            bmp: '\\u1740-\\u1753'\n        },\n        {\n            name: 'Canadian_Aboriginal',\n            bmp: '\\u1400-\\u167F\\u18B0-\\u18F5'\n        },\n        {\n            name: 'Carian',\n            astral: '\\uD800[\\uDEA0-\\uDED0]'\n        },\n        {\n            name: 'Caucasian_Albanian',\n            astral: '\\uD801[\\uDD30-\\uDD63\\uDD6F]'\n        },\n        {\n            name: 'Chakma',\n            astral: '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD43]'\n        },\n        {\n            name: 'Cham',\n            bmp: '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'\n        },\n        {\n            name: 'Cherokee',\n            bmp: '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'\n        },\n        {\n            name: 'Common',\n            bmp: '\\0-\\x40\\\\x5B-\\x60\\\\x7B-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061C\\u061F\\u0640\\u06DD\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BE\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2E00-\\u2E42\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDF00-\\uDF56\\uDF60-\\uDF71]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'Coptic',\n            bmp: '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'\n        },\n        {\n            name: 'Cuneiform',\n            astral: '\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]|\\uD808[\\uDC00-\\uDF99]'\n        },\n        {\n            name: 'Cypriot',\n            astral: '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'\n        },\n        {\n            name: 'Cyrillic',\n            bmp: '\\u0400-\\u0484\\u0487-\\u052F\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'\n        },\n        {\n            name: 'Deseret',\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'Devanagari',\n            bmp: '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FD'\n        },\n        {\n            name: 'Duployan',\n            astral: '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'\n        },\n        {\n            name: 'Egyptian_Hieroglyphs',\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'\n        },\n        {\n            name: 'Elbasan',\n            astral: '\\uD801[\\uDD00-\\uDD27]'\n        },\n        {\n            name: 'Ethiopic',\n            bmp: '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'\n        },\n        {\n            name: 'Georgian',\n            bmp: '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D'\n        },\n        {\n            name: 'Glagolitic',\n            bmp: '\\u2C00-\\u2C2E\\u2C30-\\u2C5E'\n        },\n        {\n            name: 'Gothic',\n            astral: '\\uD800[\\uDF30-\\uDF4A]'\n        },\n        {\n            name: 'Grantha',\n            astral: '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'\n        },\n        {\n            name: 'Greek',\n            bmp: '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',\n            astral: '\\uD800[\\uDD40-\\uDD8C\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'\n        },\n        {\n            name: 'Gujarati',\n            bmp: '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9'\n        },\n        {\n            name: 'Gurmukhi',\n            bmp: '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75'\n        },\n        {\n            name: 'Han',\n            bmp: '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD87E[\\uDC00-\\uDE1D]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Hangul',\n            bmp: '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\n        },\n        {\n            name: 'Hanunoo',\n            bmp: '\\u1720-\\u1734'\n        },\n        {\n            name: 'Hatran',\n            astral: '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'\n        },\n        {\n            name: 'Hebrew',\n            bmp: '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'\n        },\n        {\n            name: 'Hiragana',\n            bmp: '\\u3041-\\u3096\\u309D-\\u309F',\n            astral: '\\uD82C\\uDC01|\\uD83C\\uDE00'\n        },\n        {\n            name: 'Imperial_Aramaic',\n            astral: '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'\n        },\n        {\n            name: 'Inherited',\n            bmp: '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',\n            astral: '\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uD800[\\uDDFD\\uDEE0]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'Inscriptional_Pahlavi',\n            astral: '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'\n        },\n        {\n            name: 'Inscriptional_Parthian',\n            astral: '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'\n        },\n        {\n            name: 'Javanese',\n            bmp: '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'\n        },\n        {\n            name: 'Kaithi',\n            astral: '\\uD804[\\uDC80-\\uDCC1]'\n        },\n        {\n            name: 'Kannada',\n            bmp: '\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'\n        },\n        {\n            name: 'Katakana',\n            bmp: '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',\n            astral: '\\uD82C\\uDC00'\n        },\n        {\n            name: 'Kayah_Li',\n            bmp: '\\uA900-\\uA92D\\uA92F'\n        },\n        {\n            name: 'Kharoshthi',\n            astral: '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE50-\\uDE58]'\n        },\n        {\n            name: 'Khmer',\n            bmp: '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'\n        },\n        {\n            name: 'Khojki',\n            astral: '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3D]'\n        },\n        {\n            name: 'Khudawadi',\n            astral: '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'\n        },\n        {\n            name: 'Lao',\n            bmp: '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'\n        },\n        {\n            name: 'Latin',\n            bmp: 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'\n        },\n        {\n            name: 'Lepcha',\n            bmp: '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'\n        },\n        {\n            name: 'Limbu',\n            bmp: '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'\n        },\n        {\n            name: 'Linear_A',\n            astral: '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'\n        },\n        {\n            name: 'Linear_B',\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'\n        },\n        {\n            name: 'Lisu',\n            bmp: '\\uA4D0-\\uA4FF'\n        },\n        {\n            name: 'Lycian',\n            astral: '\\uD800[\\uDE80-\\uDE9C]'\n        },\n        {\n            name: 'Lydian',\n            astral: '\\uD802[\\uDD20-\\uDD39\\uDD3F]'\n        },\n        {\n            name: 'Mahajani',\n            astral: '\\uD804[\\uDD50-\\uDD76]'\n        },\n        {\n            name: 'Malayalam',\n            bmp: '\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D75\\u0D79-\\u0D7F'\n        },\n        {\n            name: 'Mandaic',\n            bmp: '\\u0840-\\u085B\\u085E'\n        },\n        {\n            name: 'Manichaean',\n            astral: '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'\n        },\n        {\n            name: 'Meetei_Mayek',\n            bmp: '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'\n        },\n        {\n            name: 'Mende_Kikakui',\n            astral: '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'\n        },\n        {\n            name: 'Meroitic_Cursive',\n            astral: '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'\n        },\n        {\n            name: 'Meroitic_Hieroglyphs',\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\n        },\n        {\n            name: 'Miao',\n            astral: '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'\n        },\n        {\n            name: 'Modi',\n            astral: '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'\n        },\n        {\n            name: 'Mongolian',\n            bmp: '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA'\n        },\n        {\n            name: 'Mro',\n            astral: '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'\n        },\n        {\n            name: 'Multani',\n            astral: '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'\n        },\n        {\n            name: 'Myanmar',\n            bmp: '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'\n        },\n        {\n            name: 'Nabataean',\n            astral: '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'\n        },\n        {\n            name: 'New_Tai_Lue',\n            bmp: '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'\n        },\n        {\n            name: 'Nko',\n            bmp: '\\u07C0-\\u07FA'\n        },\n        {\n            name: 'Ogham',\n            bmp: '\\u1680-\\u169C'\n        },\n        {\n            name: 'Ol_Chiki',\n            bmp: '\\u1C50-\\u1C7F'\n        },\n        {\n            name: 'Old_Hungarian',\n            astral: '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'\n        },\n        {\n            name: 'Old_Italic',\n            astral: '\\uD800[\\uDF00-\\uDF23]'\n        },\n        {\n            name: 'Old_North_Arabian',\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'Old_Permic',\n            astral: '\\uD800[\\uDF50-\\uDF7A]'\n        },\n        {\n            name: 'Old_Persian',\n            astral: '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'\n        },\n        {\n            name: 'Old_South_Arabian',\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'Old_Turkic',\n            astral: '\\uD803[\\uDC00-\\uDC48]'\n        },\n        {\n            name: 'Oriya',\n            bmp: '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'\n        },\n        {\n            name: 'Osmanya',\n            astral: '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'\n        },\n        {\n            name: 'Pahawh_Hmong',\n            astral: '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'\n        },\n        {\n            name: 'Palmyrene',\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\n        },\n        {\n            name: 'Pau_Cin_Hau',\n            astral: '\\uD806[\\uDEC0-\\uDEF8]'\n        },\n        {\n            name: 'Phags_Pa',\n            bmp: '\\uA840-\\uA877'\n        },\n        {\n            name: 'Phoenician',\n            astral: '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'\n        },\n        {\n            name: 'Psalter_Pahlavi',\n            astral: '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'\n        },\n        {\n            name: 'Rejang',\n            bmp: '\\uA930-\\uA953\\uA95F'\n        },\n        {\n            name: 'Runic',\n            bmp: '\\u16A0-\\u16EA\\u16EE-\\u16F8'\n        },\n        {\n            name: 'Samaritan',\n            bmp: '\\u0800-\\u082D\\u0830-\\u083E'\n        },\n        {\n            name: 'Saurashtra',\n            bmp: '\\uA880-\\uA8C4\\uA8CE-\\uA8D9'\n        },\n        {\n            name: 'Sharada',\n            astral: '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'\n        },\n        {\n            name: 'Shavian',\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\n        },\n        {\n            name: 'Siddham',\n            astral: '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'\n        },\n        {\n            name: 'SignWriting',\n            astral: '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'\n        },\n        {\n            name: 'Sinhala',\n            bmp: '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',\n            astral: '\\uD804[\\uDDE1-\\uDDF4]'\n        },\n        {\n            name: 'Sora_Sompeng',\n            astral: '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'\n        },\n        {\n            name: 'Sundanese',\n            bmp: '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'\n        },\n        {\n            name: 'Syloti_Nagri',\n            bmp: '\\uA800-\\uA82B'\n        },\n        {\n            name: 'Syriac',\n            bmp: '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F'\n        },\n        {\n            name: 'Tagalog',\n            bmp: '\\u1700-\\u170C\\u170E-\\u1714'\n        },\n        {\n            name: 'Tagbanwa',\n            bmp: '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'\n        },\n        {\n            name: 'Tai_Le',\n            bmp: '\\u1950-\\u196D\\u1970-\\u1974'\n        },\n        {\n            name: 'Tai_Tham',\n            bmp: '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'\n        },\n        {\n            name: 'Tai_Viet',\n            bmp: '\\uAA80-\\uAAC2\\uAADB-\\uAADF'\n        },\n        {\n            name: 'Takri',\n            astral: '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'\n        },\n        {\n            name: 'Tamil',\n            bmp: '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'\n        },\n        {\n            name: 'Telugu',\n            bmp: '\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'\n        },\n        {\n            name: 'Thaana',\n            bmp: '\\u0780-\\u07B1'\n        },\n        {\n            name: 'Thai',\n            bmp: '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'\n        },\n        {\n            name: 'Tibetan',\n            bmp: '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'\n        },\n        {\n            name: 'Tifinagh',\n            bmp: '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'\n        },\n        {\n            name: 'Tirhuta',\n            astral: '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'\n        },\n        {\n            name: 'Ugaritic',\n            astral: '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'\n        },\n        {\n            name: 'Vai',\n            bmp: '\\uA500-\\uA62B'\n        },\n        {\n            name: 'Warang_Citi',\n            astral: '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'\n        },\n        {\n            name: 'Yi',\n            bmp: '\\uA000-\\uA48C\\uA490-\\uA4C6'\n        }\n    ]);\n\n}(XRegExp));\n\nreturn XRegExp;\n\n}));\n\n\n},{}]},{},[1])\n\n","'use strict';\nvar ThreadAnalyzer = require(\"./thread_analyzer\"),\n\tStackAnalyzer = require(\"./stack_analyzer\");\n\nfunction DumpAnalyzer(dump, options) {\n\tvar self = this;\n\tthis.options = options;\n\tthis.dump = dump.replace(/(\\xed|\\xab|\\xee|\\xdb|\\x03|\\x00)/g, '');\n\tthis._threadAnalyzers = this.parseThreads(dump);\n\tthis.threadAnalyzers = this._threadAnalyzers;\n\tthis.stackAnalyzer = new StackAnalyzer(this.threadAnalyzers,options).toJson();\n\tthis.total_threads = this.threadAnalyzers.length;\n\tthis.thread_states = countByKey(this.threadAnalyzers,'state');\n\tthis.thread_status = countByKey(this.threadAnalyzers,'status');\n\tthis.deadLocks = this.parseDeadLocks(dump,this.threadAnalyzers);\n}\n\nfunction countByKey(arr, key) {\n\tvar obj = {}\n\tarr.forEach(function(t) {\n\t\tif(obj[t[key]]) {\n\t\t\tobj[t[key]]++;\n\t\t} else {\n\t\t\tobj[t[key]] = 1;\n\t\t}\n\t});\n\treturn obj;\n}\n\nDumpAnalyzer.prototype.filter = function(filtersStr) {\n\tif(!filtersStr || filtersStr.length == 0) {\n\t\t\tthis.threadAnalyzers = this._threadAnalyzers\n\t} else {\n\t\tvar filters = [];\n\t\tfiltersStr.forEach(function(f) {\n\t\t\tfilters.push(new RegExp(f,'ig'));\n\t\t});\n\t\tvar self = this;\n\t\tvar filteredThreads = [];\n\t\tthis._threadAnalyzers.forEach(function(t) {\n\t\t\tfor(var rid = 0; rid < filters.length; rid++) {\n\t\t\t\tvar regex = filters[rid]\n\t\t\t\tif(t.stackRaw.match(regex)) {\n\t\t\t\t\tfilteredThreads.push(t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.threadAnalyzers = filteredThreads;\n\t}\n\tthis.stackAnalyzer = new StackAnalyzer(this.threadAnalyzers,this.options).toJson();\n}\n\nDumpAnalyzer.prototype.parseDeadLocks = function(dump, threads) {\n}\n\n\nDumpAnalyzer.prototype.parseThreads = function(dump) {\n\tvar stack = [];\n\tvar actualStack = \"\";\n\tvar threadAnalyzers = [];\n\tvar splitted = dump.split(\"\\n\")\n\tfor(var i = 0; i < splitted.length; i++) {\n\t\tif(splitted[i].trim() == \"\") {\n\t\t\tstack.push(actualStack);\n\t\t\tactualStack = \"\";\n\t\t} else {\n\t\t\tactualStack+=splitted[i]+\"\\n\"\n\t\t}\n\t}\n\tstack.push(actualStack);\n\t//First split is \"Full thread dump Java HotSpot\"\n\tfor(var i = 1; i< stack.length; i++) {\n\t\tif(stack[i].trim() != \"\") {\n\t\t\tthreadAnalyzers.push(new ThreadAnalyzer(stack[i]))\n\t\t}\n\t}\n\treturn threadAnalyzers.filter(function(e) {\n\t\treturn e.parsed_ok\n\t});\n}\n\nmodule.exports = DumpAnalyzer;\n\n\n\n","/**\n * Options\n * \tOrder: inverted/Standar, default standar\n *  include_waits_and_locks, default false;\n */\nfunction StackAnalyzer(threads, options) {\n\tthis.threads = threads;\n\tthis.options = options || {stack_order:\"inverted\", stack_include_waits_and_locks: false};\n\tthis.tree = new TreeNode(\"root\",\"\");\n\tthis.loadStacks(this.threads);\n}\n\nStackAnalyzer.prototype.toJson = function() {\n\treturn this.tree.toJson();\n}\nStackAnalyzer.prototype.loadStacks = function(threads) {\n\tvar self = this;\n\tfor(var i = 0; i<threads.length;i++) {\n\t\tvar thread = threads[i];\n\t\tvar stack = Array.from(thread.stack);\n\t\tvar position = 0;\n\t\tvar actualNode = self.tree;\n\t\twhile(stack.length > 0) {\n\t\t\tvar line = stack.shift();\n\t\t\t/*if(self.options.stack_order == \"inverted\" ) {\n\t\t\t\tline = stack.shift();\n\t\t\t} else {\n\t\t\t\tline = stack.pop();\n\t\t\t}*/\n\t\t\tif(line.trim().startsWith(\"-\") && !self.options.stack_include_waits_and_locks) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/*\n\t\t\t * To get stack in standar way\n\t\t\t */\n\t\t\t//var line = stack.shift()\n\t\t\tvar node = actualNode.getOrCreateChildren(line);\n\t\t\tnode.addThread({name:thread.name,id:thread.id});\n\t\t\t//Increment at the end\n\t\t\tif(stack.length == 0)\n\t\t\t\tnode.incrementStatus(thread.state);\n\t\t\tactualNode = node;\n\t\t}\n\t}\n}\n\nfunction TreeNode(name) {\n\tthis.name = name;\n\tthis.fullpath = \"\";\n\tthis.total = 0;\n\tthis.states = {};\n\tthis.parent = null;\n\tthis.threads = [];\n\tthis.children = [];\n}\nTreeNode.prototype.addThread = function(t) {\n\tthis.threads.push(t);\n}\n\n/**\n * Treenode is an invalid json structure because contains circular structures, \n * because of that we have the toJson function to remove that reference\n */\nTreeNode.prototype.toJson = function() {\n\tvar json = {};\n\tvar toMove = [{node: this,root:json}];\n\twhile(toMove.length > 0) {\n\t\tvar moving = toMove.pop();\n\t\tmoving.root.children = [];\n\t\tmoving.root.name = moving.node.name;\n\t\tmoving.root.states = moving.node.states;\n\t\tmoving.root.total = moving.node.total;\n\t\tmoving.root.threads = moving.node.threads;\n\t\tmoving.node.children.forEach(function(e) {\n\t\t\tvar r = {};\n\t\t\tmoving.root.children.push(r);\n\t\t\ttoMove.push({node:e, root:r});\n\t\t})\n\t}\n\treturn json;\n}\n\nTreeNode.prototype.incrementStatus = function(state) {\n\tthis._incrementStatus(state);\n\tvar parents = [this.parent];\n\twhile(parents.length>0) {\n\t\tvar parent = parents.pop();\n\t\tif(parent != null) {\n\t\t\tif(parent.parent != null) {\n\t\t\t\tparents.push(parent.parent);\n\t\t\t}\n\t\t\tparent._incrementStatus(state);\n\t\t}\n\t}\n}\nTreeNode.prototype._incrementStatus = function(state) {\n\tif(!this.states[state]) {\n\t\tthis.states[state] = 1;\n\t} else {\n\t\tthis.states[state]++;\n\t}\n\tthis.total++;\n}\n\nTreeNode.prototype.getOrCreateChildren = function(nameStr) {\n\tvar name = nameStr.trim();\n\tfor(var i = 0 ; i < this.children.length; i++) {\n\t\tif(this.children[i].name == name) {\n\t\t\treturn this.children[i];\n\t\t}\n\t}\n\tvar newNode = new TreeNode(name);\n\tnewNode.fullpath = this.fullpath +\" -> \"+name;\n\tnewNode.parent = this;\n\tthis.children.push(newNode);\n\treturn newNode;\n}\n\nmodule.exports = StackAnalyzer;","var XRegExp = require(\"XRegExp\");\n\n/**\n * The next regexes are used to parse thread header\n * thread_name: the name of the thread\n * daemon: if the thread is type daemon it group will exist\n * prio: thread priority\n * tid: thread id\n * nid: native thread id\n * - If the thead is waiting condition this will be present\n * \t- status_condition: the condtion status\n *  - contion: object of condition\n * - else:\n *\t- status_no_condtion will be present with the status name\n */\nvar THREAD_HEADER_PARSER_NAME=XRegExp('^(\\\\t)? *\\\"(?<thread_name>.*)\\\" ','i');\nvar THREAD_HEADER_PARSER_DAEMON=XRegExp(' daemon ','i');\nvar THREAD_HEADER_PARSER_PRIO=XRegExp('prio=(?<prio>\\\\d+)','i');\nvar THREAD_HEADER_PARSER_OS_PRIO=XRegExp('prio=(?<os_prio>\\\\d+)','i');\nvar THREAD_HEADER_PARSER_TID=XRegExp('tid=(?<tid>0x[0-9a-fA-F]+)','i');\nvar THREAD_HEADER_PARSER_NID=XRegExp('nid=(?<nid>0x[0-9a-fA-F]+)','i')\nvar THREAD_HEADER_PARSER_STATUS=XRegExp('nid=0x[0-9a-fA-F]+ ((?<status_condition>.*) \\\\[(?<condition>.*)\\\\]|(?<status_no_condition>.*)) *$','i')\n\nvar THREAD_STATE_PARSER=XRegExp('(?<state>NEW|RUNNABLE|BLOCKED|WAITING|TIMED_WAITING|TERMINATED)')\nvar THREAD_WAIT_PARSER=XRegExp('.*- waiting (on|to lock) <(?<waiting_obj>0x[0-9a-fA-F]+)>','i');\nvar THREAD_LOCKED_PARSER=XRegExp('.*- locked <(?<locked_obj>0x[0-9a-fA-F]+)>','i');\n/*var THREAD_HEADER_PARSER=XRegExp('^ *\\\"(?<thread_name>.*)\\\" ?(?<daemon>daemon)? prio=(?<prio>\\\\d+) '+\n *\t\t\t\t\t\t\t\t 'tid=(?<tid>0x[0-9a-fA-F]+) nid=(?<nid>0x[0-9a-fA-F]+) '+\n *\t\t\t\t\t\t\t\t '((?<status_condition>.*) \\\\[(?<condition>.*)\\\\]|(?<status_no_condition>.*))',\"i\");\n */\nfunction ThreadAnalyzer(stack,options) {\n\tthis.opstions = options || {}; \n\tthis.stackRaw = stack;\n\tthis.has_locked_objects = false;\n\tthis.locked_objects = [];\n\tthis.waiting = false;\n\tthis.waiting_obj = \"\";\n\tthis.stack = [];\n\tthis.state = \"undefined\";\n\tthis.stack_plain = \"\";\n\tthis.parsed_ok = false;\n\tthis.name = \"\";\n\tthis.id = undefined;\n\tthis.native_id = undefined;\n\tthis.parse();\n}\n\nThreadAnalyzer.prototype.parse = function() {\n\tvar splitted = this.stackRaw.split(\"\\n\");\n\tthis.header = splitted[0]\n\t//First line contains thead header\n\tthis.parseHeader(this.header);\n\t//Thread can't be parsed\n\tif(!this.name)\n\t\treturn;\n\t//SecondLine line contains thread state\n\tif(splitted.length > 1) {\n\t\tthis.state = safeRegexGet(splitted[1],THREAD_STATE_PARSER,'state')\n\t}\n\tfor(var i = 2; i < splitted.length; i++) {\n\t\tthis.addToStack(splitted[i].trim())\n\t\tvar locked = safeRegexGet(splitted[i],THREAD_LOCKED_PARSER,'locked_obj');\n\t\tif(locked) {\n\t\t\tthis.has_locked_objects = true;\n\t\t\tthis.locked_objects.push(locked)\n\t\t}\n\t\tvar waiting = safeRegexGet(splitted[i],THREAD_WAIT_PARSER, 'waiting_obj')\n\t\tif(waiting) {\n\t\t\tthis.waiting = true;\n\t\t\tthis.waiting_obj = waiting;\n\t\t}\n\n\t}\n\tthis.parsed_ok = true;\n}\n\nThreadAnalyzer.prototype.addToStack = function(elem) {\n\telem = elem.trim();\n\tif(elem != \"\") {\n\t\tthis.stack.push(elem);\n\t\tthis.stack_plain+=\" -> \"+elem;\n\t\tthis.stack_plain = this.stack_plain.trim();\n\t}\n}\n\nThreadAnalyzer.prototype.parseHeader = function(header) {\n\tthis.name = safeRegexGet(header, THREAD_HEADER_PARSER_NAME,'thread_name')\n\tthis.is_deamon = safeRegexGet(header, THREAD_HEADER_PARSER_DAEMON,'deamon') ? true : false;\n\tthis.priority = safeRegexGet(header, THREAD_HEADER_PARSER_PRIO, 'prio');\n\tthis.os_priority = safeRegexGet(header, THREAD_HEADER_PARSER_OS_PRIO, 'os_prio');\n\tthis.id = safeRegexGet(header, THREAD_HEADER_PARSER_TID, 'tid');\n\tthis.native_id = safeRegexGet(header, THREAD_HEADER_PARSER_NID, 'nid');\n\tvar status = XRegExp.exec(header, THREAD_HEADER_PARSER_STATUS);\n\tif(status) {\n\t\tif(status.status_condition) {\n\t\t\tthis.status = status.status_condition;\n\t\t\tthis.status_condition = status.condition;\n\t\t} else {\n\t\t\tthis.status = status.status_no_condition;\n\t\t\tthis.status_condition = null;\n\t\t}\n\t}\n}\n\n function safeRegexGet(str, regex, element) {\n\tvar res = XRegExp.exec(str, regex);\n\tif(!res)\n\t\treturn null;\n\telse \n\t\treturn res[element]\n}\n\nmodule.exports = ThreadAnalyzer;\n\n","/*!\n * XRegExp-All 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n */\n\n// Module systems magic dance. Don't use strict mode for this function, so it can assign to global.\n;(function(root, definition) {\n    var self;\n\n    // RequireJS\n    if (typeof define === 'function') {\n        define(definition);\n    // CommonJS\n    } else if (typeof exports === 'object') {\n        self = definition();\n        // Use Node.js's `module.exports`. This supports both `require('xregexp')` and\n        // `require('xregexp').XRegExp`\n        (typeof module === 'object' ? (module.exports = self) : exports).XRegExp = self;\n    // <script>\n    } else {\n        // Create global\n        root.XRegExp = definition();\n    }\n}(this, function() {\n\n/*!\n * XRegExp 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2007-2015 MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\nvar XRegExp = (function(undefined) {\n    'use strict';\n\n/* ==============================\n * Private variables\n * ============================== */\n\n    var // Internal reference to the `XRegExp` object\n        self,\n        // Property name used for extended regex instance data\n        REGEX_DATA = 'xregexp',\n        // Optional features that can be installed and uninstalled\n        features = {\n            astral: false,\n            natives: false\n        },\n        // Native methods to use and restore ('native' is an ES3 reserved keyword)\n        nativ = {\n            exec: RegExp.prototype.exec,\n            test: RegExp.prototype.test,\n            match: String.prototype.match,\n            replace: String.prototype.replace,\n            split: String.prototype.split\n        },\n        // Storage for fixed/extended native methods\n        fixed = {},\n        // Storage for regexes cached by `XRegExp.cache`\n        regexCache = {},\n        // Storage for pattern details cached by the `XRegExp` constructor\n        patternCache = {},\n        // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n        tokens = [],\n        // Token scopes\n        defaultScope = 'default',\n        classScope = 'class',\n        // Regexes that match native regex syntax, including octals\n        nativeTokens = {\n            // Any native multicharacter token in default scope, or any single character\n            'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n            // Any native multicharacter token in character class scope, or any single character\n            'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n        },\n        // Any backreference or dollar-prefixed character in replacement strings\n        replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g,\n        // Check for correct `exec` handling of nonparticipating capturing groups\n        correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined,\n        // Check for ES6 `u` flag support\n        hasNativeU = (function() {\n            var isSupported = true;\n            try {\n                new RegExp('', 'u');\n            } catch (exception) {\n                isSupported = false;\n            }\n            return isSupported;\n        }()),\n        // Check for ES6 `y` flag support\n        hasNativeY = (function() {\n            var isSupported = true;\n            try {\n                new RegExp('', 'y');\n            } catch (exception) {\n                isSupported = false;\n            }\n            return isSupported;\n        }()),\n        // Check for ES6 `flags` prop support\n        hasFlagsProp = /a/.flags !== undefined,\n        // Tracker for known flags, including addon flags\n        registeredFlags = {\n            g: true,\n            i: true,\n            m: true,\n            u: hasNativeU,\n            y: hasNativeY\n        },\n        // Shortcut to `Object.prototype.toString`\n        toString = {}.toString,\n        // Shortcut to `XRegExp.addToken`\n        add;\n\n/* ==============================\n * Private functions\n * ============================== */\n\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Augmented regex.\n */\n    function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n        var p;\n\n        regex[REGEX_DATA] = {\n            captureNames: captureNames\n        };\n\n        if (isInternalOnly) {\n            return regex;\n        }\n\n        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n        if (regex.__proto__) {\n            regex.__proto__ = self.prototype;\n        } else {\n            for (p in self.prototype) {\n                // A `self.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n                // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n                // extensions exist on `regex.prototype` anyway\n                regex[p] = self.prototype[p];\n            }\n        }\n\n        regex[REGEX_DATA].source = xSource;\n        // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n        regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\n\n        return regex;\n    }\n\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {String} String with any duplicate characters removed.\n */\n    function clipDuplicates(str) {\n        return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n    }\n\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   <li>`addG` {Boolean} Add flag g while copying the regex.\n *   <li>`addY` {Boolean} Add flag y while copying the regex.\n *   <li>`removeG` {Boolean} Remove flag g while copying the regex.\n *   <li>`removeY` {Boolean} Remove flag y while copying the regex.\n *   <li>`isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n    function copyRegex(regex, options) {\n        if (!self.isRegExp(regex)) {\n            throw new TypeError('Type RegExp expected');\n        }\n\n        var xData = regex[REGEX_DATA] || {},\n            flags = getNativeFlags(regex),\n            flagsToAdd = '',\n            flagsToRemove = '',\n            xregexpSource = null,\n            xregexpFlags = null;\n\n        options = options || {};\n\n        if (options.removeG) {flagsToRemove += 'g';}\n        if (options.removeY) {flagsToRemove += 'y';}\n        if (flagsToRemove) {\n            flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');\n        }\n\n        if (options.addG) {flagsToAdd += 'g';}\n        if (options.addY) {flagsToAdd += 'y';}\n        if (flagsToAdd) {\n            flags = clipDuplicates(flags + flagsToAdd);\n        }\n\n        if (!options.isInternalOnly) {\n            if (xData.source !== undefined) {\n                xregexpSource = xData.source;\n            }\n            // null or undefined; don't want to add to `flags` if the previous value was null, since\n            // that indicates we're not tracking original precompilation flags\n            if (xData.flags != null) {\n                // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are\n                // never removed for non-internal regexes, so don't need to handle it\n                xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\n            }\n        }\n\n        // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to\n        // avoid searching for special tokens. That would be wrong for regexes constructed by\n        // `RegExp`, and unnecessary for regexes constructed by `XRegExp` because the regex has\n        // already undergone the translation to native regex syntax\n        regex = augment(\n            new RegExp(regex.source, flags),\n            hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,\n            xregexpSource,\n            xregexpFlags,\n            options.isInternalOnly\n        );\n\n        return regex;\n    }\n\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {Number}\n */\n    function dec(hex) {\n        return parseInt(hex, 16);\n    }\n\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {String} Native flags in use.\n */\n    function getNativeFlags(regex) {\n        return hasFlagsProp ?\n            regex.flags :\n            // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or\n            // concatenation with an empty string) allows this to continue working predictably when\n            // `XRegExp.proptotype.toString` is overriden\n            nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\n    }\n\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {Boolean} Whether the regex uses named capture.\n */\n    function hasNamedCapture(regex) {\n        return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n    }\n\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {String}\n */\n    function hex(dec) {\n        return parseInt(dec, 10).toString(16);\n    }\n\n/**\n * Returns the first index at which a given value can be found in an array.\n *\n * @private\n * @param {Array} array Array to search.\n * @param {*} value Value to locate in the array.\n * @returns {Number} Zero-based index at which the item is found, or -1.\n */\n    function indexOf(array, value) {\n        var len = array.length, i;\n\n        for (i = 0; i < len; ++i) {\n            if (array[i] === value) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {Boolean} Whether the object matches the type.\n */\n    function isType(value, type) {\n        return toString.call(value) === '[object ' + type + ']';\n    }\n\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next token is a quantifier.\n */\n    function isQuantifierNext(pattern, pos, flags) {\n        return nativ.test.call(\n            flags.indexOf('x') > -1 ?\n                // Ignore any leading whitespace, line comments, and inline comments\n                /^(?:\\s+|#.*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ :\n                // Ignore any leading inline comments\n                /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/,\n            pattern.slice(pos)\n        );\n    }\n\n/**\n * Pads the provided string with as many leading zeros as needed to get to length 4. Used to produce\n * fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {String}\n */\n    function pad4(str) {\n        while (str.length < 4) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {Object} Object with properties `pattern` and `flags`.\n */\n    function prepareFlags(pattern, flags) {\n        var i;\n\n        // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n        if (clipDuplicates(flags) !== flags) {\n            throw new SyntaxError('Invalid duplicate regex flag ' + flags);\n        }\n\n        // Strip and apply a leading mode modifier with any combination of flags except g or y\n        pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function($0, $1) {\n            if (nativ.test.call(/[gy]/, $1)) {\n                throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);\n            }\n            // Allow duplicate flags within the mode modifier\n            flags = clipDuplicates(flags + $1);\n            return '';\n        });\n\n        // Throw on unknown native or nonnative flags\n        for (i = 0; i < flags.length; ++i) {\n            if (!registeredFlags[flags.charAt(i)]) {\n                throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));\n            }\n        }\n\n        return {\n            pattern: pattern,\n            flags: flags\n        };\n    }\n\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n    function prepareOptions(value) {\n        var options = {};\n\n        if (isType(value, 'String')) {\n            self.forEach(value, /[^\\s,]+/, function(match) {\n                options[match] = true;\n            });\n\n            return options;\n        }\n\n        return value;\n    }\n\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n    function registerFlag(flag) {\n        if (!/^[\\w$]$/.test(flag)) {\n            throw new Error('Flag must be a single character A-Za-z0-9_$');\n        }\n\n        registeredFlags[flag] = true;\n    }\n\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n    function runTokens(pattern, flags, pos, scope, context) {\n        var i = tokens.length,\n            leadChar = pattern.charAt(pos),\n            result = null,\n            match,\n            t;\n\n        // Run in reverse insertion order\n        while (i--) {\n            t = tokens[i];\n            if (\n                (t.leadChar && t.leadChar !== leadChar) ||\n                (t.scope !== scope && t.scope !== 'all') ||\n                (t.flag && flags.indexOf(t.flag) === -1)\n            ) {\n                continue;\n            }\n\n            match = self.exec(pattern, t.regex, pos, 'sticky');\n            if (match) {\n                result = {\n                    matchLength: match[0].length,\n                    output: t.handler.call(context, match, scope, flags),\n                    reparse: t.reparse\n                };\n                // Finished with token tests\n                break;\n            }\n        }\n\n        return result;\n    }\n\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n    function setAstral(on) {\n        features.astral = on;\n    }\n\n/**\n * Enables or disables native method overrides.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n    function setNatives(on) {\n        RegExp.prototype.exec = (on ? fixed : nativ).exec;\n        RegExp.prototype.test = (on ? fixed : nativ).test;\n        String.prototype.match = (on ? fixed : nativ).match;\n        String.prototype.replace = (on ? fixed : nativ).replace;\n        String.prototype.split = (on ? fixed : nativ).split;\n\n        features.natives = on;\n    }\n\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n    function toObject(value) {\n        // null or undefined\n        if (value == null) {\n            throw new TypeError('Cannot convert null or undefined to object');\n        }\n\n        return value;\n    }\n\n/* ==============================\n * Constructor\n * ============================== */\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     <li>`g` - global\n *     <li>`i` - ignore case\n *     <li>`m` - multiline anchors\n *     <li>`u` - unicode (ES6)\n *     <li>`y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     <li>`n` - explicit capture\n *     <li>`s` - dot matches all (aka singleline)\n *     <li>`x` - free-spacing and line comments (aka extended)\n *     <li>`A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\\n *          (?<month> [0-9]{2} ) -?  # month \\n\\\n *          (?<day>   [0-9]{2} )     # day   ', 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n    self = function(pattern, flags) {\n        var context = {\n                hasNamedCapture: false,\n                captureNames: []\n            },\n            scope = defaultScope,\n            output = '',\n            pos = 0,\n            result,\n            token,\n            generated,\n            appliedPattern,\n            appliedFlags;\n\n        if (self.isRegExp(pattern)) {\n            if (flags !== undefined) {\n                throw new TypeError('Cannot supply flags when copying a RegExp');\n            }\n            return copyRegex(pattern);\n        }\n\n        // Copy the argument behavior of `RegExp`\n        pattern = pattern === undefined ? '' : String(pattern);\n        flags = flags === undefined ? '' : String(flags);\n\n        if (self.isInstalled('astral') && flags.indexOf('A') === -1) {\n            // This causes an error to be thrown if the Unicode Base addon is not available\n            flags += 'A';\n        }\n\n        if (!patternCache[pattern]) {\n            patternCache[pattern] = {};\n        }\n\n        if (!patternCache[pattern][flags]) {\n            // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n            result = prepareFlags(pattern, flags);\n            appliedPattern = result.pattern;\n            appliedFlags = result.flags;\n\n            // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n            // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n            while (pos < appliedPattern.length) {\n                do {\n                    // Check for custom tokens at the current position\n                    result = runTokens(appliedPattern, appliedFlags, pos, scope, context);\n                    // If the matched token used the `reparse` option, splice its output into the\n                    // pattern before running tokens again at the same position\n                    if (result && result.reparse) {\n                        appliedPattern = appliedPattern.slice(0, pos) +\n                            result.output +\n                            appliedPattern.slice(pos + result.matchLength);\n                    }\n                } while (result && result.reparse);\n\n                if (result) {\n                    output += result.output;\n                    pos += (result.matchLength || 1);\n                } else {\n                    // Get the native token at the current position\n                    token = self.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];\n                    output += token;\n                    pos += token.length;\n                    if (token === '[' && scope === defaultScope) {\n                        scope = classScope;\n                    } else if (token === ']' && scope === classScope) {\n                        scope = defaultScope;\n                    }\n                }\n            }\n\n            patternCache[pattern][flags] = {\n                // Cleanup token cruft: repeated `(?:)(?:)` and leading/trailing `(?:)`\n                pattern: nativ.replace.call(output, /\\(\\?:\\)(?=\\(\\?:\\))|^\\(\\?:\\)|\\(\\?:\\)$/g, ''),\n                // Strip all but native flags\n                flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\n                // `context.captureNames` has an item for each capturing group, even if unnamed\n                captures: context.hasNamedCapture ? context.captureNames : null\n            };\n        }\n\n        generated = patternCache[pattern][flags];\n        return augment(\n            new RegExp(generated.pattern, generated.flags),\n            generated.captures,\n            pattern,\n            flags\n        );\n    };\n\n// Add `RegExp.prototype` to the prototype chain\n    self.prototype = new RegExp();\n\n/* ==============================\n * Public properties\n * ============================== */\n\n/**\n * The XRegExp version number.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n    self.version = '3.0.0';\n\n/* ==============================\n * Public methods\n * ============================== */\n\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   <li>The match array, with named backreference properties.\n *   <li>The regex scope where the match was found: 'default' or 'class'.\n *   <li>The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   <li>`scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   <li>`flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   <li>`optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   <li>`reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   <li>`leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   function() {return '\\\\x07';},\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   function(match) {return match[1] + (match[2] ? '' : '?');},\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n    self.addToken = function(regex, handler, options) {\n        options = options || {};\n        var optionalFlags = options.optionalFlags, i;\n\n        if (options.flag) {\n            registerFlag(options.flag);\n        }\n\n        if (optionalFlags) {\n            optionalFlags = nativ.split.call(optionalFlags, '');\n            for (i = 0; i < optionalFlags.length; ++i) {\n                registerFlag(optionalFlags[i]);\n            }\n        }\n\n        // Add to the private list of syntax tokens\n        tokens.push({\n            regex: copyRegex(regex, {\n                addG: true,\n                addY: hasNativeY,\n                isInternalOnly: true\n            }),\n            handler: handler,\n            scope: options.scope || defaultScope,\n            flag: options.flag,\n            reparse: options.reparse,\n            leadChar: options.leadChar\n        });\n\n        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n        // flags might now produce different results\n        self.cache.flush('patterns');\n    };\n\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\n *   // The regex is compiled once only\n * }\n */\n    self.cache = function(pattern, flags) {\n        if (!regexCache[pattern]) {\n            regexCache[pattern] = {};\n        }\n        return regexCache[pattern][flags] || (\n            regexCache[pattern][flags] = self(pattern, flags)\n        );\n    };\n\n// Intentionally undocumented\n    self.cache.flush = function(cacheName) {\n        if (cacheName === 'patterns') {\n            // Flush the pattern cache used by the `XRegExp` constructor\n            patternCache = {};\n        } else {\n            // Flush the regex cache populated by `XRegExp.cache`\n            regexCache = {};\n        }\n    };\n\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any point within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {String} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\ <\\.>'\n */\n    self.escape = function(str) {\n        return nativ.replace.call(toObject(str), /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    };\n\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named backreference properties are included on the match array.\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named backreference properties, or `null`.\n * @example\n *\n * // Basic use, with named backreference\n * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * var pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n    self.exec = function(str, regex, pos, sticky) {\n        var cacheKey = 'g',\n            addY = false,\n            match,\n            r2;\n\n        addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));\n        if (addY) {\n            cacheKey += 'y';\n        }\n\n        regex[REGEX_DATA] = regex[REGEX_DATA] || {};\n\n        // Shares cached copies with `XRegExp.match`/`replace`\n        r2 = regex[REGEX_DATA][cacheKey] || (\n            regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n                addG: true,\n                addY: addY,\n                removeY: sticky === false,\n                isInternalOnly: true\n            })\n        );\n\n        r2.lastIndex = pos = pos || 0;\n\n        // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n        match = fixed.exec.call(r2, str);\n\n        if (sticky && match && match.index !== pos) {\n            match = null;\n        }\n\n        if (regex.global) {\n            regex.lastIndex = match ? r2.lastIndex : 0;\n        }\n\n        return match;\n    };\n\n/**\n * Executes a provided function once per regex match.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   <li>The match array, with named backreference properties.\n *   <li>The zero-based match index.\n *   <li>The string being traversed.\n *   <li>The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * XRegExp.forEach('1a2345', /\\d/, function(match, i) {\n *   if (i % 2) this.push(+match[0]);\n * }, []);\n * // -> [2, 4]\n */\n    self.forEach = function(str, regex, callback) {\n        var pos = 0,\n            i = -1,\n            match;\n\n        while ((match = self.exec(str, regex, pos))) {\n            // Because `regex` is provided to `callback`, the function could use the deprecated/\n            // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since\n            // `XRegExp.exec` doesn't use `lastIndex` to set the search position, this can't lead\n            // to an infinite loop, at least. Actually, because of the way `XRegExp.exec` caches\n            // globalized versions of regexes, mutating the regex will not have any effect on the\n            // iteration or matched strings, which is a nice side effect that brings extra safety\n            callback(match, ++i, str, regex);\n\n            pos = match.index + (match[0].length || 1);\n        }\n    };\n\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * var globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n    self.globalize = function(regex) {\n        return copyRegex(regex, {addG: true});\n    };\n\n/**\n * Installs optional features according to the specified options. Can be undone using\n * {@link #XRegExp.uninstall}.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Overrides native regex methods with fixed/extended versions that support named\n *   // backreferences and fix numerous cross-browser bugs\n *   natives: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral natives');\n */\n    self.install = function(options) {\n        options = prepareOptions(options);\n\n        if (!features.astral && options.astral) {\n            setAstral(true);\n        }\n\n        if (!features.natives && options.natives) {\n            setNatives(true);\n        }\n    };\n\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   <li>`natives`\n *   <li>`astral`\n * @returns {Boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('natives');\n */\n    self.isInstalled = function(feature) {\n        return !!(features[feature]);\n    };\n\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {Boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n    self.isRegExp = function(value) {\n        return toString.call(value) === '[object RegExp]';\n        //return isType(value, 'RegExp');\n    };\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n    self.match = function(str, regex, scope) {\n        var global = (regex.global && scope !== 'one') || scope === 'all',\n            cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY',\n            result,\n            r2;\n\n        regex[REGEX_DATA] = regex[REGEX_DATA] || {};\n\n        // Shares cached copies with `XRegExp.exec`/`replace`\n        r2 = regex[REGEX_DATA][cacheKey] || (\n            regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n                addG: !!global,\n                addY: !!regex.sticky,\n                removeG: scope === 'one',\n                isInternalOnly: true\n            })\n        );\n\n        result = nativ.match.call(toObject(str), r2);\n\n        if (regex.global) {\n            regex.lastIndex = (\n                (scope === 'one' && result) ?\n                    // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n                    (result.index + result[0].length) : 0\n            );\n        }\n\n        return global ? (result || []) : (result && result[0]);\n    };\n\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and objects with `regex`\n * and `backref` properties. When a backreference is specified, the named or numbered backreference\n * is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\n *         <a href=\"http://www.google.com/\">Google</a>';\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n    self.matchChain = function(str, chain) {\n        return (function recurseChain(values, level) {\n            var item = chain[level].regex ? chain[level] : {regex: chain[level]},\n                matches = [],\n                addMatch = function(match) {\n                    if (item.backref) {\n                        /* Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold\n                         * the `undefined`s for backreferences to nonparticipating capturing\n                         * groups. In such cases, a `hasOwnProperty` or `in` check on its own would\n                         * inappropriately throw the exception, so also check if the backreference\n                         * is a number that is within the bounds of the array.\n                         */\n                        if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {\n                            throw new ReferenceError('Backreference to undefined group: ' + item.backref);\n                        }\n\n                        matches.push(match[item.backref] || '');\n                    } else {\n                        matches.push(match[0]);\n                    }\n                },\n                i;\n\n            for (i = 0; i < values.length; ++i) {\n                self.forEach(values[i], item.regex, addMatch);\n            }\n\n            return ((level === chain.length - 1) || !matches.length) ?\n                matches :\n                recurseChain(matches, level + 1);\n        }([str], 0));\n    };\n\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement\n * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared\n * to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     <li>$$ - Inserts a literal $ character.\n *     <li>$&, $0 - Inserts the matched substring.\n *     <li>$` - Inserts the string that precedes the matched substring (left context).\n *     <li>$' - Inserts the string that follows the matched substring (right context).\n *     <li>$n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\n *       backreference n/nn.\n *     <li>${n} - Where n is a name or any number of digits that reference an existent capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     <li>The matched substring (corresponds to $& above). Named backreferences are accessible as\n *       properties of this first argument.\n *     <li>0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\n *     <li>The zero-based index of the match within the total search string.\n *     <li>The total string being searched.\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '${last}, ${first}');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, function(match) {\n *   return match.last + ', ' + match.first;\n * });\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n    self.replace = function(str, search, replacement, scope) {\n        var isRegex = self.isRegExp(search),\n            global = (search.global && scope !== 'one') || scope === 'all',\n            cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY',\n            s2 = search,\n            result;\n\n        if (isRegex) {\n            search[REGEX_DATA] = search[REGEX_DATA] || {};\n\n            // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n            // `lastIndex` isn't updated *during* replacement iterations\n            s2 = search[REGEX_DATA][cacheKey] || (\n                search[REGEX_DATA][cacheKey] = copyRegex(search, {\n                    addG: !!global,\n                    addY: !!search.sticky,\n                    removeG: scope === 'one',\n                    isInternalOnly: true\n                })\n            );\n        } else if (global) {\n            s2 = new RegExp(self.escape(String(search)), 'g');\n        }\n\n        // Fixed `replace` required for named backreferences, etc.\n        result = fixed.replace.call(toObject(str), s2, replacement);\n\n        if (isRegex && search.global) {\n            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n            search.lastIndex = 0;\n        }\n\n        return result;\n    };\n\n/**\n * Performs batch processing of string replacements. Used like {@link #XRegExp.replace}, but\n * accepts an array of replacement details. Later replacements operate on the output of earlier\n * replacements. Replacement details are accepted as an array with a regex or string to search for,\n * the replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `${name}`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z${name}'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, function($0) {\n *     return $0.toUpperCase();\n *   }]\n * ]);\n */\n    self.replaceEach = function(str, replacements) {\n        var i, r;\n\n        for (i = 0; i < replacements.length; ++i) {\n            r = replacements[i];\n            str = self.replace(str, r[0], r[1], r[2]);\n        }\n\n        return str;\n    };\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n    self.split = function(str, separator, limit) {\n        return fixed.split.call(toObject(str), separator, limit);\n    };\n\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n */\n    self.test = function(str, regex, pos, sticky) {\n        // Do this the easy way :-)\n        return !!self.exec(str, regex, pos, sticky);\n    };\n\n/**\n * Uninstalls optional features according to the specified options. All optional features start out\n * uninstalled, so this is used to undo the actions of {@link #XRegExp.install}.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons\n *   astral: true,\n *\n *   // Restores native regex methods\n *   natives: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral natives');\n */\n    self.uninstall = function(options) {\n        options = prepareOptions(options);\n\n        if (features.astral && options.astral) {\n            setAstral(false);\n        }\n\n        if (features.natives && options.natives) {\n            setNatives(false);\n        }\n    };\n\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n */\n    self.union = function(patterns, flags) {\n        var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n            output = [],\n            numCaptures = 0,\n            numPriorCaptures,\n            captureNames,\n            pattern,\n            rewrite = function(match, paren, backref) {\n                var name = captureNames[numCaptures - numPriorCaptures];\n\n                // Capturing group\n                if (paren) {\n                    ++numCaptures;\n                    // If the current capture has a name, preserve the name\n                    if (name) {\n                        return '(?<' + name + '>';\n                    }\n                // Backreference\n                } else if (backref) {\n                    // Rewrite the backreference\n                    return '\\\\' + (+backref + numPriorCaptures);\n                }\n\n                return match;\n            },\n            i;\n\n        if (!(isType(patterns, 'Array') && patterns.length)) {\n            throw new TypeError('Must provide a nonempty array of patterns to merge');\n        }\n\n        for (i = 0; i < patterns.length; ++i) {\n            pattern = patterns[i];\n\n            if (self.isRegExp(pattern)) {\n                numPriorCaptures = numCaptures;\n                captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];\n\n                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns\n                // are independently valid; helps keep this simple. Named captures are put back\n                output.push(nativ.replace.call(self(pattern.source).source, parts, rewrite));\n            } else {\n                output.push(self.escape(pattern));\n            }\n        }\n\n        return self(output.join('|'), flags);\n    };\n\n/* ==============================\n * Fixed/extended native methods\n * ============================== */\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\n * override the native method. Use via `XRegExp.exec` without overriding natives.\n *\n * @private\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n    fixed.exec = function(str) {\n        var origLastIndex = this.lastIndex,\n            match = nativ.exec.apply(this, arguments),\n            name,\n            r2,\n            i;\n\n        if (match) {\n            // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating\n            // capturing groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of\n            // older IEs. IE 9 in standards mode follows the spec\n            if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {\n                r2 = copyRegex(this, {\n                    removeG: true,\n                    isInternalOnly: true\n                });\n                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n                // matching due to characters outside the match\n                nativ.replace.call(String(str).slice(match.index), r2, function() {\n                    var len = arguments.length, i;\n                    // Skip index 0 and the last 2\n                    for (i = 1; i < len - 2; ++i) {\n                        if (arguments[i] === undefined) {\n                            match[i] = undefined;\n                        }\n                    }\n                });\n            }\n\n            // Attach named capture properties\n            if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n                // Skip index 0\n                for (i = 1; i < match.length; ++i) {\n                    name = this[REGEX_DATA].captureNames[i - 1];\n                    if (name) {\n                        match[name] = match[i];\n                    }\n                }\n            }\n\n            // Fix browsers that increment `lastIndex` after zero-length matches\n            if (this.global && !match[0].length && (this.lastIndex > match.index)) {\n                this.lastIndex = match.index;\n            }\n        }\n\n        if (!this.global) {\n            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n            this.lastIndex = origLastIndex;\n        }\n\n        return match;\n    };\n\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\n * uses this to override the native method.\n *\n * @private\n * @param {String} str String to search.\n * @returns {Boolean} Whether the regex matched the provided value.\n */\n    fixed.test = function(str) {\n        // Do this the easy way :-)\n        return !!fixed.exec.call(this, str);\n    };\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\n * override the native method.\n *\n * @private\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n    fixed.match = function(regex) {\n        var result;\n\n        if (!self.isRegExp(regex)) {\n            // Use the native `RegExp` rather than `XRegExp`\n            regex = new RegExp(regex);\n        } else if (regex.global) {\n            result = nativ.match.apply(this, arguments);\n            // Fixes IE bug\n            regex.lastIndex = 0;\n\n            return result;\n        }\n\n        return fixed.exec.call(regex, toObject(this));\n    };\n\n/**\n * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\n * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser\n * bugs in replacement text syntax when performing a replacement using a nonregex search value, and\n * the value of a replacement regex's `lastIndex` property during replacement iterations and upon\n * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note\n * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via\n * `XRegExp.replace` without overriding natives.\n *\n * @private\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {String} New string with one or all matches replaced.\n */\n    fixed.replace = function(search, replacement) {\n        var isRegex = self.isRegExp(search),\n            origLastIndex,\n            captureNames,\n            result;\n\n        if (isRegex) {\n            if (search[REGEX_DATA]) {\n                captureNames = search[REGEX_DATA].captureNames;\n            }\n            // Only needed if `search` is nonglobal\n            origLastIndex = search.lastIndex;\n        } else {\n            search += ''; // Type-convert\n        }\n\n        // Don't use `typeof`; some older browsers return 'function' for regex objects\n        if (isType(replacement, 'Function')) {\n            // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n            // functions isn't type-converted to a string\n            result = nativ.replace.call(String(this), search, function() {\n                var args = arguments, i;\n                if (captureNames) {\n                    // Change the `arguments[0]` string primitive to a `String` object that can\n                    // store properties. This really does need to use `String` as a constructor\n                    args[0] = new String(args[0]);\n                    // Store named backreferences on the first argument\n                    for (i = 0; i < captureNames.length; ++i) {\n                        if (captureNames[i]) {\n                            args[0][captureNames[i]] = args[i + 1];\n                        }\n                    }\n                }\n                // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox,\n                // Safari bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\n                if (isRegex && search.global) {\n                    search.lastIndex = args[args.length - 2] + args[0].length;\n                }\n                // ES6 specs the context for replacement functions as `undefined`\n                return replacement.apply(undefined, args);\n            });\n        } else {\n            // Ensure that the last value of `args` will be a string when given nonstring `this`,\n            // while still throwing on null or undefined context\n            result = nativ.replace.call(this == null ? this : String(this), search, function() {\n                // Keep this function's `arguments` available through closure\n                var args = arguments;\n                return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {\n                    var n;\n                    // Named or numbered backreference with curly braces\n                    if ($1) {\n                        // XRegExp behavior for `${n}`:\n                        // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for\n                        //    for the entire match. Any number of leading zeros may be used.\n                        // 2. Backreference to named capture `n`, if it exists and is not an\n                        //    integer overridden by numbered capture. In practice, this does not\n                        //    overlap with numbered capture since XRegExp does not allow named\n                        //    capture to use a bare integer as the name.\n                        // 3. If the name or number does not refer to an existing capturing group,\n                        //    it's an error.\n                        n = +$1; // Type-convert; drop leading zeros\n                        if (n <= args.length - 3) {\n                            return args[n] || '';\n                        }\n                        // Groups with the same name is an error, else would need `lastIndexOf`\n                        n = captureNames ? indexOf(captureNames, $1) : -1;\n                        if (n < 0) {\n                            throw new SyntaxError('Backreference to undefined group ' + $0);\n                        }\n                        return args[n + 1] || '';\n                    }\n                    // Else, special variable or numbered backreference without curly braces\n                    if ($2 === '$') { // $$\n                        return '$';\n                    }\n                    if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00\n                        return args[0];\n                    }\n                    if ($2 === '`') { // $` (left context)\n                        return args[args.length - 1].slice(0, args[args.length - 2]);\n                    }\n                    if ($2 === \"'\") { // $' (right context)\n                        return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\n                    }\n                    // Else, numbered backreference without curly braces\n                    $2 = +$2; // Type-convert; drop leading zero\n                    // XRegExp behavior for `$n` and `$nn`:\n                    // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.\n                    // - `$1` is an error if no capturing groups.\n                    // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.\n                    // - `$01` is `$1` if at least one capturing group, else it's an error.\n                    // - `$0` (not followed by 1-9) and `$00` are the entire match.\n                    // Native behavior, for comparison:\n                    // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n                    // - `$1` is a literal `$1` if no capturing groups.\n                    // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n                    // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n                    // - `$0` is a literal `$0`.\n                    if (!isNaN($2)) {\n                        if ($2 > args.length - 3) {\n                            throw new SyntaxError('Backreference to undefined group ' + $0);\n                        }\n                        return args[$2] || '';\n                    }\n                    // `$` followed by an unsupported char is an error, unlike native JS\n                    throw new SyntaxError('Invalid token ' + $0);\n                });\n            });\n        }\n\n        if (isRegex) {\n            if (search.global) {\n                // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n                search.lastIndex = 0;\n            } else {\n                // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n                search.lastIndex = origLastIndex;\n            }\n        }\n\n        return result;\n    };\n\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\n * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\n *\n * @private\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n */\n    fixed.split = function(separator, limit) {\n        if (!self.isRegExp(separator)) {\n            // Browsers handle nonregex split correctly, so use the faster native method\n            return nativ.split.apply(this, arguments);\n        }\n\n        var str = String(this),\n            output = [],\n            origLastIndex = separator.lastIndex,\n            lastLastIndex = 0,\n            lastLength;\n\n        // Values for `limit`, per the spec:\n        // If undefined: pow(2,32) - 1\n        // If 0, Infinity, or NaN: 0\n        // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n        // If negative number: pow(2,32) - floor(abs(limit))\n        // If other: Type-convert, then use the above rules\n        // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63,\n        // unless Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n        limit = (limit === undefined ? -1 : limit) >>> 0;\n\n        self.forEach(str, separator, function(match) {\n            // This condition is not the same as `if (match[0].length)`\n            if ((match.index + match[0].length) > lastLastIndex) {\n                output.push(str.slice(lastLastIndex, match.index));\n                if (match.length > 1 && match.index < str.length) {\n                    Array.prototype.push.apply(output, match.slice(1));\n                }\n                lastLength = match[0].length;\n                lastLastIndex = match.index + lastLength;\n            }\n        });\n\n        if (lastLastIndex === str.length) {\n            if (!nativ.test.call(separator, '') || lastLength) {\n                output.push('');\n            }\n        } else {\n            output.push(str.slice(lastLastIndex));\n        }\n\n        separator.lastIndex = origLastIndex;\n        return output.length > limit ? output.slice(0, limit) : output;\n    };\n\n/* ==============================\n * Built-in syntax/flag tokens\n * ============================== */\n\n    add = self.addToken;\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n    add(\n        /\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,\n        function(match, scope) {\n            // \\B is allowed in default scope only\n            if (match[1] === 'B' && scope === defaultScope) {\n                return match[0];\n            }\n            throw new SyntaxError('Invalid escape ' + match[0]);\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n    add(\n        /\\\\u{([\\dA-Fa-f]+)}/,\n        function(match, scope, flags) {\n            var code = dec(match[1]);\n            if (code > 0x10FFFF) {\n                throw new SyntaxError('Invalid Unicode code point ' + match[0]);\n            }\n            if (code <= 0xFFFF) {\n                // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n                // separate from preceding tokens\n                return '\\\\u' + pad4(hex(code));\n            }\n            // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n            if (hasNativeU && flags.indexOf('u') > -1) {\n                return match[0];\n            }\n            throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\n * character class endings can't be determined.\n */\n    add(\n        /\\[(\\^?)]/,\n        function(match) {\n            // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n            // (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\n            return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\n        },\n        {leadChar: '['}\n    );\n\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n    add(\n        /\\(\\?#[^)]*\\)/,\n        function(match, scope, flags) {\n            // Keep tokens separated unless the following token is a quantifier\n            return isQuantifierNext(match.input, match.index + match[0].length, flags) ?\n                '' : '(?:)';\n        },\n        {leadChar: '('}\n    );\n\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n    add(\n        /\\s+|#.*/,\n        function(match, scope, flags) {\n            // Keep tokens separated unless the following token is a quantifier\n            return isQuantifierNext(match.input, match.index + match[0].length, flags) ?\n                '' : '(?:)';\n        },\n        {flag: 'x'}\n    );\n\n/*\n * Dot, in dotall mode (aka singleline mode, flag s) only.\n */\n    add(\n        /\\./,\n        function() {\n            return '[\\\\s\\\\S]';\n        },\n        {\n            flag: 's',\n            leadChar: '.'\n        }\n    );\n\n/*\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\n */\n    add(\n        /\\\\k<([\\w$]+)>/,\n        function(match) {\n            // Groups with the same name is an error, else would need `lastIndexOf`\n            var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1],\n                endIndex = match.index + match[0].length;\n            if (!index || index > this.captureNames.length) {\n                throw new SyntaxError('Backreference to undefined group ' + match[0]);\n            }\n            // Keep backreferences separate from subsequent literal numbers\n            return '\\\\' + index + (\n                endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?\n                    '' : '(?:)'\n            );\n        },\n        {leadChar: '\\\\'}\n    );\n\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n    add(\n        /\\\\(\\d+)/,\n        function(match, scope) {\n            if (\n                !(\n                    scope === defaultScope &&\n                    /^[1-9]/.test(match[1]) &&\n                    +match[1] <= this.captureNames.length\n                ) &&\n                match[1] !== '0'\n            ) {\n                throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +\n                    match[0]);\n            }\n            return match[0];\n        },\n        {\n            scope: 'all',\n            leadChar: '\\\\'\n        }\n    );\n\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n    add(\n        /\\(\\?P?<([\\w$]+)>/,\n        function(match) {\n            // Disallow bare integers as names because named backreferences are added to match\n            // arrays and therefore numeric properties may lead to incorrect lookups\n            if (!isNaN(match[1])) {\n                throw new SyntaxError('Cannot use integer as capture name ' + match[0]);\n            }\n            if (match[1] === 'length' || match[1] === '__proto__') {\n                throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);\n            }\n            if (indexOf(this.captureNames, match[1]) > -1) {\n                throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);\n            }\n            this.captureNames.push(match[1]);\n            this.hasNamedCapture = true;\n            return '(';\n        },\n        {leadChar: '('}\n    );\n\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n    add(\n        /\\((?!\\?)/,\n        function(match, scope, flags) {\n            if (flags.indexOf('n') > -1) {\n                return '(?:';\n            }\n            this.captureNames.push(null);\n            return '(';\n        },\n        {\n            optionalFlags: 'n',\n            leadChar: '('\n        }\n    );\n\n/* ==============================\n * Expose XRegExp\n * ============================== */\n\n    return self;\n\n}());\n\n/*!\n * XRegExp.build 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n * Inspired by Lea Verou's RegExp.create <http://lea.verou.me/>\n */\n\n(function(XRegExp) {\n    'use strict';\n\n    var REGEX_DATA = 'xregexp',\n        subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*]/g,\n        parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g');\n\n/**\n * Strips a leading `^` and trailing unescaped `$`, if both are present.\n *\n * @private\n * @param {String} pattern Pattern to process.\n * @returns {String} Pattern with edge anchors removed.\n */\n    function deanchor(pattern) {\n        var leadingAnchor = /^\\^/,\n            trailingAnchor = /\\$$/;\n\n        // Ensure that the trailing `$` isn't escaped\n        if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))) {\n            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\n        }\n\n        return pattern;\n    }\n\n/**\n * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\n *\n * @private\n * @param {String|RegExp} value Value to convert.\n * @returns {RegExp} XRegExp object with XRegExp syntax applied.\n */\n    function asXRegExp(value) {\n        return XRegExp.isRegExp(value) ?\n            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?\n                // Don't recompile, to preserve capture names\n                value :\n                // Recompile as XRegExp\n                XRegExp(value.source)\n            ) :\n            // Compile string as XRegExp\n            XRegExp(value);\n    }\n\n/**\n * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in the\n * outer pattern and provided subpatterns are automatically renumbered to work correctly. Native\n * flags used by provided subpatterns are ignored in favor of the `flags` argument.\n *\n * @memberOf XRegExp\n * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\n *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\n *   character classes.\n * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\n *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Regex with interpolated subpatterns.\n * @example\n *\n * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\n *     h12: /1[0-2]|0?[1-9]/,\n *     h24: /2[0-3]|[01][0-9]/\n *   }, 'x'),\n *   minutes: /^[0-5][0-9]$/\n * });\n * time.test('10:59'); // -> true\n * XRegExp.exec('10:59', time).minutes; // -> '59'\n */\n    XRegExp.build = function(pattern, subs, flags) {\n        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern),\n            data = {},\n            numCaps = 0, // 'Caps' is short for captures\n            numPriorCaps,\n            numOuterCaps = 0,\n            outerCapsMap = [0],\n            outerCapNames,\n            sub,\n            p;\n\n        // Add flags within a leading mode modifier to the overall pattern's flags\n        if (inlineFlags) {\n            flags = flags || '';\n            inlineFlags[1].replace(/./g, function(flag) {\n                // Don't add duplicates\n                flags += (flags.indexOf(flag) > -1 ? '' : flag);\n            });\n        }\n\n        for (p in subs) {\n            if (subs.hasOwnProperty(p)) {\n                // Passing to XRegExp enables extended syntax and ensures independent validity,\n                // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For\n                // subpatterns provided as native regexes, it dies on octals and adds the property\n                // used to hold extended regex instance data, for simplicity\n                sub = asXRegExp(subs[p]);\n                data[p] = {\n                    // Deanchoring allows embedding independently useful anchored regexes. If you\n                    // really need to keep your anchors, double them (i.e., `^^...$$`)\n                    pattern: deanchor(sub.source),\n                    names: sub[REGEX_DATA].captureNames || []\n                };\n            }\n        }\n\n        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\n        // helps keep this simple. Named captures will be put back\n        pattern = asXRegExp(pattern);\n        outerCapNames = pattern[REGEX_DATA].captureNames || [];\n        pattern = pattern.source.replace(parts, function($0, $1, $2, $3, $4) {\n            var subName = $1 || $2, capName, intro;\n            // Named subpattern\n            if (subName) {\n                if (!data.hasOwnProperty(subName)) {\n                    throw new ReferenceError('Undefined property ' + $0);\n                }\n                // Named subpattern was wrapped in a capturing group\n                if ($1) {\n                    capName = outerCapNames[numOuterCaps];\n                    outerCapsMap[++numOuterCaps] = ++numCaps;\n                    // If it's a named group, preserve the name. Otherwise, use the subpattern name\n                    // as the capture name\n                    intro = '(?<' + (capName || subName) + '>';\n                } else {\n                    intro = '(?:';\n                }\n                numPriorCaps = numCaps;\n                return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {\n                    // Capturing group\n                    if (paren) {\n                        capName = data[subName].names[numCaps - numPriorCaps];\n                        ++numCaps;\n                        // If the current capture has a name, preserve the name\n                        if (capName) {\n                            return '(?<' + capName + '>';\n                        }\n                    // Backreference\n                    } else if (backref) {\n                        // Rewrite the backreference\n                        return '\\\\' + (+backref + numPriorCaps);\n                    }\n                    return match;\n                }) + ')';\n            }\n            // Capturing group\n            if ($3) {\n                capName = outerCapNames[numOuterCaps];\n                outerCapsMap[++numOuterCaps] = ++numCaps;\n                // If the current capture has a name, preserve the name\n                if (capName) {\n                    return '(?<' + capName + '>';\n                }\n            // Backreference\n            } else if ($4) {\n                // Rewrite the backreference\n                return '\\\\' + outerCapsMap[+$4];\n            }\n            return $0;\n        });\n\n        return XRegExp(pattern, flags);\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp.matchRecursive 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2009-2015 MIT License\n */\n\n(function(XRegExp) {\n    'use strict';\n\n/**\n * Returns a match detail object composed of the provided values.\n *\n * @private\n */\n    function row(name, value, start, end) {\n        return {\n            name: name,\n            value: value,\n            start: start,\n            end: end\n        };\n    }\n\n/**\n * Returns an array of match strings between outermost left and right delimiters, or an array of\n * objects with detailed match parts and position data. An error is thrown if delimiters are\n * unbalanced within the data.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {String} left Left delimiter as an XRegExp pattern.\n * @param {String} right Right delimiter as an XRegExp pattern.\n * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\n * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\n * @returns {Array} Array of matches, or an empty array.\n * @example\n *\n * // Basic usage\n * var str = '(t((e))s)t()(ing)';\n * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n * // -> ['t((e))s', '', 'ing']\n *\n * // Extended information mode with valueNames\n * str = 'Here is <div> <div>an</div></div> example';\n * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n *   valueNames: ['between', 'left', 'match', 'right']\n * });\n * // -> [\n * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\n * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\n * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n * // {name: 'right',   value: '</div>',         start: 27, end: 33},\n * // {name: 'between', value: ' example',       start: 33, end: 41}\n * // ]\n *\n * // Omitting unneeded parts with null valueNames, and using escapeChar\n * str = '...{1}\\\\{{function(x,y){return y+x;}}';\n * XRegExp.matchRecursive(str, '{', '}', 'g', {\n *   valueNames: ['literal', null, 'value', null],\n *   escapeChar: '\\\\'\n * });\n * // -> [\n * // {name: 'literal', value: '...', start: 0, end: 3},\n * // {name: 'value',   value: '1',   start: 4, end: 5},\n * // {name: 'literal', value: '\\\\{', start: 6, end: 8},\n * // {name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\n * // ]\n *\n * // Sticky mode via flag y\n * str = '<1><<<2>>><3>4<5>';\n * XRegExp.matchRecursive(str, '<', '>', 'gy');\n * // -> ['1', '<<2>>', '3']\n */\n    XRegExp.matchRecursive = function(str, left, right, flags, options) {\n        flags = flags || '';\n        options = options || {};\n        var global = flags.indexOf('g') > -1,\n            sticky = flags.indexOf('y') > -1,\n            // Flag `y` is controlled internally\n            basicFlags = flags.replace(/y/g, ''),\n            escapeChar = options.escapeChar,\n            vN = options.valueNames,\n            output = [],\n            openTokens = 0,\n            delimStart = 0,\n            delimEnd = 0,\n            lastOuterEnd = 0,\n            outerStart,\n            innerStart,\n            leftMatch,\n            rightMatch,\n            esc;\n        left = XRegExp(left, basicFlags);\n        right = XRegExp(right, basicFlags);\n\n        if (escapeChar) {\n            if (escapeChar.length > 1) {\n                throw new Error('Cannot use more than one escape character');\n            }\n            escapeChar = XRegExp.escape(escapeChar);\n            // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`\n            esc = new RegExp(\n                '(?:' + escapeChar + '[\\\\S\\\\s]|(?:(?!' +\n                    XRegExp.union([left, right]).source +\n                    ')[^' + escapeChar + '])+)+',\n                // Flags `gy` not needed here\n                flags.replace(/[^imu]+/g, '')\n            );\n        }\n\n        while (true) {\n            // If using an escape character, advance to the delimiter's next starting position,\n            // skipping any escaped characters in between\n            if (escapeChar) {\n                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\n            }\n            leftMatch = XRegExp.exec(str, left, delimEnd);\n            rightMatch = XRegExp.exec(str, right, delimEnd);\n            // Keep the leftmost match only\n            if (leftMatch && rightMatch) {\n                if (leftMatch.index <= rightMatch.index) {\n                    rightMatch = null;\n                } else {\n                    leftMatch = null;\n                }\n            }\n            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\n            // LM | RM | OT | Result\n            // 1  | 0  | 1  | loop\n            // 1  | 0  | 0  | loop\n            // 0  | 1  | 1  | loop\n            // 0  | 1  | 0  | throw\n            // 0  | 0  | 1  | throw\n            // 0  | 0  | 0  | break\n            // The paths above don't include the sticky mode special case. The loop ends after the\n            // first completed match if not `global`.\n            if (leftMatch || rightMatch) {\n                delimStart = (leftMatch || rightMatch).index;\n                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\n            } else if (!openTokens) {\n                break;\n            }\n            if (sticky && !openTokens && delimStart > lastOuterEnd) {\n                break;\n            }\n            if (leftMatch) {\n                if (!openTokens) {\n                    outerStart = delimStart;\n                    innerStart = delimEnd;\n                }\n                ++openTokens;\n            } else if (rightMatch && openTokens) {\n                if (!--openTokens) {\n                    if (vN) {\n                        if (vN[0] && outerStart > lastOuterEnd) {\n                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\n                        }\n                        if (vN[1]) {\n                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\n                        }\n                        if (vN[2]) {\n                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\n                        }\n                        if (vN[3]) {\n                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\n                        }\n                    } else {\n                        output.push(str.slice(innerStart, delimStart));\n                    }\n                    lastOuterEnd = delimEnd;\n                    if (!global) {\n                        break;\n                    }\n                }\n            } else {\n                throw new Error('Unbalanced delimiter found in string');\n            }\n            // If the delimiter matched an empty string, avoid an infinite loop\n            if (delimStart === delimEnd) {\n                ++delimEnd;\n            }\n        }\n\n        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\n            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\n        }\n\n        return output;\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Base 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2008-2015 MIT License\n */\n\n/**\n * Adds base support for Unicode matching:\n * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the brackets\n *   for token names that are a single letter (e.g. `\\pL` or `PL`).\n * - Adds flag A (astral), which enables 21-bit Unicode support.\n * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n *\n * Unicode Base relies on externally provided Unicode character data. Official addons are available\n * to provide data for Unicode categories, scripts, blocks, and properties.\n *\n * @requires XRegExp\n */\n(function(XRegExp) {\n    'use strict';\n\n// Storage for Unicode data\n    var unicode = {};\n\n/* ==============================\n * Private functions\n * ============================== */\n\n// Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n    function normalize(name) {\n        return name.replace(/[- _]+/g, '').toLowerCase();\n    }\n\n// Adds leading zeros if shorter than four characters\n    function pad4(str) {\n        while (str.length < 4) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n// Converts a hexadecimal number to decimal\n    function dec(hex) {\n        return parseInt(hex, 16);\n    }\n\n// Converts a decimal number to hexadecimal\n    function hex(dec) {\n        return parseInt(dec, 10).toString(16);\n    }\n\n// Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n    function charCode(chr) {\n        var esc = /^\\\\[xu](.+)/.exec(chr);\n        return esc ?\n            dec(esc[1]) :\n            chr.charCodeAt(chr.charAt(0) === '\\\\' ? 1 : 0);\n    }\n\n// Inverts a list of ordered BMP characters and ranges\n    function invertBmp(range) {\n        var output = '',\n            lastEnd = -1,\n            start;\n        XRegExp.forEach(range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function(m) {\n            start = charCode(m[1]);\n            if (start > (lastEnd + 1)) {\n                output += '\\\\u' + pad4(hex(lastEnd + 1));\n                if (start > (lastEnd + 2)) {\n                    output += '-\\\\u' + pad4(hex(start - 1));\n                }\n            }\n            lastEnd = charCode(m[2] || m[1]);\n        });\n        if (lastEnd < 0xFFFF) {\n            output += '\\\\u' + pad4(hex(lastEnd + 1));\n            if (lastEnd < 0xFFFE) {\n                output += '-\\\\uFFFF';\n            }\n        }\n        return output;\n    }\n\n// Generates an inverted BMP range on first use\n    function cacheInvertedBmp(slug) {\n        var prop = 'b!';\n        return unicode[slug][prop] || (\n            unicode[slug][prop] = invertBmp(unicode[slug].bmp)\n        );\n    }\n\n// Combines and optionally negates BMP and astral data\n    function buildAstral(slug, isNegated) {\n        var item = unicode[slug],\n            combined = '';\n        if (item.bmp && !item.isBmpLast) {\n            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');\n        }\n        if (item.astral) {\n            combined += item.astral;\n        }\n        if (item.isBmpLast && item.bmp) {\n            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';\n        }\n        // Astral Unicode tokens always match a code point, never a code unit\n        return isNegated ?\n            '(?:(?!' + combined + ')(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))' :\n            '(?:' + combined + ')';\n    }\n\n// Builds a complete astral pattern on first use\n    function cacheAstral(slug, isNegated) {\n        var prop = isNegated ? 'a!' : 'a=';\n        return unicode[slug][prop] || (\n            unicode[slug][prop] = buildAstral(slug, isNegated)\n        );\n    }\n\n/* ==============================\n * Core functionality\n * ============================== */\n\n/*\n * Add Unicode token syntax: \\p{..}, \\P{..}, \\p{^..}. Also add astral mode (flag A).\n */\n    XRegExp.addToken(\n        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n        /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,\n        function(match, scope, flags) {\n            var ERR_DOUBLE_NEG = 'Invalid double negation ',\n                ERR_UNKNOWN_NAME = 'Unknown Unicode token ',\n                ERR_UNKNOWN_REF = 'Unicode token missing data ',\n                ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ',\n                ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes',\n                // Negated via \\P{..} or \\p{^..}\n                isNegated = match[1] === 'P' || !!match[2],\n                // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n                isAstralMode = flags.indexOf('A') > -1,\n                // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n                slug = normalize(match[4] || match[3]),\n                // Token data object\n                item = unicode[slug];\n\n            if (match[1] === 'P' && match[2]) {\n                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n            }\n            if (!unicode.hasOwnProperty(slug)) {\n                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n            }\n\n            // Switch to the negated form of the referenced Unicode token\n            if (item.inverseOf) {\n                slug = normalize(item.inverseOf);\n                if (!unicode.hasOwnProperty(slug)) {\n                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);\n                }\n                item = unicode[slug];\n                isNegated = !isNegated;\n            }\n\n            if (!(item.bmp || isAstralMode)) {\n                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n            }\n            if (isAstralMode) {\n                if (scope === 'class') {\n                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n                }\n\n                return cacheAstral(slug, isNegated);\n            }\n\n            return scope === 'class' ?\n                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :\n                (isNegated ? '[^' : '[') + item.bmp + ']';\n        },\n        {\n            scope: 'all',\n            optionalFlags: 'A',\n            leadChar: '\\\\'\n        }\n    );\n\n/**\n * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n *\n * @memberOf XRegExp\n * @param {Array} data Objects with named character ranges. Each object may have properties `name`,\n *   `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are optional, although\n *   one of `bmp` or `astral` is required (unless `inverseOf` is set). If `astral` is absent, the\n *   `bmp` data is used for BMP and astral modes. If `bmp` is absent, the name errors in BMP mode\n *   but works in astral mode. If both `bmp` and `astral` are provided, the `bmp` data only is used\n *   in BMP mode, and the combination of `bmp` and `astral` data is used in astral mode.\n *   `isBmpLast` is needed when a token matches orphan high surrogates *and* uses surrogate pairs\n *   to match astral code points. The `bmp` and `astral` data should be a combination of literal\n *   characters and `\\xHH` or `\\uHHHH` escape sequences, with hyphens to create ranges. Any regex\n *   metacharacters in the data should be escaped, apart from range-creating hyphens. The `astral`\n *   data can additionally use character classes and alternation, and should use surrogate pairs to\n *   represent astral code points. `inverseOf` can be used to avoid duplicating character data if a\n *   Unicode token is defined as the exact inverse of another token.\n * @example\n *\n * // Basic use\n * XRegExp.addUnicodeData([{\n *   name: 'XDigit',\n *   alias: 'Hexadecimal',\n *   bmp: '0-9A-Fa-f'\n * }]);\n * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n */\n    XRegExp.addUnicodeData = function(data) {\n        var ERR_NO_NAME = 'Unicode token requires name',\n            ERR_NO_DATA = 'Unicode token has no character data ',\n            item,\n            i;\n\n        for (i = 0; i < data.length; ++i) {\n            item = data[i];\n            if (!item.name) {\n                throw new Error(ERR_NO_NAME);\n            }\n            if (!(item.inverseOf || item.bmp || item.astral)) {\n                throw new Error(ERR_NO_DATA + item.name);\n            }\n            unicode[normalize(item.name)] = item;\n            if (item.alias) {\n                unicode[normalize(item.alias)] = item;\n            }\n        }\n\n        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n        // flags might now produce different results\n        XRegExp.cache.flush('patterns');\n    };\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Blocks 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g., `\\p{InBasicLatin}`.\n * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'InAegean_Numbers',\n            astral: '\\uD800[\\uDD00-\\uDD3F]'\n        },\n        {\n            name: 'InAhom',\n            astral: '\\uD805[\\uDF00-\\uDF3F]'\n        },\n        {\n            name: 'InAlchemical_Symbols',\n            astral: '\\uD83D[\\uDF00-\\uDF7F]'\n        },\n        {\n            name: 'InAlphabetic_Presentation_Forms',\n            bmp: '\\uFB00-\\uFB4F'\n        },\n        {\n            name: 'InAnatolian_Hieroglyphs',\n            astral: '\\uD811[\\uDC00-\\uDE7F]'\n        },\n        {\n            name: 'InAncient_Greek_Musical_Notation',\n            astral: '\\uD834[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InAncient_Greek_Numbers',\n            astral: '\\uD800[\\uDD40-\\uDD8F]'\n        },\n        {\n            name: 'InAncient_Symbols',\n            astral: '\\uD800[\\uDD90-\\uDDCF]'\n        },\n        {\n            name: 'InArabic',\n            bmp: '\\u0600-\\u06FF'\n        },\n        {\n            name: 'InArabic_Extended_A',\n            bmp: '\\u08A0-\\u08FF'\n        },\n        {\n            name: 'InArabic_Mathematical_Alphabetic_Symbols',\n            astral: '\\uD83B[\\uDE00-\\uDEFF]'\n        },\n        {\n            name: 'InArabic_Presentation_Forms_A',\n            bmp: '\\uFB50-\\uFDFF'\n        },\n        {\n            name: 'InArabic_Presentation_Forms_B',\n            bmp: '\\uFE70-\\uFEFF'\n        },\n        {\n            name: 'InArabic_Supplement',\n            bmp: '\\u0750-\\u077F'\n        },\n        {\n            name: 'InArmenian',\n            bmp: '\\u0530-\\u058F'\n        },\n        {\n            name: 'InArrows',\n            bmp: '\\u2190-\\u21FF'\n        },\n        {\n            name: 'InAvestan',\n            astral: '\\uD802[\\uDF00-\\uDF3F]'\n        },\n        {\n            name: 'InBalinese',\n            bmp: '\\u1B00-\\u1B7F'\n        },\n        {\n            name: 'InBamum',\n            bmp: '\\uA6A0-\\uA6FF'\n        },\n        {\n            name: 'InBamum_Supplement',\n            astral: '\\uD81A[\\uDC00-\\uDE3F]'\n        },\n        {\n            name: 'InBasic_Latin',\n            bmp: '\\0-\\x7F'\n        },\n        {\n            name: 'InBassa_Vah',\n            astral: '\\uD81A[\\uDED0-\\uDEFF]'\n        },\n        {\n            name: 'InBatak',\n            bmp: '\\u1BC0-\\u1BFF'\n        },\n        {\n            name: 'InBengali',\n            bmp: '\\u0980-\\u09FF'\n        },\n        {\n            name: 'InBlock_Elements',\n            bmp: '\\u2580-\\u259F'\n        },\n        {\n            name: 'InBopomofo',\n            bmp: '\\u3100-\\u312F'\n        },\n        {\n            name: 'InBopomofo_Extended',\n            bmp: '\\u31A0-\\u31BF'\n        },\n        {\n            name: 'InBox_Drawing',\n            bmp: '\\u2500-\\u257F'\n        },\n        {\n            name: 'InBrahmi',\n            astral: '\\uD804[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InBraille_Patterns',\n            bmp: '\\u2800-\\u28FF'\n        },\n        {\n            name: 'InBuginese',\n            bmp: '\\u1A00-\\u1A1F'\n        },\n        {\n            name: 'InBuhid',\n            bmp: '\\u1740-\\u175F'\n        },\n        {\n            name: 'InByzantine_Musical_Symbols',\n            astral: '\\uD834[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InCJK_Compatibility',\n            bmp: '\\u3300-\\u33FF'\n        },\n        {\n            name: 'InCJK_Compatibility_Forms',\n            bmp: '\\uFE30-\\uFE4F'\n        },\n        {\n            name: 'InCJK_Compatibility_Ideographs',\n            bmp: '\\uF900-\\uFAFF'\n        },\n        {\n            name: 'InCJK_Compatibility_Ideographs_Supplement',\n            astral: '\\uD87E[\\uDC00-\\uDE1F]'\n        },\n        {\n            name: 'InCJK_Radicals_Supplement',\n            bmp: '\\u2E80-\\u2EFF'\n        },\n        {\n            name: 'InCJK_Strokes',\n            bmp: '\\u31C0-\\u31EF'\n        },\n        {\n            name: 'InCJK_Symbols_and_Punctuation',\n            bmp: '\\u3000-\\u303F'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs',\n            bmp: '\\u4E00-\\u9FFF'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_A',\n            bmp: '\\u3400-\\u4DBF'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_B',\n            astral: '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_C',\n            astral: '\\uD86D[\\uDC00-\\uDF3F]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD869[\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_D',\n            astral: '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'\n        },\n        {\n            name: 'InCJK_Unified_Ideographs_Extension_E',\n            astral: '[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]|\\uD86E[\\uDC20-\\uDFFF]'\n        },\n        {\n            name: 'InCarian',\n            astral: '\\uD800[\\uDEA0-\\uDEDF]'\n        },\n        {\n            name: 'InCaucasian_Albanian',\n            astral: '\\uD801[\\uDD30-\\uDD6F]'\n        },\n        {\n            name: 'InChakma',\n            astral: '\\uD804[\\uDD00-\\uDD4F]'\n        },\n        {\n            name: 'InCham',\n            bmp: '\\uAA00-\\uAA5F'\n        },\n        {\n            name: 'InCherokee',\n            bmp: '\\u13A0-\\u13FF'\n        },\n        {\n            name: 'InCherokee_Supplement',\n            bmp: '\\uAB70-\\uABBF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks',\n            bmp: '\\u0300-\\u036F'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_Extended',\n            bmp: '\\u1AB0-\\u1AFF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_Supplement',\n            bmp: '\\u1DC0-\\u1DFF'\n        },\n        {\n            name: 'InCombining_Diacritical_Marks_for_Symbols',\n            bmp: '\\u20D0-\\u20FF'\n        },\n        {\n            name: 'InCombining_Half_Marks',\n            bmp: '\\uFE20-\\uFE2F'\n        },\n        {\n            name: 'InCommon_Indic_Number_Forms',\n            bmp: '\\uA830-\\uA83F'\n        },\n        {\n            name: 'InControl_Pictures',\n            bmp: '\\u2400-\\u243F'\n        },\n        {\n            name: 'InCoptic',\n            bmp: '\\u2C80-\\u2CFF'\n        },\n        {\n            name: 'InCoptic_Epact_Numbers',\n            astral: '\\uD800[\\uDEE0-\\uDEFF]'\n        },\n        {\n            name: 'InCounting_Rod_Numerals',\n            astral: '\\uD834[\\uDF60-\\uDF7F]'\n        },\n        {\n            name: 'InCuneiform',\n            astral: '\\uD808[\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InCuneiform_Numbers_and_Punctuation',\n            astral: '\\uD809[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InCurrency_Symbols',\n            bmp: '\\u20A0-\\u20CF'\n        },\n        {\n            name: 'InCypriot_Syllabary',\n            astral: '\\uD802[\\uDC00-\\uDC3F]'\n        },\n        {\n            name: 'InCyrillic',\n            bmp: '\\u0400-\\u04FF'\n        },\n        {\n            name: 'InCyrillic_Extended_A',\n            bmp: '\\u2DE0-\\u2DFF'\n        },\n        {\n            name: 'InCyrillic_Extended_B',\n            bmp: '\\uA640-\\uA69F'\n        },\n        {\n            name: 'InCyrillic_Supplement',\n            bmp: '\\u0500-\\u052F'\n        },\n        {\n            name: 'InDeseret',\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'InDevanagari',\n            bmp: '\\u0900-\\u097F'\n        },\n        {\n            name: 'InDevanagari_Extended',\n            bmp: '\\uA8E0-\\uA8FF'\n        },\n        {\n            name: 'InDingbats',\n            bmp: '\\u2700-\\u27BF'\n        },\n        {\n            name: 'InDomino_Tiles',\n            astral: '\\uD83C[\\uDC30-\\uDC9F]'\n        },\n        {\n            name: 'InDuployan',\n            astral: '\\uD82F[\\uDC00-\\uDC9F]'\n        },\n        {\n            name: 'InEarly_Dynastic_Cuneiform',\n            astral: '\\uD809[\\uDC80-\\uDD4F]'\n        },\n        {\n            name: 'InEgyptian_Hieroglyphs',\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'\n        },\n        {\n            name: 'InElbasan',\n            astral: '\\uD801[\\uDD00-\\uDD2F]'\n        },\n        {\n            name: 'InEmoticons',\n            astral: '\\uD83D[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InEnclosed_Alphanumeric_Supplement',\n            astral: '\\uD83C[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InEnclosed_Alphanumerics',\n            bmp: '\\u2460-\\u24FF'\n        },\n        {\n            name: 'InEnclosed_CJK_Letters_and_Months',\n            bmp: '\\u3200-\\u32FF'\n        },\n        {\n            name: 'InEnclosed_Ideographic_Supplement',\n            astral: '\\uD83C[\\uDE00-\\uDEFF]'\n        },\n        {\n            name: 'InEthiopic',\n            bmp: '\\u1200-\\u137F'\n        },\n        {\n            name: 'InEthiopic_Extended',\n            bmp: '\\u2D80-\\u2DDF'\n        },\n        {\n            name: 'InEthiopic_Extended_A',\n            bmp: '\\uAB00-\\uAB2F'\n        },\n        {\n            name: 'InEthiopic_Supplement',\n            bmp: '\\u1380-\\u139F'\n        },\n        {\n            name: 'InGeneral_Punctuation',\n            bmp: '\\u2000-\\u206F'\n        },\n        {\n            name: 'InGeometric_Shapes',\n            bmp: '\\u25A0-\\u25FF'\n        },\n        {\n            name: 'InGeometric_Shapes_Extended',\n            astral: '\\uD83D[\\uDF80-\\uDFFF]'\n        },\n        {\n            name: 'InGeorgian',\n            bmp: '\\u10A0-\\u10FF'\n        },\n        {\n            name: 'InGeorgian_Supplement',\n            bmp: '\\u2D00-\\u2D2F'\n        },\n        {\n            name: 'InGlagolitic',\n            bmp: '\\u2C00-\\u2C5F'\n        },\n        {\n            name: 'InGothic',\n            astral: '\\uD800[\\uDF30-\\uDF4F]'\n        },\n        {\n            name: 'InGrantha',\n            astral: '\\uD804[\\uDF00-\\uDF7F]'\n        },\n        {\n            name: 'InGreek_Extended',\n            bmp: '\\u1F00-\\u1FFF'\n        },\n        {\n            name: 'InGreek_and_Coptic',\n            bmp: '\\u0370-\\u03FF'\n        },\n        {\n            name: 'InGujarati',\n            bmp: '\\u0A80-\\u0AFF'\n        },\n        {\n            name: 'InGurmukhi',\n            bmp: '\\u0A00-\\u0A7F'\n        },\n        {\n            name: 'InHalfwidth_and_Fullwidth_Forms',\n            bmp: '\\uFF00-\\uFFEF'\n        },\n        {\n            name: 'InHangul_Compatibility_Jamo',\n            bmp: '\\u3130-\\u318F'\n        },\n        {\n            name: 'InHangul_Jamo',\n            bmp: '\\u1100-\\u11FF'\n        },\n        {\n            name: 'InHangul_Jamo_Extended_A',\n            bmp: '\\uA960-\\uA97F'\n        },\n        {\n            name: 'InHangul_Jamo_Extended_B',\n            bmp: '\\uD7B0-\\uD7FF'\n        },\n        {\n            name: 'InHangul_Syllables',\n            bmp: '\\uAC00-\\uD7AF'\n        },\n        {\n            name: 'InHanunoo',\n            bmp: '\\u1720-\\u173F'\n        },\n        {\n            name: 'InHatran',\n            astral: '\\uD802[\\uDCE0-\\uDCFF]'\n        },\n        {\n            name: 'InHebrew',\n            bmp: '\\u0590-\\u05FF'\n        },\n        {\n            name: 'InHigh_Private_Use_Surrogates',\n            bmp: '\\uDB80-\\uDBFF'\n        },\n        {\n            name: 'InHigh_Surrogates',\n            bmp: '\\uD800-\\uDB7F'\n        },\n        {\n            name: 'InHiragana',\n            bmp: '\\u3040-\\u309F'\n        },\n        {\n            name: 'InIPA_Extensions',\n            bmp: '\\u0250-\\u02AF'\n        },\n        {\n            name: 'InIdeographic_Description_Characters',\n            bmp: '\\u2FF0-\\u2FFF'\n        },\n        {\n            name: 'InImperial_Aramaic',\n            astral: '\\uD802[\\uDC40-\\uDC5F]'\n        },\n        {\n            name: 'InInscriptional_Pahlavi',\n            astral: '\\uD802[\\uDF60-\\uDF7F]'\n        },\n        {\n            name: 'InInscriptional_Parthian',\n            astral: '\\uD802[\\uDF40-\\uDF5F]'\n        },\n        {\n            name: 'InJavanese',\n            bmp: '\\uA980-\\uA9DF'\n        },\n        {\n            name: 'InKaithi',\n            astral: '\\uD804[\\uDC80-\\uDCCF]'\n        },\n        {\n            name: 'InKana_Supplement',\n            astral: '\\uD82C[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InKanbun',\n            bmp: '\\u3190-\\u319F'\n        },\n        {\n            name: 'InKangxi_Radicals',\n            bmp: '\\u2F00-\\u2FDF'\n        },\n        {\n            name: 'InKannada',\n            bmp: '\\u0C80-\\u0CFF'\n        },\n        {\n            name: 'InKatakana',\n            bmp: '\\u30A0-\\u30FF'\n        },\n        {\n            name: 'InKatakana_Phonetic_Extensions',\n            bmp: '\\u31F0-\\u31FF'\n        },\n        {\n            name: 'InKayah_Li',\n            bmp: '\\uA900-\\uA92F'\n        },\n        {\n            name: 'InKharoshthi',\n            astral: '\\uD802[\\uDE00-\\uDE5F]'\n        },\n        {\n            name: 'InKhmer',\n            bmp: '\\u1780-\\u17FF'\n        },\n        {\n            name: 'InKhmer_Symbols',\n            bmp: '\\u19E0-\\u19FF'\n        },\n        {\n            name: 'InKhojki',\n            astral: '\\uD804[\\uDE00-\\uDE4F]'\n        },\n        {\n            name: 'InKhudawadi',\n            astral: '\\uD804[\\uDEB0-\\uDEFF]'\n        },\n        {\n            name: 'InLao',\n            bmp: '\\u0E80-\\u0EFF'\n        },\n        {\n            name: 'InLatin_Extended_Additional',\n            bmp: '\\u1E00-\\u1EFF'\n        },\n        {\n            name: 'InLatin_Extended_A',\n            bmp: '\\u0100-\\u017F'\n        },\n        {\n            name: 'InLatin_Extended_B',\n            bmp: '\\u0180-\\u024F'\n        },\n        {\n            name: 'InLatin_Extended_C',\n            bmp: '\\u2C60-\\u2C7F'\n        },\n        {\n            name: 'InLatin_Extended_D',\n            bmp: '\\uA720-\\uA7FF'\n        },\n        {\n            name: 'InLatin_Extended_E',\n            bmp: '\\uAB30-\\uAB6F'\n        },\n        {\n            name: 'InLatin_1_Supplement',\n            bmp: '\\x80-\\xFF'\n        },\n        {\n            name: 'InLepcha',\n            bmp: '\\u1C00-\\u1C4F'\n        },\n        {\n            name: 'InLetterlike_Symbols',\n            bmp: '\\u2100-\\u214F'\n        },\n        {\n            name: 'InLimbu',\n            bmp: '\\u1900-\\u194F'\n        },\n        {\n            name: 'InLinear_A',\n            astral: '\\uD801[\\uDE00-\\uDF7F]'\n        },\n        {\n            name: 'InLinear_B_Ideograms',\n            astral: '\\uD800[\\uDC80-\\uDCFF]'\n        },\n        {\n            name: 'InLinear_B_Syllabary',\n            astral: '\\uD800[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InLisu',\n            bmp: '\\uA4D0-\\uA4FF'\n        },\n        {\n            name: 'InLow_Surrogates',\n            bmp: '\\uDC00-\\uDFFF'\n        },\n        {\n            name: 'InLycian',\n            astral: '\\uD800[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'InLydian',\n            astral: '\\uD802[\\uDD20-\\uDD3F]'\n        },\n        {\n            name: 'InMahajani',\n            astral: '\\uD804[\\uDD50-\\uDD7F]'\n        },\n        {\n            name: 'InMahjong_Tiles',\n            astral: '\\uD83C[\\uDC00-\\uDC2F]'\n        },\n        {\n            name: 'InMalayalam',\n            bmp: '\\u0D00-\\u0D7F'\n        },\n        {\n            name: 'InMandaic',\n            bmp: '\\u0840-\\u085F'\n        },\n        {\n            name: 'InManichaean',\n            astral: '\\uD802[\\uDEC0-\\uDEFF]'\n        },\n        {\n            name: 'InMathematical_Alphanumeric_Symbols',\n            astral: '\\uD835[\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InMathematical_Operators',\n            bmp: '\\u2200-\\u22FF'\n        },\n        {\n            name: 'InMeetei_Mayek',\n            bmp: '\\uABC0-\\uABFF'\n        },\n        {\n            name: 'InMeetei_Mayek_Extensions',\n            bmp: '\\uAAE0-\\uAAFF'\n        },\n        {\n            name: 'InMende_Kikakui',\n            astral: '\\uD83A[\\uDC00-\\uDCDF]'\n        },\n        {\n            name: 'InMeroitic_Cursive',\n            astral: '\\uD802[\\uDDA0-\\uDDFF]'\n        },\n        {\n            name: 'InMeroitic_Hieroglyphs',\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\n        },\n        {\n            name: 'InMiao',\n            astral: '\\uD81B[\\uDF00-\\uDF9F]'\n        },\n        {\n            name: 'InMiscellaneous_Mathematical_Symbols_A',\n            bmp: '\\u27C0-\\u27EF'\n        },\n        {\n            name: 'InMiscellaneous_Mathematical_Symbols_B',\n            bmp: '\\u2980-\\u29FF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols',\n            bmp: '\\u2600-\\u26FF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols_and_Arrows',\n            bmp: '\\u2B00-\\u2BFF'\n        },\n        {\n            name: 'InMiscellaneous_Symbols_and_Pictographs',\n            astral: '\\uD83D[\\uDC00-\\uDDFF]|\\uD83C[\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'InMiscellaneous_Technical',\n            bmp: '\\u2300-\\u23FF'\n        },\n        {\n            name: 'InModi',\n            astral: '\\uD805[\\uDE00-\\uDE5F]'\n        },\n        {\n            name: 'InModifier_Tone_Letters',\n            bmp: '\\uA700-\\uA71F'\n        },\n        {\n            name: 'InMongolian',\n            bmp: '\\u1800-\\u18AF'\n        },\n        {\n            name: 'InMro',\n            astral: '\\uD81A[\\uDE40-\\uDE6F]'\n        },\n        {\n            name: 'InMultani',\n            astral: '\\uD804[\\uDE80-\\uDEAF]'\n        },\n        {\n            name: 'InMusical_Symbols',\n            astral: '\\uD834[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InMyanmar',\n            bmp: '\\u1000-\\u109F'\n        },\n        {\n            name: 'InMyanmar_Extended_A',\n            bmp: '\\uAA60-\\uAA7F'\n        },\n        {\n            name: 'InMyanmar_Extended_B',\n            bmp: '\\uA9E0-\\uA9FF'\n        },\n        {\n            name: 'InNKo',\n            bmp: '\\u07C0-\\u07FF'\n        },\n        {\n            name: 'InNabataean',\n            astral: '\\uD802[\\uDC80-\\uDCAF]'\n        },\n        {\n            name: 'InNew_Tai_Lue',\n            bmp: '\\u1980-\\u19DF'\n        },\n        {\n            name: 'InNumber_Forms',\n            bmp: '\\u2150-\\u218F'\n        },\n        {\n            name: 'InOgham',\n            bmp: '\\u1680-\\u169F'\n        },\n        {\n            name: 'InOl_Chiki',\n            bmp: '\\u1C50-\\u1C7F'\n        },\n        {\n            name: 'InOld_Hungarian',\n            astral: '\\uD803[\\uDC80-\\uDCFF]'\n        },\n        {\n            name: 'InOld_Italic',\n            astral: '\\uD800[\\uDF00-\\uDF2F]'\n        },\n        {\n            name: 'InOld_North_Arabian',\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'InOld_Permic',\n            astral: '\\uD800[\\uDF50-\\uDF7F]'\n        },\n        {\n            name: 'InOld_Persian',\n            astral: '\\uD800[\\uDFA0-\\uDFDF]'\n        },\n        {\n            name: 'InOld_South_Arabian',\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'InOld_Turkic',\n            astral: '\\uD803[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'InOptical_Character_Recognition',\n            bmp: '\\u2440-\\u245F'\n        },\n        {\n            name: 'InOriya',\n            bmp: '\\u0B00-\\u0B7F'\n        },\n        {\n            name: 'InOrnamental_Dingbats',\n            astral: '\\uD83D[\\uDE50-\\uDE7F]'\n        },\n        {\n            name: 'InOsmanya',\n            astral: '\\uD801[\\uDC80-\\uDCAF]'\n        },\n        {\n            name: 'InPahawh_Hmong',\n            astral: '\\uD81A[\\uDF00-\\uDF8F]'\n        },\n        {\n            name: 'InPalmyrene',\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\n        },\n        {\n            name: 'InPau_Cin_Hau',\n            astral: '\\uD806[\\uDEC0-\\uDEFF]'\n        },\n        {\n            name: 'InPhags_pa',\n            bmp: '\\uA840-\\uA87F'\n        },\n        {\n            name: 'InPhaistos_Disc',\n            astral: '\\uD800[\\uDDD0-\\uDDFF]'\n        },\n        {\n            name: 'InPhoenician',\n            astral: '\\uD802[\\uDD00-\\uDD1F]'\n        },\n        {\n            name: 'InPhonetic_Extensions',\n            bmp: '\\u1D00-\\u1D7F'\n        },\n        {\n            name: 'InPhonetic_Extensions_Supplement',\n            bmp: '\\u1D80-\\u1DBF'\n        },\n        {\n            name: 'InPlaying_Cards',\n            astral: '\\uD83C[\\uDCA0-\\uDCFF]'\n        },\n        {\n            name: 'InPrivate_Use_Area',\n            bmp: '\\uE000-\\uF8FF'\n        },\n        {\n            name: 'InPsalter_Pahlavi',\n            astral: '\\uD802[\\uDF80-\\uDFAF]'\n        },\n        {\n            name: 'InRejang',\n            bmp: '\\uA930-\\uA95F'\n        },\n        {\n            name: 'InRumi_Numeral_Symbols',\n            astral: '\\uD803[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'InRunic',\n            bmp: '\\u16A0-\\u16FF'\n        },\n        {\n            name: 'InSamaritan',\n            bmp: '\\u0800-\\u083F'\n        },\n        {\n            name: 'InSaurashtra',\n            bmp: '\\uA880-\\uA8DF'\n        },\n        {\n            name: 'InSharada',\n            astral: '\\uD804[\\uDD80-\\uDDDF]'\n        },\n        {\n            name: 'InShavian',\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\n        },\n        {\n            name: 'InShorthand_Format_Controls',\n            astral: '\\uD82F[\\uDCA0-\\uDCAF]'\n        },\n        {\n            name: 'InSiddham',\n            astral: '\\uD805[\\uDD80-\\uDDFF]'\n        },\n        {\n            name: 'InSinhala',\n            bmp: '\\u0D80-\\u0DFF'\n        },\n        {\n            name: 'InSinhala_Archaic_Numbers',\n            astral: '\\uD804[\\uDDE0-\\uDDFF]'\n        },\n        {\n            name: 'InSmall_Form_Variants',\n            bmp: '\\uFE50-\\uFE6F'\n        },\n        {\n            name: 'InSora_Sompeng',\n            astral: '\\uD804[\\uDCD0-\\uDCFF]'\n        },\n        {\n            name: 'InSpacing_Modifier_Letters',\n            bmp: '\\u02B0-\\u02FF'\n        },\n        {\n            name: 'InSpecials',\n            bmp: '\\uFFF0-\\uFFFF'\n        },\n        {\n            name: 'InSundanese',\n            bmp: '\\u1B80-\\u1BBF'\n        },\n        {\n            name: 'InSundanese_Supplement',\n            bmp: '\\u1CC0-\\u1CCF'\n        },\n        {\n            name: 'InSuperscripts_and_Subscripts',\n            bmp: '\\u2070-\\u209F'\n        },\n        {\n            name: 'InSupplemental_Arrows_A',\n            bmp: '\\u27F0-\\u27FF'\n        },\n        {\n            name: 'InSupplemental_Arrows_B',\n            bmp: '\\u2900-\\u297F'\n        },\n        {\n            name: 'InSupplemental_Arrows_C',\n            astral: '\\uD83E[\\uDC00-\\uDCFF]'\n        },\n        {\n            name: 'InSupplemental_Mathematical_Operators',\n            bmp: '\\u2A00-\\u2AFF'\n        },\n        {\n            name: 'InSupplemental_Punctuation',\n            bmp: '\\u2E00-\\u2E7F'\n        },\n        {\n            name: 'InSupplemental_Symbols_and_Pictographs',\n            astral: '\\uD83E[\\uDD00-\\uDDFF]'\n        },\n        {\n            name: 'InSupplementary_Private_Use_Area_A',\n            astral: '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InSupplementary_Private_Use_Area_B',\n            astral: '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'InSutton_SignWriting',\n            astral: '\\uD836[\\uDC00-\\uDEAF]'\n        },\n        {\n            name: 'InSyloti_Nagri',\n            bmp: '\\uA800-\\uA82F'\n        },\n        {\n            name: 'InSyriac',\n            bmp: '\\u0700-\\u074F'\n        },\n        {\n            name: 'InTagalog',\n            bmp: '\\u1700-\\u171F'\n        },\n        {\n            name: 'InTagbanwa',\n            bmp: '\\u1760-\\u177F'\n        },\n        {\n            name: 'InTags',\n            astral: '\\uDB40[\\uDC00-\\uDC7F]'\n        },\n        {\n            name: 'InTai_Le',\n            bmp: '\\u1950-\\u197F'\n        },\n        {\n            name: 'InTai_Tham',\n            bmp: '\\u1A20-\\u1AAF'\n        },\n        {\n            name: 'InTai_Viet',\n            bmp: '\\uAA80-\\uAADF'\n        },\n        {\n            name: 'InTai_Xuan_Jing_Symbols',\n            astral: '\\uD834[\\uDF00-\\uDF5F]'\n        },\n        {\n            name: 'InTakri',\n            astral: '\\uD805[\\uDE80-\\uDECF]'\n        },\n        {\n            name: 'InTamil',\n            bmp: '\\u0B80-\\u0BFF'\n        },\n        {\n            name: 'InTelugu',\n            bmp: '\\u0C00-\\u0C7F'\n        },\n        {\n            name: 'InThaana',\n            bmp: '\\u0780-\\u07BF'\n        },\n        {\n            name: 'InThai',\n            bmp: '\\u0E00-\\u0E7F'\n        },\n        {\n            name: 'InTibetan',\n            bmp: '\\u0F00-\\u0FFF'\n        },\n        {\n            name: 'InTifinagh',\n            bmp: '\\u2D30-\\u2D7F'\n        },\n        {\n            name: 'InTirhuta',\n            astral: '\\uD805[\\uDC80-\\uDCDF]'\n        },\n        {\n            name: 'InTransport_and_Map_Symbols',\n            astral: '\\uD83D[\\uDE80-\\uDEFF]'\n        },\n        {\n            name: 'InUgaritic',\n            astral: '\\uD800[\\uDF80-\\uDF9F]'\n        },\n        {\n            name: 'InUnified_Canadian_Aboriginal_Syllabics',\n            bmp: '\\u1400-\\u167F'\n        },\n        {\n            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',\n            bmp: '\\u18B0-\\u18FF'\n        },\n        {\n            name: 'InVai',\n            bmp: '\\uA500-\\uA63F'\n        },\n        {\n            name: 'InVariation_Selectors',\n            bmp: '\\uFE00-\\uFE0F'\n        },\n        {\n            name: 'InVariation_Selectors_Supplement',\n            astral: '\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'InVedic_Extensions',\n            bmp: '\\u1CD0-\\u1CFF'\n        },\n        {\n            name: 'InVertical_Forms',\n            bmp: '\\uFE10-\\uFE1F'\n        },\n        {\n            name: 'InWarang_Citi',\n            astral: '\\uD806[\\uDCA0-\\uDCFF]'\n        },\n        {\n            name: 'InYi_Radicals',\n            bmp: '\\uA490-\\uA4CF'\n        },\n        {\n            name: 'InYi_Syllables',\n            bmp: '\\uA000-\\uA48F'\n        },\n        {\n            name: 'InYijing_Hexagram_Symbols',\n            bmp: '\\u4DC0-\\u4DFF'\n        }\n    ]);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Categories 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See\n * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token names\n * are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'C',\n            alias: 'Other',\n            isBmpLast: true,\n            bmp: '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5-\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E43-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AE\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',\n            astral: '\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFFF]|\\uD86E[\\uDC1E\\uDC1F]|\\uD83D[\\uDD7A\\uDDA4\\uDED1-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3E-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD86D[\\uDF35-\\uDF3F]|[\\uD807\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD81C-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837-\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD805[\\uDC00-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD19-\\uDD7F\\uDD85-\\uDDBF\\uDDC1-\\uDFFF]|\\uD873[\\uDEA2-\\uDFFF]'\n        },\n        {\n            name: 'Cc',\n            alias: 'Control',\n            bmp: '\\0-\\x1F\\x7F-\\x9F'\n        },\n        {\n            name: 'Cf',\n            alias: 'Format',\n            bmp: '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',\n            astral: '\\uDB40[\\uDC01\\uDC20-\\uDC7F]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uD804\\uDCBD'\n        },\n        {\n            name: 'Cn',\n            alias: 'Unassigned',\n            bmp: '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5-\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E43-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AE\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',\n            astral: '\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFFF]|\\uD86E[\\uDC1E\\uDC1F]|\\uD83D[\\uDD7A\\uDDA4\\uDED1-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD86D[\\uDF35-\\uDF3F]|[\\uD807\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD81C-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837-\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD805[\\uDC00-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3E-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD19-\\uDD7F\\uDD85-\\uDDBF\\uDDC1-\\uDFFF]|\\uD873[\\uDEA2-\\uDFFF]'\n        },\n        {\n            name: 'Co',\n            alias: 'Private_Use',\n            bmp: '\\uE000-\\uF8FF',\n            astral: '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'\n        },\n        {\n            name: 'Cs',\n            alias: 'Surrogate',\n            bmp: '\\uD800-\\uDFFF'\n        },\n        {\n            name: 'L',\n            alias: 'Letter',\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD83A[\\uDC00-\\uDCC4]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD809[\\uDC80-\\uDD43]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD811[\\uDC00-\\uDE46]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD82C[\\uDC00\\uDC01]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Ll',\n            alias: 'Lowercase_Letter',\n            bmp: 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n            astral: '\\uD803[\\uDCC0-\\uDCF2]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD801[\\uDC28-\\uDC4F]|\\uD806[\\uDCC0-\\uDCDF]'\n        },\n        {\n            name: 'Lm',\n            alias: 'Modifier_Letter',\n            bmp: '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',\n            astral: '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F]'\n        },\n        {\n            name: 'Lo',\n            alias: 'Other_Letter',\n            bmp: '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4]|\\uD803[\\uDC00-\\uDC48]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCFF\\uDEC0-\\uDEF8]|\\uD809[\\uDC80-\\uDD43]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD811[\\uDC00-\\uDE46]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD82C[\\uDC00\\uDC01]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Lt',\n            alias: 'Titlecase_Letter',\n            bmp: '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'\n        },\n        {\n            name: 'Lu',\n            alias: 'Uppercase_Letter',\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\n            astral: '\\uD806[\\uDCA0-\\uDCBF]|\\uD803[\\uDC80-\\uDCB2]|\\uD801[\\uDC00-\\uDC27]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]'\n        },\n        {\n            name: 'M',\n            alias: 'Mark',\n            bmp: '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n            astral: '\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDCA-\\uDDCC\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD82F[\\uDC9D\\uDC9E]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'Mc',\n            alias: 'Spacing_Mark',\n            bmp: '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',\n            astral: '\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD81B[\\uDF51-\\uDF7E]'\n        },\n        {\n            name: 'Me',\n            alias: 'Enclosing_Mark',\n            bmp: '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'\n        },\n        {\n            name: 'Mn',\n            alias: 'Nonspacing_Mark',\n            bmp: '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n            astral: '\\uD805[\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDCA-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'N',\n            alias: 'Number',\n            bmp: '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n            astral: '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD806[\\uDCE0-\\uDCF2]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD834[\\uDF60-\\uDF71]|\\uD83C[\\uDD00-\\uDD0C]|\\uD809[\\uDC00-\\uDC6E]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]'\n        },\n        {\n            name: 'Nd',\n            alias: 'Decimal_Number',\n            bmp: '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n            astral: '\\uD801[\\uDCA0-\\uDCA9]|\\uD835[\\uDFCE-\\uDFFF]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]'\n        },\n        {\n            name: 'Nl',\n            alias: 'Letter_Number',\n            bmp: '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',\n            astral: '\\uD809[\\uDC00-\\uDC6E]|\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]'\n        },\n        {\n            name: 'No',\n            alias: 'Other_Number',\n            bmp: '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D70-\\u0D75\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',\n            astral: '\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD83C[\\uDD00-\\uDD0C]|\\uD806[\\uDCEA-\\uDCF2]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD805[\\uDF3A\\uDF3B]|\\uD81A[\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]'\n        },\n        {\n            name: 'P',\n            alias: 'Punctuation',\n            bmp: '\\x21-\\x23\\x25-\\\\x2A\\x2C-\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5B-\\\\x5D\\x5F\\\\x7B\\x7D\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',\n            astral: '\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD809[\\uDC70-\\uDC74]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD836[\\uDE87-\\uDE8B]|\\uD801\\uDD6F|\\uD82F\\uDC9F|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]'\n        },\n        {\n            name: 'Pc',\n            alias: 'Connector_Punctuation',\n            bmp: '\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'\n        },\n        {\n            name: 'Pd',\n            alias: 'Dash_Punctuation',\n            bmp: '\\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'\n        },\n        {\n            name: 'Pe',\n            alias: 'Close_Punctuation',\n            bmp: '\\\\x29\\\\x5D\\x7D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'\n        },\n        {\n            name: 'Pf',\n            alias: 'Final_Punctuation',\n            bmp: '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'\n        },\n        {\n            name: 'Pi',\n            alias: 'Initial_Punctuation',\n            bmp: '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'\n        },\n        {\n            name: 'Po',\n            alias: 'Other_Punctuation',\n            bmp: '\\x21-\\x23\\x25-\\x27\\\\x2A\\x2C\\\\x2E\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5C\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',\n            astral: '\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD809[\\uDC70-\\uDC74]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD836[\\uDE87-\\uDE8B]|\\uD801\\uDD6F|\\uD82F\\uDC9F|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]'\n        },\n        {\n            name: 'Ps',\n            alias: 'Open_Punctuation',\n            bmp: '\\\\x28\\\\x5B\\\\x7B\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'\n        },\n        {\n            name: 'S',\n            alias: 'Symbol',\n            bmp: '\\\\x24\\\\x2B\\x3C-\\x3E\\\\x5E\\x60\\\\x7C\\x7E\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BE\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD82F\\uDC9C|\\uD805\\uDF3F|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD83B[\\uDEF0\\uDEF1]'\n        },\n        {\n            name: 'Sc',\n            alias: 'Currency_Symbol',\n            bmp: '\\\\x24\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BE\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\n        },\n        {\n            name: 'Sk',\n            alias: 'Modifier_Symbol',\n            bmp: '\\\\x5E\\x60\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',\n            astral: '\\uD83C[\\uDFFB-\\uDFFF]'\n        },\n        {\n            name: 'Sm',\n            alias: 'Math_Symbol',\n            bmp: '\\\\x2B\\x3C-\\x3E\\\\x7C\\x7E\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',\n            astral: '\\uD83B[\\uDEF0\\uDEF1]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]'\n        },\n        {\n            name: 'So',\n            alias: 'Other_Symbol',\n            bmp: '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFA]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD82F\\uDC9C|\\uD805\\uDF3F|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]'\n        },\n        {\n            name: 'Z',\n            alias: 'Separator',\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n        },\n        {\n            name: 'Zl',\n            alias: 'Line_Separator',\n            bmp: '\\u2028'\n        },\n        {\n            name: 'Zp',\n            alias: 'Paragraph_Separator',\n            bmp: '\\u2029'\n        },\n        {\n            name: 'Zs',\n            alias: 'Space_Separator',\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'\n        }\n    ]);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Properties 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2012-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See\n * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from UAX\n * #44 <http://unicode.org/reports/tr44/>:\n *\n * - Alphabetic\n *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm + Lo +\n *   Nl + Other_Alphabetic.\n *\n * - Default_Ignorable_Code_Point\n *   For programmatic determination of default ignorable code points. New characters that should be\n *   ignored in rendering (unless explicitly supported) will be assigned in these ranges, permitting\n *   programs to correctly handle the default rendering of such characters when not otherwise\n *   supported.\n *\n * - Lowercase\n *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.\n *\n * - Noncharacter_Code_Point\n *   Code points permanently reserved for internal use.\n *\n * - Uppercase\n *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.\n *\n * - White_Space\n *   Spaces, separator characters and other control characters which should be treated by\n *   programming languages as \"white space\" for the purpose of parsing elements.\n *\n * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS #18\n * RL1.2 additionally requires support for Unicode scripts and general categories. These are\n * included in XRegExp's Unicode Categories and Unicode Scripts addons.\n *\n * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');\n    }\n\n    var unicodeData = [\n        {\n            name: 'ASCII',\n            bmp: '\\0-\\x7F'\n        },\n        {\n            name: 'Alphabetic',\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD83A[\\uDC00-\\uDCC4]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD80D[\\uDC00-\\uDC2E]|\\uD87E[\\uDC00-\\uDE1D]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD808[\\uDC00-\\uDF99]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD805[\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF19\\uDF1D-\\uDF2A]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD811[\\uDC00-\\uDE46]|\\uD82C[\\uDC00\\uDC01]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Any',\n            isBmpLast: true,\n            bmp: '\\0-\\uFFFF',\n            astral: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'\n        },\n        {\n            name: 'Default_Ignorable_Code_Point',\n            bmp: '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',\n            astral: '[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]|\\uD834[\\uDD73-\\uDD7A]|\\uD82F[\\uDCA0-\\uDCA3]'\n        },\n        {\n            name: 'Lowercase',\n            bmp: 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n            astral: '\\uD803[\\uDCC0-\\uDCF2]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD801[\\uDC28-\\uDC4F]|\\uD806[\\uDCC0-\\uDCDF]'\n        },\n        {\n            name: 'Noncharacter_Code_Point',\n            bmp: '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',\n            astral: '[\\uDB3F\\uDB7F\\uDBBF\\uDBFF\\uD83F\\uD87F\\uD8BF\\uDAFF\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uD8FF\\uDABF\\uDA7F\\uD93F][\\uDFFE\\uDFFF]'\n        },\n        {\n            name: 'Uppercase',\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\n            astral: '\\uD806[\\uDCA0-\\uDCBF]|\\uD803[\\uDC80-\\uDCB2]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD801[\\uDC00-\\uDC27]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'\n        },\n        {\n            name: 'White_Space',\n            bmp: '\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n        }\n    ];\n\n    // Add non-generated data\n    unicodeData.push({\n        name: 'Assigned',\n        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode\n        // Categories addon is required to use this property\n        inverseOf: 'Cn'\n    });\n\n    XRegExp.addUnicodeData(unicodeData);\n\n}(XRegExp));\n\n/*!\n * XRegExp Unicode Scripts 3.0.0\n * <http://xregexp.com/>\n * Steven Levithan (c) 2010-2015 MIT License\n * Unicode data provided by Mathias Bynens <http://mathiasbynens.be/>\n */\n\n/**\n * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive, and\n * any spaces, hyphens, and underscores are ignored.\n *\n * Uses Unicode 8.0.0.\n *\n * @requires XRegExp, Unicode Base\n */\n(function(XRegExp) {\n    'use strict';\n\n    if (!XRegExp.addUnicodeData) {\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');\n    }\n\n    XRegExp.addUnicodeData([\n        {\n            name: 'Ahom',\n            astral: '\\uD805[\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'\n        },\n        {\n            name: 'Anatolian_Hieroglyphs',\n            astral: '\\uD811[\\uDC00-\\uDE46]'\n        },\n        {\n            name: 'Arabic',\n            bmp: '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',\n            astral: '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'\n        },\n        {\n            name: 'Armenian',\n            bmp: '\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'\n        },\n        {\n            name: 'Avestan',\n            astral: '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'\n        },\n        {\n            name: 'Balinese',\n            bmp: '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'\n        },\n        {\n            name: 'Bamum',\n            bmp: '\\uA6A0-\\uA6F7',\n            astral: '\\uD81A[\\uDC00-\\uDE38]'\n        },\n        {\n            name: 'Bassa_Vah',\n            astral: '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'\n        },\n        {\n            name: 'Batak',\n            bmp: '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'\n        },\n        {\n            name: 'Bengali',\n            bmp: '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB'\n        },\n        {\n            name: 'Bopomofo',\n            bmp: '\\u02EA\\u02EB\\u3105-\\u312D\\u31A0-\\u31BA'\n        },\n        {\n            name: 'Brahmi',\n            astral: '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'\n        },\n        {\n            name: 'Braille',\n            bmp: '\\u2800-\\u28FF'\n        },\n        {\n            name: 'Buginese',\n            bmp: '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'\n        },\n        {\n            name: 'Buhid',\n            bmp: '\\u1740-\\u1753'\n        },\n        {\n            name: 'Canadian_Aboriginal',\n            bmp: '\\u1400-\\u167F\\u18B0-\\u18F5'\n        },\n        {\n            name: 'Carian',\n            astral: '\\uD800[\\uDEA0-\\uDED0]'\n        },\n        {\n            name: 'Caucasian_Albanian',\n            astral: '\\uD801[\\uDD30-\\uDD63\\uDD6F]'\n        },\n        {\n            name: 'Chakma',\n            astral: '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD43]'\n        },\n        {\n            name: 'Cham',\n            bmp: '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'\n        },\n        {\n            name: 'Cherokee',\n            bmp: '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'\n        },\n        {\n            name: 'Common',\n            bmp: '\\0-\\x40\\\\x5B-\\x60\\\\x7B-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061C\\u061F\\u0640\\u06DD\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BE\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u23FA\\u2400-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2E00-\\u2E42\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',\n            astral: '\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]|\\uD83D[\\uDC00-\\uDD79\\uDD7B-\\uDDA3\\uDDA5-\\uDED0\\uDEE0-\\uDEEC\\uDEF0-\\uDEF3\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDF00-\\uDF56\\uDF60-\\uDF71]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]'\n        },\n        {\n            name: 'Coptic',\n            bmp: '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'\n        },\n        {\n            name: 'Cuneiform',\n            astral: '\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]|\\uD808[\\uDC00-\\uDF99]'\n        },\n        {\n            name: 'Cypriot',\n            astral: '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'\n        },\n        {\n            name: 'Cyrillic',\n            bmp: '\\u0400-\\u0484\\u0487-\\u052F\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'\n        },\n        {\n            name: 'Deseret',\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\n        },\n        {\n            name: 'Devanagari',\n            bmp: '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FD'\n        },\n        {\n            name: 'Duployan',\n            astral: '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'\n        },\n        {\n            name: 'Egyptian_Hieroglyphs',\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'\n        },\n        {\n            name: 'Elbasan',\n            astral: '\\uD801[\\uDD00-\\uDD27]'\n        },\n        {\n            name: 'Ethiopic',\n            bmp: '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'\n        },\n        {\n            name: 'Georgian',\n            bmp: '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D'\n        },\n        {\n            name: 'Glagolitic',\n            bmp: '\\u2C00-\\u2C2E\\u2C30-\\u2C5E'\n        },\n        {\n            name: 'Gothic',\n            astral: '\\uD800[\\uDF30-\\uDF4A]'\n        },\n        {\n            name: 'Grantha',\n            astral: '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'\n        },\n        {\n            name: 'Greek',\n            bmp: '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',\n            astral: '\\uD800[\\uDD40-\\uDD8C\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'\n        },\n        {\n            name: 'Gujarati',\n            bmp: '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9'\n        },\n        {\n            name: 'Gurmukhi',\n            bmp: '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75'\n        },\n        {\n            name: 'Han',\n            bmp: '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9',\n            astral: '\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD87E[\\uDC00-\\uDE1D]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]'\n        },\n        {\n            name: 'Hangul',\n            bmp: '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\n        },\n        {\n            name: 'Hanunoo',\n            bmp: '\\u1720-\\u1734'\n        },\n        {\n            name: 'Hatran',\n            astral: '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'\n        },\n        {\n            name: 'Hebrew',\n            bmp: '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'\n        },\n        {\n            name: 'Hiragana',\n            bmp: '\\u3041-\\u3096\\u309D-\\u309F',\n            astral: '\\uD82C\\uDC01|\\uD83C\\uDE00'\n        },\n        {\n            name: 'Imperial_Aramaic',\n            astral: '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'\n        },\n        {\n            name: 'Inherited',\n            bmp: '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',\n            astral: '\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uD800[\\uDDFD\\uDEE0]|\\uDB40[\\uDD00-\\uDDEF]'\n        },\n        {\n            name: 'Inscriptional_Pahlavi',\n            astral: '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'\n        },\n        {\n            name: 'Inscriptional_Parthian',\n            astral: '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'\n        },\n        {\n            name: 'Javanese',\n            bmp: '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'\n        },\n        {\n            name: 'Kaithi',\n            astral: '\\uD804[\\uDC80-\\uDCC1]'\n        },\n        {\n            name: 'Kannada',\n            bmp: '\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'\n        },\n        {\n            name: 'Katakana',\n            bmp: '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',\n            astral: '\\uD82C\\uDC00'\n        },\n        {\n            name: 'Kayah_Li',\n            bmp: '\\uA900-\\uA92D\\uA92F'\n        },\n        {\n            name: 'Kharoshthi',\n            astral: '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE50-\\uDE58]'\n        },\n        {\n            name: 'Khmer',\n            bmp: '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'\n        },\n        {\n            name: 'Khojki',\n            astral: '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3D]'\n        },\n        {\n            name: 'Khudawadi',\n            astral: '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'\n        },\n        {\n            name: 'Lao',\n            bmp: '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'\n        },\n        {\n            name: 'Latin',\n            bmp: 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'\n        },\n        {\n            name: 'Lepcha',\n            bmp: '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'\n        },\n        {\n            name: 'Limbu',\n            bmp: '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'\n        },\n        {\n            name: 'Linear_A',\n            astral: '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'\n        },\n        {\n            name: 'Linear_B',\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'\n        },\n        {\n            name: 'Lisu',\n            bmp: '\\uA4D0-\\uA4FF'\n        },\n        {\n            name: 'Lycian',\n            astral: '\\uD800[\\uDE80-\\uDE9C]'\n        },\n        {\n            name: 'Lydian',\n            astral: '\\uD802[\\uDD20-\\uDD39\\uDD3F]'\n        },\n        {\n            name: 'Mahajani',\n            astral: '\\uD804[\\uDD50-\\uDD76]'\n        },\n        {\n            name: 'Malayalam',\n            bmp: '\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D75\\u0D79-\\u0D7F'\n        },\n        {\n            name: 'Mandaic',\n            bmp: '\\u0840-\\u085B\\u085E'\n        },\n        {\n            name: 'Manichaean',\n            astral: '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'\n        },\n        {\n            name: 'Meetei_Mayek',\n            bmp: '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'\n        },\n        {\n            name: 'Mende_Kikakui',\n            astral: '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'\n        },\n        {\n            name: 'Meroitic_Cursive',\n            astral: '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'\n        },\n        {\n            name: 'Meroitic_Hieroglyphs',\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\n        },\n        {\n            name: 'Miao',\n            astral: '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'\n        },\n        {\n            name: 'Modi',\n            astral: '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'\n        },\n        {\n            name: 'Mongolian',\n            bmp: '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA'\n        },\n        {\n            name: 'Mro',\n            astral: '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'\n        },\n        {\n            name: 'Multani',\n            astral: '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'\n        },\n        {\n            name: 'Myanmar',\n            bmp: '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'\n        },\n        {\n            name: 'Nabataean',\n            astral: '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'\n        },\n        {\n            name: 'New_Tai_Lue',\n            bmp: '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'\n        },\n        {\n            name: 'Nko',\n            bmp: '\\u07C0-\\u07FA'\n        },\n        {\n            name: 'Ogham',\n            bmp: '\\u1680-\\u169C'\n        },\n        {\n            name: 'Ol_Chiki',\n            bmp: '\\u1C50-\\u1C7F'\n        },\n        {\n            name: 'Old_Hungarian',\n            astral: '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'\n        },\n        {\n            name: 'Old_Italic',\n            astral: '\\uD800[\\uDF00-\\uDF23]'\n        },\n        {\n            name: 'Old_North_Arabian',\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\n        },\n        {\n            name: 'Old_Permic',\n            astral: '\\uD800[\\uDF50-\\uDF7A]'\n        },\n        {\n            name: 'Old_Persian',\n            astral: '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'\n        },\n        {\n            name: 'Old_South_Arabian',\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\n        },\n        {\n            name: 'Old_Turkic',\n            astral: '\\uD803[\\uDC00-\\uDC48]'\n        },\n        {\n            name: 'Oriya',\n            bmp: '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'\n        },\n        {\n            name: 'Osmanya',\n            astral: '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'\n        },\n        {\n            name: 'Pahawh_Hmong',\n            astral: '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'\n        },\n        {\n            name: 'Palmyrene',\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\n        },\n        {\n            name: 'Pau_Cin_Hau',\n            astral: '\\uD806[\\uDEC0-\\uDEF8]'\n        },\n        {\n            name: 'Phags_Pa',\n            bmp: '\\uA840-\\uA877'\n        },\n        {\n            name: 'Phoenician',\n            astral: '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'\n        },\n        {\n            name: 'Psalter_Pahlavi',\n            astral: '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'\n        },\n        {\n            name: 'Rejang',\n            bmp: '\\uA930-\\uA953\\uA95F'\n        },\n        {\n            name: 'Runic',\n            bmp: '\\u16A0-\\u16EA\\u16EE-\\u16F8'\n        },\n        {\n            name: 'Samaritan',\n            bmp: '\\u0800-\\u082D\\u0830-\\u083E'\n        },\n        {\n            name: 'Saurashtra',\n            bmp: '\\uA880-\\uA8C4\\uA8CE-\\uA8D9'\n        },\n        {\n            name: 'Sharada',\n            astral: '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'\n        },\n        {\n            name: 'Shavian',\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\n        },\n        {\n            name: 'Siddham',\n            astral: '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'\n        },\n        {\n            name: 'SignWriting',\n            astral: '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'\n        },\n        {\n            name: 'Sinhala',\n            bmp: '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',\n            astral: '\\uD804[\\uDDE1-\\uDDF4]'\n        },\n        {\n            name: 'Sora_Sompeng',\n            astral: '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'\n        },\n        {\n            name: 'Sundanese',\n            bmp: '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'\n        },\n        {\n            name: 'Syloti_Nagri',\n            bmp: '\\uA800-\\uA82B'\n        },\n        {\n            name: 'Syriac',\n            bmp: '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F'\n        },\n        {\n            name: 'Tagalog',\n            bmp: '\\u1700-\\u170C\\u170E-\\u1714'\n        },\n        {\n            name: 'Tagbanwa',\n            bmp: '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'\n        },\n        {\n            name: 'Tai_Le',\n            bmp: '\\u1950-\\u196D\\u1970-\\u1974'\n        },\n        {\n            name: 'Tai_Tham',\n            bmp: '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'\n        },\n        {\n            name: 'Tai_Viet',\n            bmp: '\\uAA80-\\uAAC2\\uAADB-\\uAADF'\n        },\n        {\n            name: 'Takri',\n            astral: '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'\n        },\n        {\n            name: 'Tamil',\n            bmp: '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'\n        },\n        {\n            name: 'Telugu',\n            bmp: '\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'\n        },\n        {\n            name: 'Thaana',\n            bmp: '\\u0780-\\u07B1'\n        },\n        {\n            name: 'Thai',\n            bmp: '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'\n        },\n        {\n            name: 'Tibetan',\n            bmp: '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'\n        },\n        {\n            name: 'Tifinagh',\n            bmp: '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'\n        },\n        {\n            name: 'Tirhuta',\n            astral: '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'\n        },\n        {\n            name: 'Ugaritic',\n            astral: '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'\n        },\n        {\n            name: 'Vai',\n            bmp: '\\uA500-\\uA62B'\n        },\n        {\n            name: 'Warang_Citi',\n            astral: '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'\n        },\n        {\n            name: 'Yi',\n            bmp: '\\uA000-\\uA48C\\uA490-\\uA4C6'\n        }\n    ]);\n\n}(XRegExp));\n\nreturn XRegExp;\n\n}));\n\n"],"sourceRoot":"/source/"}